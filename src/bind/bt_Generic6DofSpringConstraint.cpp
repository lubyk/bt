/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class btGeneric6DofSpringConstraint
 *
 * This file has been generated by dub 2.2.1.
 */
#include "dub/dub.h"
#include "BulletDynamics/ConstraintSolver/btGeneric6DofSpringConstraint.h"


/** ~btGeneric6DofSpringConstraint()
 * 
 */
static int btGeneric6DofSpringConstraint__btGeneric6DofSpringConstraint(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "bt.Generic6DofSpringConstraint"));
    if (userdata->gc) {
      btGeneric6DofSpringConstraint *self = (btGeneric6DofSpringConstraint *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** Cast (class_name)
 * 
 */
static int btGeneric6DofSpringConstraint__cast_(lua_State *L) {

  btGeneric6DofSpringConstraint *self = *((btGeneric6DofSpringConstraint **)dub::checksdata_n(L, 1, "bt.Generic6DofSpringConstraint"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "bt.TypedConstraint")) break;
      *retval__ = static_cast<btTypedConstraint *>(self);
      return 1;
    }
  }
  return 0;
}

/** btGeneric6DofSpringConstraint::btGeneric6DofSpringConstraint(btRigidBody &rbA, btRigidBody &rbB, const btTransform &frameInA, const btTransform &frameInB, bool useLinearReferenceFrameA)
 * bind/btGeneric6DofSpringConstraint.h:5
 */
static int btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      btRigidBody *rbA = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
      btRigidBody *rbB = *((btRigidBody **)dub::checksdata(L, 2, "bt.RigidBody"));
      btTransform *frameInA = *((btTransform **)dub::checksdata(L, 3, "bt.Transform"));
      btTransform *frameInB = *((btTransform **)dub::checksdata(L, 4, "bt.Transform"));
      bool useLinearReferenceFrameA = dub::checkboolean(L, 5);
      btGeneric6DofSpringConstraint *retval__ = new btGeneric6DofSpringConstraint(*rbA, *rbB, *frameInA, *frameInB, useLinearReferenceFrameA);
      dub::pushudata(L, retval__, "bt.Generic6DofSpringConstraint", true);
      return 1;
    } else {
      btRigidBody *rbB = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
      btTransform *frameInB = *((btTransform **)dub::checksdata(L, 2, "bt.Transform"));
      bool useLinearReferenceFrameB = dub::checkboolean(L, 3);
      btGeneric6DofSpringConstraint *retval__ = new btGeneric6DofSpringConstraint(*rbB, *frameInB, useLinearReferenceFrameB);
      dub::pushudata(L, retval__, "bt.Generic6DofSpringConstraint", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** void btGeneric6DofSpringConstraint::enableSpring(int index, bool onOff)
 * bind/btGeneric6DofSpringConstraint.h:16
 */
static int btGeneric6DofSpringConstraint_enableSpring(lua_State *L) {
  try {
    btGeneric6DofSpringConstraint *self = *((btGeneric6DofSpringConstraint **)dub::checksdata(L, 1, "bt.Generic6DofSpringConstraint"));
    int index = dub::checkint(L, 2);
    bool onOff = dub::checkboolean(L, 3);
    self->enableSpring(index, onOff);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enableSpring: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enableSpring: Unknown exception");
  }
  return dub::error(L);
}

/** void btGeneric6DofSpringConstraint::setStiffness(int index, btScalar stiffness)
 * bind/btGeneric6DofSpringConstraint.h:17
 */
static int btGeneric6DofSpringConstraint_setStiffness(lua_State *L) {
  try {
    btGeneric6DofSpringConstraint *self = *((btGeneric6DofSpringConstraint **)dub::checksdata(L, 1, "bt.Generic6DofSpringConstraint"));
    int index = dub::checkint(L, 2);
    btScalar stiffness = dub::checknumber(L, 3);
    self->setStiffness(index, stiffness);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setStiffness: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setStiffness: Unknown exception");
  }
  return dub::error(L);
}

/** void btGeneric6DofSpringConstraint::setDamping(int index, btScalar damping)
 * bind/btGeneric6DofSpringConstraint.h:18
 */
static int btGeneric6DofSpringConstraint_setDamping(lua_State *L) {
  try {
    btGeneric6DofSpringConstraint *self = *((btGeneric6DofSpringConstraint **)dub::checksdata(L, 1, "bt.Generic6DofSpringConstraint"));
    int index = dub::checkint(L, 2);
    btScalar damping = dub::checknumber(L, 3);
    self->setDamping(index, damping);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setDamping: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setDamping: Unknown exception");
  }
  return dub::error(L);
}

/** void btGeneric6DofSpringConstraint::setLinearLowerLimit(const btVector3 &linearLower)
 * bind/btGeneric6DofSpringConstraint.h:21
 */
static int btGeneric6DofSpringConstraint_setLinearLowerLimit(lua_State *L) {
  try {
    btGeneric6DofSpringConstraint *self = *((btGeneric6DofSpringConstraint **)dub::checksdata(L, 1, "bt.Generic6DofSpringConstraint"));
    btVector3 *linearLower = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->setLinearLowerLimit(*linearLower);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setLinearLowerLimit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setLinearLowerLimit: Unknown exception");
  }
  return dub::error(L);
}

/** void btGeneric6DofSpringConstraint::setLinearUpperLimit(const btVector3 &linearUpper)
 * bind/btGeneric6DofSpringConstraint.h:22
 */
static int btGeneric6DofSpringConstraint_setLinearUpperLimit(lua_State *L) {
  try {
    btGeneric6DofSpringConstraint *self = *((btGeneric6DofSpringConstraint **)dub::checksdata(L, 1, "bt.Generic6DofSpringConstraint"));
    btVector3 *linearUpper = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->setLinearUpperLimit(*linearUpper);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setLinearUpperLimit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setLinearUpperLimit: Unknown exception");
  }
  return dub::error(L);
}

/** void btGeneric6DofSpringConstraint::setAngularLowerLimit(const btVector3 &angularLower)
 * bind/btGeneric6DofSpringConstraint.h:23
 */
static int btGeneric6DofSpringConstraint_setAngularLowerLimit(lua_State *L) {
  try {
    btGeneric6DofSpringConstraint *self = *((btGeneric6DofSpringConstraint **)dub::checksdata(L, 1, "bt.Generic6DofSpringConstraint"));
    btVector3 *angularLower = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->setAngularLowerLimit(*angularLower);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAngularLowerLimit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAngularLowerLimit: Unknown exception");
  }
  return dub::error(L);
}

/** void btGeneric6DofSpringConstraint::setAngularUpperLimit(const btVector3 &angularUpper)
 * bind/btGeneric6DofSpringConstraint.h:24
 */
static int btGeneric6DofSpringConstraint_setAngularUpperLimit(lua_State *L) {
  try {
    btGeneric6DofSpringConstraint *self = *((btGeneric6DofSpringConstraint **)dub::checksdata(L, 1, "bt.Generic6DofSpringConstraint"));
    btVector3 *angularUpper = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->setAngularUpperLimit(*angularUpper);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAngularUpperLimit: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAngularUpperLimit: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int btGeneric6DofSpringConstraint___tostring(lua_State *L) {
  btGeneric6DofSpringConstraint *self = *((btGeneric6DofSpringConstraint **)dub::checksdata_n(L, 1, "bt.Generic6DofSpringConstraint"));
  lua_pushfstring(L, "bt.Generic6DofSpringConstraint: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg btGeneric6DofSpringConstraint_member_methods[] = {
  { "__gc"         , btGeneric6DofSpringConstraint__btGeneric6DofSpringConstraint },
  { "_cast_"       , btGeneric6DofSpringConstraint__cast_ },
  { "new"          , btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint },
  { "enableSpring" , btGeneric6DofSpringConstraint_enableSpring },
  { "setStiffness" , btGeneric6DofSpringConstraint_setStiffness },
  { "setDamping"   , btGeneric6DofSpringConstraint_setDamping },
  { "setLinearLowerLimit", btGeneric6DofSpringConstraint_setLinearLowerLimit },
  { "setLinearUpperLimit", btGeneric6DofSpringConstraint_setLinearUpperLimit },
  { "setAngularLowerLimit", btGeneric6DofSpringConstraint_setAngularLowerLimit },
  { "setAngularUpperLimit", btGeneric6DofSpringConstraint_setAngularUpperLimit },
  { "__tostring"   , btGeneric6DofSpringConstraint___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_bt_Generic6DofSpringConstraint(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.Generic6DofSpringConstraint");
  // <mt>

  // register member methods
  dub::fregister(L, btGeneric6DofSpringConstraint_member_methods);
  // setup meta-table
  dub::setup(L, "bt.Generic6DofSpringConstraint");
  // <mt>
  return 1;
}
