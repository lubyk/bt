/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class btPoint2PointConstraint
 *
 * This file has been generated by dub 2.2.1.
 */
#include "dub/dub.h"
#include "BulletDynamics/ConstraintSolver/btPoint2PointConstraint.h"


/** ~btPoint2PointConstraint()
 * 
 */
static int btPoint2PointConstraint__btPoint2PointConstraint(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "bt.Point2PointConstraint"));
    if (userdata->gc) {
      btPoint2PointConstraint *self = (btPoint2PointConstraint *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** Set attributes (key, value)
 * 
 */
static int btPoint2PointConstraint__set_(lua_State *L) {

  btPoint2PointConstraint *self = *((btPoint2PointConstraint **)dub::checksdata_n(L, 1, "bt.Point2PointConstraint"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "m_setting")) break;
      self->m_setting = **((btConstraintSetting **)dub::checksdata_n(L, 3, "bt.ConstraintSetting"));
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int btPoint2PointConstraint__get_(lua_State *L) {

  btPoint2PointConstraint *self = *((btPoint2PointConstraint **)dub::checksdata_n(L, 1, "bt.Point2PointConstraint", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "m_setting")) break;
      dub::pushudata(L, &self->m_setting, "bt.ConstraintSetting", false);
      return 1;
    }
  }
  return 0;
}

/** Cast (class_name)
 * 
 */
static int btPoint2PointConstraint__cast_(lua_State *L) {

  btPoint2PointConstraint *self = *((btPoint2PointConstraint **)dub::checksdata_n(L, 1, "bt.Point2PointConstraint"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "bt.TypedConstraint")) break;
      *retval__ = static_cast<btTypedConstraint *>(self);
      return 1;
    }
  }
  return 0;
}

/** btPoint2PointConstraint::btPoint2PointConstraint(btRigidBody &rbA, btRigidBody &rbB, const btVector3 &pivotInA, const btVector3 &pivotInB)
 * bind/btPoint2PointConstraint.h:5
 */
static int btPoint2PointConstraint_btPoint2PointConstraint(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      btRigidBody *rbA = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
      btRigidBody *rbB = *((btRigidBody **)dub::checksdata(L, 2, "bt.RigidBody"));
      btVector3 *pivotInA = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btVector3 *pivotInB = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      btPoint2PointConstraint *retval__ = new btPoint2PointConstraint(*rbA, *rbB, *pivotInA, *pivotInB);
      dub::pushudata(L, retval__, "bt.Point2PointConstraint", true);
      return 1;
    } else {
      btRigidBody *rbA = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
      btVector3 *pivotInA = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btPoint2PointConstraint *retval__ = new btPoint2PointConstraint(*rbA, *pivotInA);
      dub::pushudata(L, retval__, "bt.Point2PointConstraint", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** void btPoint2PointConstraint::setPivotB(const btVector3 &pivotB)
 * bind/btPoint2PointConstraint.h:7
 */
static int btPoint2PointConstraint_setPivotB(lua_State *L) {
  try {
    btPoint2PointConstraint *self = *((btPoint2PointConstraint **)dub::checksdata(L, 1, "bt.Point2PointConstraint"));
    btVector3 *pivotB = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->setPivotB(*pivotB);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setPivotB: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setPivotB: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int btPoint2PointConstraint___tostring(lua_State *L) {
  btPoint2PointConstraint *self = *((btPoint2PointConstraint **)dub::checksdata_n(L, 1, "bt.Point2PointConstraint"));
  lua_pushfstring(L, "bt.Point2PointConstraint: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg btPoint2PointConstraint_member_methods[] = {
  { "__gc"         , btPoint2PointConstraint__btPoint2PointConstraint },
  { "__newindex"   , btPoint2PointConstraint__set_ },
  { "__index"      , btPoint2PointConstraint__get_ },
  { "_cast_"       , btPoint2PointConstraint__cast_ },
  { "new"          , btPoint2PointConstraint_btPoint2PointConstraint },
  { "setPivotB"    , btPoint2PointConstraint_setPivotB },
  { "__tostring"   , btPoint2PointConstraint___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_bt_Point2PointConstraint(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.Point2PointConstraint");
  // <mt>

  // register member methods
  dub::fregister(L, btPoint2PointConstraint_member_methods);
  // setup meta-table
  dub::setup(L, "bt.Point2PointConstraint");
  // <mt>
  return 1;
}
