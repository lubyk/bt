/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class btDefaultCollisionConfiguration
 *
 * This file has been generated by dub 2.2.1.
 */
#include "dub/dub.h"
#include "BulletCollision/CollisionDispatch/btDefaultCollisionConfiguration.h"


/** Cast (class_name)
 * 
 */
static int btDefaultCollisionConfiguration__cast_(lua_State *L) {

  btDefaultCollisionConfiguration *self = *((btDefaultCollisionConfiguration **)dub::checksdata_n(L, 1, "bt.DefaultCollisionConfiguration"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "bt.CollisionConfiguration")) break;
      *retval__ = static_cast<btCollisionConfiguration *>(self);
      return 1;
    }
  }
  return 0;
}

/** btDefaultCollisionConfiguration::btDefaultCollisionConfiguration(const btDefaultCollisionConstructionInfo &constructionInfo=btDefaultCollisionConstructionInfo())
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btDefaultCollisionConfiguration.h:89
 */
static int btDefaultCollisionConfiguration_btDefaultCollisionConfiguration(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      btDefaultCollisionConstructionInfo *constructionInfo = *((btDefaultCollisionConstructionInfo **)dub::checksdata(L, 1, "bt.DefaultCollisionConstructionInfo"));
      btDefaultCollisionConfiguration *retval__ = new btDefaultCollisionConfiguration(*constructionInfo);
      dub::pushudata(L, retval__, "bt.DefaultCollisionConfiguration", true);
      return 1;
    } else {
      btDefaultCollisionConfiguration *retval__ = new btDefaultCollisionConfiguration();
      dub::pushudata(L, retval__, "bt.DefaultCollisionConfiguration", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btDefaultCollisionConfiguration::~btDefaultCollisionConfiguration()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btDefaultCollisionConfiguration.h:91
 */
static int btDefaultCollisionConfiguration__btDefaultCollisionConfiguration(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "bt.DefaultCollisionConfiguration"));
    if (userdata->gc) {
      btDefaultCollisionConfiguration *self = (btDefaultCollisionConfiguration *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btPoolAllocator* btDefaultCollisionConfiguration::getPersistentManifoldPool()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btDefaultCollisionConfiguration.h:94
 */
static int btDefaultCollisionConfiguration_getPersistentManifoldPool(lua_State *L) {
  try {
    btDefaultCollisionConfiguration *self = *((btDefaultCollisionConfiguration **)dub::checksdata(L, 1, "bt.DefaultCollisionConfiguration"));
    btPoolAllocator *retval__ = self->getPersistentManifoldPool();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "PoolAllocator", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPersistentManifoldPool: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPersistentManifoldPool: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btPoolAllocator* btDefaultCollisionConfiguration::getCollisionAlgorithmPool()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btDefaultCollisionConfiguration.h:99
 */
static int btDefaultCollisionConfiguration_getCollisionAlgorithmPool(lua_State *L) {
  try {
    btDefaultCollisionConfiguration *self = *((btDefaultCollisionConfiguration **)dub::checksdata(L, 1, "bt.DefaultCollisionConfiguration"));
    btPoolAllocator *retval__ = self->getCollisionAlgorithmPool();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "PoolAllocator", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCollisionAlgorithmPool: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCollisionAlgorithmPool: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btVoronoiSimplexSolver* btDefaultCollisionConfiguration::getSimplexSolver()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btDefaultCollisionConfiguration.h:105
 */
static int btDefaultCollisionConfiguration_getSimplexSolver(lua_State *L) {
  try {
    btDefaultCollisionConfiguration *self = *((btDefaultCollisionConfiguration **)dub::checksdata(L, 1, "bt.DefaultCollisionConfiguration"));
    btVoronoiSimplexSolver *retval__ = self->getSimplexSolver();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "VoronoiSimplexSolver", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSimplexSolver: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSimplexSolver: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btCollisionAlgorithmCreateFunc* btDefaultCollisionConfiguration::getCollisionAlgorithmCreateFunc(int proxyType0, int proxyType1)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btDefaultCollisionConfiguration.h:111
 */
static int btDefaultCollisionConfiguration_getCollisionAlgorithmCreateFunc(lua_State *L) {
  try {
    btDefaultCollisionConfiguration *self = *((btDefaultCollisionConfiguration **)dub::checksdata(L, 1, "bt.DefaultCollisionConfiguration"));
    int proxyType0 = dub::checkint(L, 2);
    int proxyType1 = dub::checkint(L, 3);
    btCollisionAlgorithmCreateFunc *retval__ = self->getCollisionAlgorithmCreateFunc(proxyType0, proxyType1);
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "CollisionAlgorithmCreateFunc", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCollisionAlgorithmCreateFunc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCollisionAlgorithmCreateFunc: Unknown exception");
  }
  return dub::error(L);
}

/** void btDefaultCollisionConfiguration::setConvexConvexMultipointIterations(int numPerturbationIterations=3, int minimumPointsPerturbationThreshold=3)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btDefaultCollisionConfiguration.h:120
 */
static int btDefaultCollisionConfiguration_setConvexConvexMultipointIterations(lua_State *L) {
  try {
    btDefaultCollisionConfiguration *self = *((btDefaultCollisionConfiguration **)dub::checksdata(L, 1, "bt.DefaultCollisionConfiguration"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      int numPerturbationIterations = dub::checkint(L, 2);
      int minimumPointsPerturbationThreshold = dub::checkint(L, 3);
      self->setConvexConvexMultipointIterations(numPerturbationIterations, minimumPointsPerturbationThreshold);
      return 0;
    } else if (top__ >= 2) {
      int numPerturbationIterations = dub::checkint(L, 2);
      self->setConvexConvexMultipointIterations(numPerturbationIterations);
      return 0;
    } else {
      self->setConvexConvexMultipointIterations();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setConvexConvexMultipointIterations: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setConvexConvexMultipointIterations: Unknown exception");
  }
  return dub::error(L);
}

/** void btDefaultCollisionConfiguration::setPlaneConvexMultipointIterations(int numPerturbationIterations=3, int minimumPointsPerturbationThreshold=3)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btDefaultCollisionConfiguration.h:122
 */
static int btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations(lua_State *L) {
  try {
    btDefaultCollisionConfiguration *self = *((btDefaultCollisionConfiguration **)dub::checksdata(L, 1, "bt.DefaultCollisionConfiguration"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      int numPerturbationIterations = dub::checkint(L, 2);
      int minimumPointsPerturbationThreshold = dub::checkint(L, 3);
      self->setPlaneConvexMultipointIterations(numPerturbationIterations, minimumPointsPerturbationThreshold);
      return 0;
    } else if (top__ >= 2) {
      int numPerturbationIterations = dub::checkint(L, 2);
      self->setPlaneConvexMultipointIterations(numPerturbationIterations);
      return 0;
    } else {
      self->setPlaneConvexMultipointIterations();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setPlaneConvexMultipointIterations: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setPlaneConvexMultipointIterations: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int btDefaultCollisionConfiguration___tostring(lua_State *L) {
  btDefaultCollisionConfiguration *self = *((btDefaultCollisionConfiguration **)dub::checksdata_n(L, 1, "bt.DefaultCollisionConfiguration"));
  lua_pushfstring(L, "bt.DefaultCollisionConfiguration: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg btDefaultCollisionConfiguration_member_methods[] = {
  { "_cast_"       , btDefaultCollisionConfiguration__cast_ },
  { "new"          , btDefaultCollisionConfiguration_btDefaultCollisionConfiguration },
  { "__gc"         , btDefaultCollisionConfiguration__btDefaultCollisionConfiguration },
  { "getPersistentManifoldPool", btDefaultCollisionConfiguration_getPersistentManifoldPool },
  { "getCollisionAlgorithmPool", btDefaultCollisionConfiguration_getCollisionAlgorithmPool },
  { "getSimplexSolver", btDefaultCollisionConfiguration_getSimplexSolver },
  { "getCollisionAlgorithmCreateFunc", btDefaultCollisionConfiguration_getCollisionAlgorithmCreateFunc },
  { "setConvexConvexMultipointIterations", btDefaultCollisionConfiguration_setConvexConvexMultipointIterations },
  { "setPlaneConvexMultipointIterations", btDefaultCollisionConfiguration_setPlaneConvexMultipointIterations },
  { "__tostring"   , btDefaultCollisionConfiguration___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_bt_DefaultCollisionConfiguration(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.DefaultCollisionConfiguration");
  // <mt>

  // register member methods
  dub::fregister(L, btDefaultCollisionConfiguration_member_methods);
  // setup meta-table
  dub::setup(L, "bt.DefaultCollisionConfiguration");
  // <mt>
  return 1;
}
