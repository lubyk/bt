/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class LkDebugDrawer
 *
 * This file has been generated by dub 2.2.1.
 */
#include "dub/dub.h"
#include "LkDebugDrawer.h"


/** ~LkDebugDrawer()
 * 
 */
static int LkDebugDrawer__LkDebugDrawer(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "bt.LkDebugDrawer"));
    if (userdata->gc) {
      LkDebugDrawer *self = (LkDebugDrawer *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** Cast (class_name)
 * 
 */
static int LkDebugDrawer__cast_(lua_State *L) {

  LkDebugDrawer *self = *((LkDebugDrawer **)dub::checksdata_n(L, 1, "bt.LkDebugDrawer"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "bt.IDebugDraw")) break;
      *retval__ = static_cast<btIDebugDraw *>(self);
      return 1;
    }
  }
  return 0;
}

/** LkDebugDrawer::LkDebugDrawer(int debug_mode=btIDebugDraw::DBG_MAX_DEBUG_DRAW_MODE)
 * include/LkDebugDrawer.h:45
 */
static int LkDebugDrawer_LkDebugDrawer(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      int debug_mode = dub::checkint(L, 1);
      LkDebugDrawer *retval__ = new LkDebugDrawer(debug_mode);
      retval__->dub_pushobject(L, retval__, "bt.LkDebugDrawer", true);
      return 1;
    } else {
      LkDebugDrawer *retval__ = new LkDebugDrawer();
      retval__->dub_pushobject(L, retval__, "bt.LkDebugDrawer", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void LkDebugDrawer::setDebugMode(int debugMode)
 * include/LkDebugDrawer.h:143
 */
static int LkDebugDrawer_setDebugMode(lua_State *L) {
  try {
    LkDebugDrawer *self = *((LkDebugDrawer **)dub::checksdata(L, 1, "bt.LkDebugDrawer"));
    int debugMode = dub::checkint(L, 2);
    self->setDebugMode(debugMode);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setDebugMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setDebugMode: Unknown exception");
  }
  return dub::error(L);
}

/** virtual int LkDebugDrawer::getDebugMode() const
 * include/LkDebugDrawer.h:147
 */
static int LkDebugDrawer_getDebugMode(lua_State *L) {
  try {
    LkDebugDrawer *self = *((LkDebugDrawer **)dub::checksdata(L, 1, "bt.LkDebugDrawer"));
    lua_pushnumber(L, self->getDebugMode());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getDebugMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getDebugMode: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawAabb(const btVector3 &from, const btVector3 &to, const btVector3 &color)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:108
 */
static int LkDebugDrawer_drawAabb(lua_State *L) {
  try {
    LkDebugDrawer *self = *((LkDebugDrawer **)dub::checksdata(L, 1, "bt.LkDebugDrawer"));
    btVector3 *from = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    btVector3 *to = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    btVector3 *color = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
    self->drawAabb(*from, *to, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawAabb: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawAabb: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawTransform(const btTransform &transform, btScalar orthoLen)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:137
 */
static int LkDebugDrawer_drawTransform(lua_State *L) {
  try {
    LkDebugDrawer *self = *((LkDebugDrawer **)dub::checksdata(L, 1, "bt.LkDebugDrawer"));
    btTransform *transform = *((btTransform **)dub::checksdata(L, 2, "bt.Transform"));
    btScalar orthoLen = dub::checknumber(L, 3);
    self->drawTransform(*transform, orthoLen);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawTransform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawTransform: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawArc(const btVector3 &center, const btVector3 &normal, const btVector3 &axis, btScalar radiusA, btScalar radiusB, btScalar minAngle, btScalar maxAngle, const btVector3 &color, bool drawSect, btScalar stepDegrees=btScalar(10.f))
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:145
 */
static int LkDebugDrawer_drawArc(lua_State *L) {
  try {
    LkDebugDrawer *self = *((LkDebugDrawer **)dub::checksdata(L, 1, "bt.LkDebugDrawer"));
    int top__ = lua_gettop(L);
    if (top__ >= 11) {
      btVector3 *center = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *normal = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btVector3 *axis = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      btScalar radiusA = dub::checknumber(L, 5);
      btScalar radiusB = dub::checknumber(L, 6);
      btScalar minAngle = dub::checknumber(L, 7);
      btScalar maxAngle = dub::checknumber(L, 8);
      btVector3 *color = *((btVector3 **)dub::checksdata(L, 9, "bt.Vector3"));
      bool drawSect = dub::checkboolean(L, 10);
      btScalar stepDegrees = dub::checknumber(L, 11);
      self->drawArc(*center, *normal, *axis, radiusA, radiusB, minAngle, maxAngle, *color, drawSect, stepDegrees);
      return 0;
    } else {
      btVector3 *center = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *normal = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btVector3 *axis = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      btScalar radiusA = dub::checknumber(L, 5);
      btScalar radiusB = dub::checknumber(L, 6);
      btScalar minAngle = dub::checknumber(L, 7);
      btScalar maxAngle = dub::checknumber(L, 8);
      btVector3 *color = *((btVector3 **)dub::checksdata(L, 9, "bt.Vector3"));
      bool drawSect = dub::checkboolean(L, 10);
      self->drawArc(*center, *normal, *axis, radiusA, radiusB, minAngle, maxAngle, *color, drawSect);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawArc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawArc: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawSpherePatch(const btVector3 &center, const btVector3 &up, const btVector3 &axis, btScalar radius, btScalar minTh, btScalar maxTh, btScalar minPs, btScalar maxPs, const btVector3 &color, btScalar stepDegrees=btScalar(10.f), bool drawCenter=true)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:170
 */
static int LkDebugDrawer_drawSpherePatch(lua_State *L) {
  try {
    LkDebugDrawer *self = *((LkDebugDrawer **)dub::checksdata(L, 1, "bt.LkDebugDrawer"));
    int top__ = lua_gettop(L);
    if (top__ >= 12) {
      btVector3 *center = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *up = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btVector3 *axis = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      btScalar radius = dub::checknumber(L, 5);
      btScalar minTh = dub::checknumber(L, 6);
      btScalar maxTh = dub::checknumber(L, 7);
      btScalar minPs = dub::checknumber(L, 8);
      btScalar maxPs = dub::checknumber(L, 9);
      btVector3 *color = *((btVector3 **)dub::checksdata(L, 10, "bt.Vector3"));
      btScalar stepDegrees = dub::checknumber(L, 11);
      bool drawCenter = dub::checkboolean(L, 12);
      self->drawSpherePatch(*center, *up, *axis, radius, minTh, maxTh, minPs, maxPs, *color, stepDegrees, drawCenter);
      return 0;
    } else if (top__ >= 11) {
      btVector3 *center = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *up = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btVector3 *axis = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      btScalar radius = dub::checknumber(L, 5);
      btScalar minTh = dub::checknumber(L, 6);
      btScalar maxTh = dub::checknumber(L, 7);
      btScalar minPs = dub::checknumber(L, 8);
      btScalar maxPs = dub::checknumber(L, 9);
      btVector3 *color = *((btVector3 **)dub::checksdata(L, 10, "bt.Vector3"));
      btScalar stepDegrees = dub::checknumber(L, 11);
      self->drawSpherePatch(*center, *up, *axis, radius, minTh, maxTh, minPs, maxPs, *color, stepDegrees);
      return 0;
    } else {
      btVector3 *center = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *up = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btVector3 *axis = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      btScalar radius = dub::checknumber(L, 5);
      btScalar minTh = dub::checknumber(L, 6);
      btScalar maxTh = dub::checknumber(L, 7);
      btScalar minPs = dub::checknumber(L, 8);
      btScalar maxPs = dub::checknumber(L, 9);
      btVector3 *color = *((btVector3 **)dub::checksdata(L, 10, "bt.Vector3"));
      self->drawSpherePatch(*center, *up, *axis, radius, minTh, maxTh, minPs, maxPs, *color);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawSpherePatch: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawSpherePatch: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawBox(const btVector3 &bbMin, const btVector3 &bbMax, const btVector3 &color)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:277
 */
static int LkDebugDrawer_drawBox(lua_State *L) {
  try {
    LkDebugDrawer *self = *((LkDebugDrawer **)dub::checksdata(L, 1, "bt.LkDebugDrawer"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      btVector3 *bbMin = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *bbMax = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btTransform *trans = *((btTransform **)dub::checksdata(L, 4, "bt.Transform"));
      btVector3 *color = *((btVector3 **)dub::checksdata(L, 5, "bt.Vector3"));
      self->drawBox(*bbMin, *bbMax, *trans, *color);
      return 0;
    } else {
      btVector3 *bbMin = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *bbMax = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btVector3 *color = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      self->drawBox(*bbMin, *bbMax, *color);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawBox: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawBox: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawCapsule(btScalar radius, btScalar halfHeight, int upAxis, const btTransform &transform, const btVector3 &color)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:308
 */
static int LkDebugDrawer_drawCapsule(lua_State *L) {
  try {
    LkDebugDrawer *self = *((LkDebugDrawer **)dub::checksdata(L, 1, "bt.LkDebugDrawer"));
    btScalar radius = dub::checknumber(L, 2);
    btScalar halfHeight = dub::checknumber(L, 3);
    int upAxis = dub::checkint(L, 4);
    btTransform *transform = *((btTransform **)dub::checksdata(L, 5, "bt.Transform"));
    btVector3 *color = *((btVector3 **)dub::checksdata(L, 6, "bt.Vector3"));
    self->drawCapsule(radius, halfHeight, upAxis, *transform, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawCapsule: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawCapsule: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawCylinder(btScalar radius, btScalar halfHeight, int upAxis, const btTransform &transform, const btVector3 &color)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:366
 */
static int LkDebugDrawer_drawCylinder(lua_State *L) {
  try {
    LkDebugDrawer *self = *((LkDebugDrawer **)dub::checksdata(L, 1, "bt.LkDebugDrawer"));
    btScalar radius = dub::checknumber(L, 2);
    btScalar halfHeight = dub::checknumber(L, 3);
    int upAxis = dub::checkint(L, 4);
    btTransform *transform = *((btTransform **)dub::checksdata(L, 5, "bt.Transform"));
    btVector3 *color = *((btVector3 **)dub::checksdata(L, 6, "bt.Vector3"));
    self->drawCylinder(radius, halfHeight, upAxis, *transform, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawCylinder: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawCylinder: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawCone(btScalar radius, btScalar height, int upAxis, const btTransform &transform, const btVector3 &color)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:392
 */
static int LkDebugDrawer_drawCone(lua_State *L) {
  try {
    LkDebugDrawer *self = *((LkDebugDrawer **)dub::checksdata(L, 1, "bt.LkDebugDrawer"));
    btScalar radius = dub::checknumber(L, 2);
    btScalar height = dub::checknumber(L, 3);
    int upAxis = dub::checkint(L, 4);
    btTransform *transform = *((btTransform **)dub::checksdata(L, 5, "bt.Transform"));
    btVector3 *color = *((btVector3 **)dub::checksdata(L, 6, "bt.Vector3"));
    self->drawCone(radius, height, upAxis, *transform, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawCone: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawCone: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawPlane(const btVector3 &planeNormal, btScalar planeConst, const btTransform &transform, const btVector3 &color)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:429
 */
static int LkDebugDrawer_drawPlane(lua_State *L) {
  try {
    LkDebugDrawer *self = *((LkDebugDrawer **)dub::checksdata(L, 1, "bt.LkDebugDrawer"));
    btVector3 *planeNormal = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    btScalar planeConst = dub::checknumber(L, 3);
    btTransform *transform = *((btTransform **)dub::checksdata(L, 4, "bt.Transform"));
    btVector3 *color = *((btVector3 **)dub::checksdata(L, 5, "bt.Vector3"));
    self->drawPlane(*planeNormal, planeConst, *transform, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawPlane: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawPlane: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::flushLines()
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:443
 */
static int LkDebugDrawer_flushLines(lua_State *L) {
  try {
    LkDebugDrawer *self = *((LkDebugDrawer **)dub::checksdata(L, 1, "bt.LkDebugDrawer"));
    self->flushLines();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "flushLines: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "flushLines: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int LkDebugDrawer___tostring(lua_State *L) {
  LkDebugDrawer *self = *((LkDebugDrawer **)dub::checksdata_n(L, 1, "bt.LkDebugDrawer"));
  lua_pushfstring(L, "bt.LkDebugDrawer: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg LkDebugDrawer_member_methods[] = {
  { "__gc"         , LkDebugDrawer__LkDebugDrawer },
  { "_cast_"       , LkDebugDrawer__cast_ },
  { "new"          , LkDebugDrawer_LkDebugDrawer },
  { "setDebugMode" , LkDebugDrawer_setDebugMode },
  { "getDebugMode" , LkDebugDrawer_getDebugMode },
  { "drawAabb"     , LkDebugDrawer_drawAabb },
  { "drawTransform", LkDebugDrawer_drawTransform },
  { "drawArc"      , LkDebugDrawer_drawArc },
  { "drawSpherePatch", LkDebugDrawer_drawSpherePatch },
  { "drawBox"      , LkDebugDrawer_drawBox },
  { "drawCapsule"  , LkDebugDrawer_drawCapsule },
  { "drawCylinder" , LkDebugDrawer_drawCylinder },
  { "drawCone"     , LkDebugDrawer_drawCone },
  { "drawPlane"    , LkDebugDrawer_drawPlane },
  { "flushLines"   , LkDebugDrawer_flushLines },
  { "__tostring"   , LkDebugDrawer___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_bt_LkDebugDrawer(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.LkDebugDrawer");
  // <mt>

  // register member methods
  dub::fregister(L, LkDebugDrawer_member_methods);
  // setup meta-table
  dub::setup(L, "bt.LkDebugDrawer");
  // <mt>
  return 1;
}
