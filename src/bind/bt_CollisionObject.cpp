/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class btCollisionObject
 *
 * This file has been generated by dub 2.2.1.
 */
#include "dub/dub.h"
#include "BulletCollision/CollisionDispatch/btCollisionObject.h"


/** bool btCollisionObject::mergesSimulationIslands() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:156
 */
static int btCollisionObject_mergesSimulationIslands(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushboolean(L, self->mergesSimulationIslands());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "mergesSimulationIslands: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "mergesSimulationIslands: Unknown exception");
  }
  return dub::error(L);
}

/** const btVector3& btCollisionObject::getAnisotropicFriction() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:162
 */
static int btCollisionObject_getAnisotropicFriction(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    dub::pushudata(L, const_cast<btVector3*>(&self->getAnisotropicFriction()), "bt.Vector3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAnisotropicFriction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAnisotropicFriction: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setAnisotropicFriction(const btVector3 &anisotropicFriction, int frictionMode=CF_ANISOTROPIC_FRICTION)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:166
 */
static int btCollisionObject_setAnisotropicFriction(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      btVector3 *anisotropicFriction = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      int frictionMode = dub::checkint(L, 3);
      self->setAnisotropicFriction(*anisotropicFriction, frictionMode);
      return 0;
    } else {
      btVector3 *anisotropicFriction = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      self->setAnisotropicFriction(*anisotropicFriction);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAnisotropicFriction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAnisotropicFriction: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionObject::hasAnisotropicFriction(int frictionMode=CF_ANISOTROPIC_FRICTION) const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:172
 */
static int btCollisionObject_hasAnisotropicFriction(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      int frictionMode = dub::checkint(L, 2);
      lua_pushboolean(L, self->hasAnisotropicFriction(frictionMode));
      return 1;
    } else {
      lua_pushboolean(L, self->hasAnisotropicFriction());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "hasAnisotropicFriction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "hasAnisotropicFriction: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setContactProcessingThreshold(btScalar contactProcessingThreshold)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:179
 */
static int btCollisionObject_setContactProcessingThreshold(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    btScalar contactProcessingThreshold = dub::checknumber(L, 2);
    self->setContactProcessingThreshold(contactProcessingThreshold);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setContactProcessingThreshold: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setContactProcessingThreshold: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btCollisionObject::getContactProcessingThreshold() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:183
 */
static int btCollisionObject_getContactProcessingThreshold(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushnumber(L, self->getContactProcessingThreshold());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getContactProcessingThreshold: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getContactProcessingThreshold: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionObject::isStaticObject() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:188
 */
static int btCollisionObject_isStaticObject(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushboolean(L, self->isStaticObject());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isStaticObject: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isStaticObject: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionObject::isKinematicObject() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:192
 */
static int btCollisionObject_isKinematicObject(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushboolean(L, self->isKinematicObject());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isKinematicObject: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isKinematicObject: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionObject::isStaticOrKinematicObject() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:197
 */
static int btCollisionObject_isStaticOrKinematicObject(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushboolean(L, self->isStaticOrKinematicObject());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isStaticOrKinematicObject: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isStaticOrKinematicObject: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionObject::hasContactResponse() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:202
 */
static int btCollisionObject_hasContactResponse(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushboolean(L, self->hasContactResponse());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "hasContactResponse: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "hasContactResponse: Unknown exception");
  }
  return dub::error(L);
}

/** btCollisionObject::btCollisionObject()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:207
 */
static int btCollisionObject_btCollisionObject(lua_State *L) {
  try {
    btCollisionObject *retval__ = new btCollisionObject();
    dub::pushudata(L, retval__, "bt.CollisionObject", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btCollisionObject::~btCollisionObject()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:209
 */
static int btCollisionObject__btCollisionObject(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "bt.CollisionObject"));
    if (userdata->gc) {
      btCollisionObject *self = (btCollisionObject *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionObject::setCollisionShape(btCollisionShape *collisionShape)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:211
 */
static int btCollisionObject_setCollisionShape(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    btCollisionShape *collisionShape = *((btCollisionShape **)dub::checksdata(L, 2, "bt.CollisionShape"));
    self->setCollisionShape(collisionShape);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCollisionShape: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCollisionShape: Unknown exception");
  }
  return dub::error(L);
}

/** const btCollisionShape* btCollisionObject::getCollisionShape() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:218
 */
static int btCollisionObject_getCollisionShape(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    const btCollisionShape *retval__ = self->getCollisionShape();
    if (!retval__) return 0;
    dub::pushudata(L, const_cast<btCollisionShape*>(retval__), "bt.CollisionShape", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCollisionShape: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCollisionShape: Unknown exception");
  }
  return dub::error(L);
}

/** void* btCollisionObject::internalGetExtensionPointer() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:234
 */
static int btCollisionObject_internalGetExtensionPointer(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    self->internalGetExtensionPointer();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "internalGetExtensionPointer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "internalGetExtensionPointer: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::internalSetExtensionPointer(void *pointer)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:240
 */
static int btCollisionObject_internalSetExtensionPointer(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    void *pointer = *((void **)dub::checksdata(L, 2, "void"));
    self->internalSetExtensionPointer(pointer);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "internalSetExtensionPointer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "internalSetExtensionPointer: Unknown exception");
  }
  return dub::error(L);
}

/** int btCollisionObject::getActivationState() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:245
 */
static int btCollisionObject_getActivationState(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushnumber(L, self->getActivationState());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getActivationState: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getActivationState: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setActivationState(int newState) const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:247
 */
static int btCollisionObject_setActivationState(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    int newState = dub::checkint(L, 2);
    self->setActivationState(newState);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setActivationState: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setActivationState: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setDeactivationTime(btScalar time)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:249
 */
static int btCollisionObject_setDeactivationTime(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    btScalar time = dub::checknumber(L, 2);
    self->setDeactivationTime(time);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setDeactivationTime: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setDeactivationTime: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btCollisionObject::getDeactivationTime() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:253
 */
static int btCollisionObject_getDeactivationTime(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushnumber(L, self->getDeactivationTime());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getDeactivationTime: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getDeactivationTime: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::forceActivationState(int newState) const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:258
 */
static int btCollisionObject_forceActivationState(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    int newState = dub::checkint(L, 2);
    self->forceActivationState(newState);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "forceActivationState: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "forceActivationState: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::activate(bool forceActivation=false) const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:260
 */
static int btCollisionObject_activate(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      bool forceActivation = dub::checkboolean(L, 2);
      self->activate(forceActivation);
      return 0;
    } else {
      self->activate();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "activate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "activate: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionObject::isActive() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:262
 */
static int btCollisionObject_isActive(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushboolean(L, self->isActive());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isActive: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isActive: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setRestitution(btScalar rest)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:267
 */
static int btCollisionObject_setRestitution(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    btScalar rest = dub::checknumber(L, 2);
    self->setRestitution(rest);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setRestitution: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setRestitution: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btCollisionObject::getRestitution() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:272
 */
static int btCollisionObject_getRestitution(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushnumber(L, self->getRestitution());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRestitution: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRestitution: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setFriction(btScalar frict)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:276
 */
static int btCollisionObject_setFriction(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    btScalar frict = dub::checknumber(L, 2);
    self->setFriction(frict);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFriction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFriction: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btCollisionObject::getFriction() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:281
 */
static int btCollisionObject_getFriction(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushnumber(L, self->getFriction());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getFriction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getFriction: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setRollingFriction(btScalar frict)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:286
 */
static int btCollisionObject_setRollingFriction(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    btScalar frict = dub::checknumber(L, 2);
    self->setRollingFriction(frict);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setRollingFriction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setRollingFriction: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btCollisionObject::getRollingFriction() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:291
 */
static int btCollisionObject_getRollingFriction(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushnumber(L, self->getRollingFriction());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRollingFriction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRollingFriction: Unknown exception");
  }
  return dub::error(L);
}

/** int btCollisionObject::getInternalType() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:298
 */
static int btCollisionObject_getInternalType(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushnumber(L, self->getInternalType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getInternalType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getInternalType: Unknown exception");
  }
  return dub::error(L);
}

/** btTransform& btCollisionObject::getWorldTransform()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:303
 */
static int btCollisionObject_getWorldTransform(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    dub::pushudata(L, &self->getWorldTransform(), "bt.Transform", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getWorldTransform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getWorldTransform: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setWorldTransform(const btTransform &worldTrans)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:313
 */
static int btCollisionObject_setWorldTransform(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    btTransform *worldTrans = *((btTransform **)dub::checksdata(L, 2, "bt.Transform"));
    self->setWorldTransform(*worldTrans);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setWorldTransform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setWorldTransform: Unknown exception");
  }
  return dub::error(L);
}

/** btBroadphaseProxy* btCollisionObject::getBroadphaseHandle()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:320
 */
static int btCollisionObject_getBroadphaseHandle(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    btBroadphaseProxy *retval__ = self->getBroadphaseHandle();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "BroadphaseProxy", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getBroadphaseHandle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getBroadphaseHandle: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setBroadphaseHandle(btBroadphaseProxy *handle)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:330
 */
static int btCollisionObject_setBroadphaseHandle(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    btBroadphaseProxy *handle = *((btBroadphaseProxy **)dub::checksdata(L, 2, "BroadphaseProxy"));
    self->setBroadphaseHandle(handle);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setBroadphaseHandle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setBroadphaseHandle: Unknown exception");
  }
  return dub::error(L);
}

/** const btTransform& btCollisionObject::getInterpolationWorldTransform() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:336
 */
static int btCollisionObject_getInterpolationWorldTransform(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    dub::pushudata(L, const_cast<btTransform*>(&self->getInterpolationWorldTransform()), "bt.Transform", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getInterpolationWorldTransform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getInterpolationWorldTransform: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setInterpolationWorldTransform(const btTransform &trans)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:346
 */
static int btCollisionObject_setInterpolationWorldTransform(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    btTransform *trans = *((btTransform **)dub::checksdata(L, 2, "bt.Transform"));
    self->setInterpolationWorldTransform(*trans);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setInterpolationWorldTransform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setInterpolationWorldTransform: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setInterpolationLinearVelocity(const btVector3 &linvel)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:352
 */
static int btCollisionObject_setInterpolationLinearVelocity(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    btVector3 *linvel = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->setInterpolationLinearVelocity(*linvel);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setInterpolationLinearVelocity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setInterpolationLinearVelocity: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setInterpolationAngularVelocity(const btVector3 &angvel)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:358
 */
static int btCollisionObject_setInterpolationAngularVelocity(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    btVector3 *angvel = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->setInterpolationAngularVelocity(*angvel);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setInterpolationAngularVelocity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setInterpolationAngularVelocity: Unknown exception");
  }
  return dub::error(L);
}

/** const btVector3& btCollisionObject::getInterpolationLinearVelocity() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:364
 */
static int btCollisionObject_getInterpolationLinearVelocity(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    dub::pushudata(L, const_cast<btVector3*>(&self->getInterpolationLinearVelocity()), "bt.Vector3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getInterpolationLinearVelocity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getInterpolationLinearVelocity: Unknown exception");
  }
  return dub::error(L);
}

/** const btVector3& btCollisionObject::getInterpolationAngularVelocity() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:369
 */
static int btCollisionObject_getInterpolationAngularVelocity(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    dub::pushudata(L, const_cast<btVector3*>(&self->getInterpolationAngularVelocity()), "bt.Vector3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getInterpolationAngularVelocity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getInterpolationAngularVelocity: Unknown exception");
  }
  return dub::error(L);
}

/** int btCollisionObject::getIslandTag() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:374
 */
static int btCollisionObject_getIslandTag(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushnumber(L, self->getIslandTag());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getIslandTag: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getIslandTag: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setIslandTag(int tag)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:379
 */
static int btCollisionObject_setIslandTag(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    int tag = dub::checkint(L, 2);
    self->setIslandTag(tag);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setIslandTag: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setIslandTag: Unknown exception");
  }
  return dub::error(L);
}

/** int btCollisionObject::getCompanionId() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:384
 */
static int btCollisionObject_getCompanionId(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushnumber(L, self->getCompanionId());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCompanionId: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCompanionId: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setCompanionId(int id)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:389
 */
static int btCollisionObject_setCompanionId(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    int id = dub::checkint(L, 2);
    self->setCompanionId(id);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCompanionId: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCompanionId: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btCollisionObject::getHitFraction() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:394
 */
static int btCollisionObject_getHitFraction(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushnumber(L, self->getHitFraction());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getHitFraction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getHitFraction: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setHitFraction(btScalar hitFraction)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:399
 */
static int btCollisionObject_setHitFraction(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    btScalar hitFraction = dub::checknumber(L, 2);
    self->setHitFraction(hitFraction);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setHitFraction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setHitFraction: Unknown exception");
  }
  return dub::error(L);
}

/** int btCollisionObject::getCollisionFlags() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:405
 */
static int btCollisionObject_getCollisionFlags(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushnumber(L, self->getCollisionFlags());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCollisionFlags: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCollisionFlags: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setCollisionFlags(int flags)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:410
 */
static int btCollisionObject_setCollisionFlags(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    int flags = dub::checkint(L, 2);
    self->setCollisionFlags(flags);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCollisionFlags: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCollisionFlags: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btCollisionObject::getCcdSweptSphereRadius() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:416
 */
static int btCollisionObject_getCcdSweptSphereRadius(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushnumber(L, self->getCcdSweptSphereRadius());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCcdSweptSphereRadius: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCcdSweptSphereRadius: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setCcdSweptSphereRadius(btScalar radius)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:422
 */
static int btCollisionObject_setCcdSweptSphereRadius(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    btScalar radius = dub::checknumber(L, 2);
    self->setCcdSweptSphereRadius(radius);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCcdSweptSphereRadius: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCcdSweptSphereRadius: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btCollisionObject::getCcdMotionThreshold() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:427
 */
static int btCollisionObject_getCcdMotionThreshold(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushnumber(L, self->getCcdMotionThreshold());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCcdMotionThreshold: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCcdMotionThreshold: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btCollisionObject::getCcdSquareMotionThreshold() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:432
 */
static int btCollisionObject_getCcdSquareMotionThreshold(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushnumber(L, self->getCcdSquareMotionThreshold());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCcdSquareMotionThreshold: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCcdSquareMotionThreshold: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setCcdMotionThreshold(btScalar ccdMotionThreshold)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:440
 */
static int btCollisionObject_setCcdMotionThreshold(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    btScalar ccdMotionThreshold = dub::checknumber(L, 2);
    self->setCcdMotionThreshold(ccdMotionThreshold);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCcdMotionThreshold: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCcdMotionThreshold: Unknown exception");
  }
  return dub::error(L);
}

/** void* btCollisionObject::getUserPointer() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:446
 */
static int btCollisionObject_getUserPointer(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    self->getUserPointer();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getUserPointer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getUserPointer: Unknown exception");
  }
  return dub::error(L);
}

/** int btCollisionObject::getUserIndex() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:451
 */
static int btCollisionObject_getUserIndex(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushnumber(L, self->getUserIndex());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getUserIndex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getUserIndex: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setUserPointer(void *userPointer)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:456
 */
static int btCollisionObject_setUserPointer(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    void *userPointer = *((void **)dub::checksdata(L, 2, "void"));
    self->setUserPointer(userPointer);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUserPointer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUserPointer: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setUserIndex(int index)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:462
 */
static int btCollisionObject_setUserIndex(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    int index = dub::checkint(L, 2);
    self->setUserIndex(index);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUserIndex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUserIndex: Unknown exception");
  }
  return dub::error(L);
}

/** int btCollisionObject::getUpdateRevisionInternal() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:467
 */
static int btCollisionObject_getUpdateRevisionInternal(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushnumber(L, self->getUpdateRevisionInternal());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getUpdateRevisionInternal: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getUpdateRevisionInternal: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionObject::checkCollideWith(const btCollisionObject *co) const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:473
 */
static int btCollisionObject_checkCollideWith(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    btCollisionObject *co = *((btCollisionObject **)dub::checksdata(L, 2, "bt.CollisionObject"));
    lua_pushboolean(L, self->checkCollideWith(co));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "checkCollideWith: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "checkCollideWith: Unknown exception");
  }
  return dub::error(L);
}

/** int btCollisionObject::calculateSerializeBufferSize() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:481
 */
static int btCollisionObject_calculateSerializeBufferSize(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    lua_pushnumber(L, self->calculateSerializeBufferSize());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "calculateSerializeBufferSize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "calculateSerializeBufferSize: Unknown exception");
  }
  return dub::error(L);
}

/** virtual const char* btCollisionObject::serialize(void *dataBuffer, class btSerializer *serializer) const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:484
 */
static int btCollisionObject_serialize(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    void *dataBuffer = *((void **)dub::checksdata(L, 2, "void"));
    class btSerializer *serializer = *((class btSerializer **)dub::checksdata(L, 3, "class btSerializer"));
    lua_pushstring(L, self->serialize(dataBuffer, serializer));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "serialize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "serialize: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionObject::serializeSingleObject(class btSerializer *serializer) const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:486
 */
static int btCollisionObject_serializeSingleObject(lua_State *L) {
  try {
    btCollisionObject *self = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    class btSerializer *serializer = *((class btSerializer **)dub::checksdata(L, 2, "class btSerializer"));
    self->serializeSingleObject(serializer);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "serializeSingleObject: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "serializeSingleObject: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int btCollisionObject___tostring(lua_State *L) {
  btCollisionObject *self = *((btCollisionObject **)dub::checksdata_n(L, 1, "bt.CollisionObject"));
  lua_pushfstring(L, "bt.CollisionObject: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg btCollisionObject_member_methods[] = {
  { "mergesSimulationIslands", btCollisionObject_mergesSimulationIslands },
  { "getAnisotropicFriction", btCollisionObject_getAnisotropicFriction },
  { "setAnisotropicFriction", btCollisionObject_setAnisotropicFriction },
  { "hasAnisotropicFriction", btCollisionObject_hasAnisotropicFriction },
  { "setContactProcessingThreshold", btCollisionObject_setContactProcessingThreshold },
  { "getContactProcessingThreshold", btCollisionObject_getContactProcessingThreshold },
  { "isStaticObject", btCollisionObject_isStaticObject },
  { "isKinematicObject", btCollisionObject_isKinematicObject },
  { "isStaticOrKinematicObject", btCollisionObject_isStaticOrKinematicObject },
  { "hasContactResponse", btCollisionObject_hasContactResponse },
  { "new"          , btCollisionObject_btCollisionObject },
  { "__gc"         , btCollisionObject__btCollisionObject },
  { "setCollisionShape", btCollisionObject_setCollisionShape },
  { "getCollisionShape", btCollisionObject_getCollisionShape },
  { "internalGetExtensionPointer", btCollisionObject_internalGetExtensionPointer },
  { "internalSetExtensionPointer", btCollisionObject_internalSetExtensionPointer },
  { "getActivationState", btCollisionObject_getActivationState },
  { "setActivationState", btCollisionObject_setActivationState },
  { "setDeactivationTime", btCollisionObject_setDeactivationTime },
  { "getDeactivationTime", btCollisionObject_getDeactivationTime },
  { "forceActivationState", btCollisionObject_forceActivationState },
  { "activate"     , btCollisionObject_activate },
  { "isActive"     , btCollisionObject_isActive },
  { "setRestitution", btCollisionObject_setRestitution },
  { "getRestitution", btCollisionObject_getRestitution },
  { "setFriction"  , btCollisionObject_setFriction },
  { "getFriction"  , btCollisionObject_getFriction },
  { "setRollingFriction", btCollisionObject_setRollingFriction },
  { "getRollingFriction", btCollisionObject_getRollingFriction },
  { "getInternalType", btCollisionObject_getInternalType },
  { "getWorldTransform", btCollisionObject_getWorldTransform },
  { "setWorldTransform", btCollisionObject_setWorldTransform },
  { "getBroadphaseHandle", btCollisionObject_getBroadphaseHandle },
  { "setBroadphaseHandle", btCollisionObject_setBroadphaseHandle },
  { "getInterpolationWorldTransform", btCollisionObject_getInterpolationWorldTransform },
  { "setInterpolationWorldTransform", btCollisionObject_setInterpolationWorldTransform },
  { "setInterpolationLinearVelocity", btCollisionObject_setInterpolationLinearVelocity },
  { "setInterpolationAngularVelocity", btCollisionObject_setInterpolationAngularVelocity },
  { "getInterpolationLinearVelocity", btCollisionObject_getInterpolationLinearVelocity },
  { "getInterpolationAngularVelocity", btCollisionObject_getInterpolationAngularVelocity },
  { "getIslandTag" , btCollisionObject_getIslandTag },
  { "setIslandTag" , btCollisionObject_setIslandTag },
  { "getCompanionId", btCollisionObject_getCompanionId },
  { "setCompanionId", btCollisionObject_setCompanionId },
  { "getHitFraction", btCollisionObject_getHitFraction },
  { "setHitFraction", btCollisionObject_setHitFraction },
  { "getCollisionFlags", btCollisionObject_getCollisionFlags },
  { "setCollisionFlags", btCollisionObject_setCollisionFlags },
  { "getCcdSweptSphereRadius", btCollisionObject_getCcdSweptSphereRadius },
  { "setCcdSweptSphereRadius", btCollisionObject_setCcdSweptSphereRadius },
  { "getCcdMotionThreshold", btCollisionObject_getCcdMotionThreshold },
  { "getCcdSquareMotionThreshold", btCollisionObject_getCcdSquareMotionThreshold },
  { "setCcdMotionThreshold", btCollisionObject_setCcdMotionThreshold },
  { "getUserPointer", btCollisionObject_getUserPointer },
  { "getUserIndex" , btCollisionObject_getUserIndex },
  { "setUserPointer", btCollisionObject_setUserPointer },
  { "setUserIndex" , btCollisionObject_setUserIndex },
  { "getUpdateRevisionInternal", btCollisionObject_getUpdateRevisionInternal },
  { "checkCollideWith", btCollisionObject_checkCollideWith },
  { "calculateSerializeBufferSize", btCollisionObject_calculateSerializeBufferSize },
  { "serialize"    , btCollisionObject_serialize },
  { "serializeSingleObject", btCollisionObject_serializeSingleObject },
  { "__tostring"   , btCollisionObject___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};

// --=============================================== CONSTANTS
static const struct dub::const_Reg btCollisionObject_const[] = {
  { "CF_STATIC_OBJECT", btCollisionObject::CF_STATIC_OBJECT },
  { "CF_KINEMATIC_OBJECT", btCollisionObject::CF_KINEMATIC_OBJECT },
  { "CF_NO_CONTACT_RESPONSE", btCollisionObject::CF_NO_CONTACT_RESPONSE },
  { "CF_CUSTOM_MATERIAL_CALLBACK", btCollisionObject::CF_CUSTOM_MATERIAL_CALLBACK },
  { "CF_CHARACTER_OBJECT", btCollisionObject::CF_CHARACTER_OBJECT },
  { "CF_DISABLE_VISUALIZE_OBJECT", btCollisionObject::CF_DISABLE_VISUALIZE_OBJECT },
  { "CF_DISABLE_SPU_COLLISION_PROCESSING", btCollisionObject::CF_DISABLE_SPU_COLLISION_PROCESSING },
  { "CO_COLLISION_OBJECT", btCollisionObject::CO_COLLISION_OBJECT },
  { "CO_RIGID_BODY", btCollisionObject::CO_RIGID_BODY },
  { "CO_GHOST_OBJECT", btCollisionObject::CO_GHOST_OBJECT },
  { "CO_SOFT_BODY" , btCollisionObject::CO_SOFT_BODY },
  { "CO_HF_FLUID"  , btCollisionObject::CO_HF_FLUID },
  { "CO_USER_TYPE" , btCollisionObject::CO_USER_TYPE },
  { "CO_FEATHERSTONE_LINK", btCollisionObject::CO_FEATHERSTONE_LINK },
  { "CF_ANISOTROPIC_FRICTION_DISABLED", btCollisionObject::CF_ANISOTROPIC_FRICTION_DISABLED },
  { "CF_ANISOTROPIC_FRICTION", btCollisionObject::CF_ANISOTROPIC_FRICTION },
  { "CF_ANISOTROPIC_ROLLING_FRICTION", btCollisionObject::CF_ANISOTROPIC_ROLLING_FRICTION },
  { NULL, 0},
};

extern "C" int luaopen_bt_CollisionObject(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.CollisionObject");
  // <mt>
  // register class constants
  dub::register_const(L, btCollisionObject_const);

  // register member methods
  dub::fregister(L, btCollisionObject_member_methods);
  // setup meta-table
  dub::setup(L, "bt.CollisionObject");
  // <mt>
  return 1;
}
