/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class btTransform
 *
 * This file has been generated by dub 2.2.1.
 */
#include "dub/dub.h"
#include "LinearMath/btTransform.h"


/** ~btTransform()
 * 
 */
static int btTransform__btTransform(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "bt.Transform"));
    if (userdata->gc) {
      btTransform *self = (btTransform *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** LuaStackSize btTransform::toM4(void)
 * bind/btTransform.h:7
 */
static int btTransform_toM4(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    btScalar m[16];
    self->getOpenGLMatrix(m);
    // A pointer to a 15 element array (12 rotation(row major padded on the right by 1), and 3 translation
    lua_newtable(L);
    for(size_t i = 0; i < 16; ++i) {
      lua_pushnumber(L, m[i]);
      lua_rawseti(L, -2, i+1);
    }
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "toM4: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "toM4: Unknown exception");
  }
  return dub::error(L);
}

/** btTransform::btTransform()
 * src/vendor/bullet/src/LinearMath/btTransform.h:44
 */
static int btTransform_btTransform(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      int type__ = lua_type(L, 1);
      void **ptr1__;
      if ( (ptr1__ = dub::issdata(L, 1, "bt.Matrix3x3", type__)) ) {
        btMatrix3x3 *b = *((btMatrix3x3 **)ptr1__);
        btVector3 *c = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
        btTransform *retval__ = new btTransform(*b, *c);
        dub::pushudata(L, retval__, "bt.Transform", true);
        return 1;
      } else {
        btQuaternion *q = *((btQuaternion **)dub::checksdata(L, 1, "bt.Quaternion"));
        btVector3 *c = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
        btTransform *retval__ = new btTransform(*q, *c);
        dub::pushudata(L, retval__, "bt.Transform", true);
        return 1;
      }
    } else if (top__ >= 1) {
      int type__ = lua_type(L, 1);
      void **ptr1__;
      if ( (ptr1__ = dub::issdata(L, 1, "bt.Quaternion", type__)) ) {
        btQuaternion *q = *((btQuaternion **)ptr1__);
        btTransform *retval__ = new btTransform(*q);
        dub::pushudata(L, retval__, "bt.Transform", true);
        return 1;
      } else if ( (ptr1__ = dub::issdata(L, 1, "bt.Matrix3x3", type__)) ) {
        btMatrix3x3 *b = *((btMatrix3x3 **)ptr1__);
        btTransform *retval__ = new btTransform(*b);
        dub::pushudata(L, retval__, "bt.Transform", true);
        return 1;
      } else {
        btTransform *other = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
        btTransform *retval__ = new btTransform(*other);
        dub::pushudata(L, retval__, "bt.Transform", true);
        return 1;
      }
    } else {
      btTransform *retval__ = new btTransform();
      dub::pushudata(L, retval__, "bt.Transform", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** btTransform& btTransform::operator=(const btTransform &other)
 * src/vendor/bullet/src/LinearMath/btTransform.h:69
 */
static int btTransform_operator_sete(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    btTransform *other = *((btTransform **)dub::checksdata(L, 2, "bt.Transform"));
    dub::pushudata(L, &self->operator=(*other), "bt.Transform", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set: Unknown exception");
  }
  return dub::error(L);
}

/** void btTransform::mult(const btTransform &t1, const btTransform &t2)
 * src/vendor/bullet/src/LinearMath/btTransform.h:81
 */
static int btTransform_mult(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    btTransform *t1 = *((btTransform **)dub::checksdata(L, 2, "bt.Transform"));
    btTransform *t2 = *((btTransform **)dub::checksdata(L, 3, "bt.Transform"));
    self->mult(*t1, *t2);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "mult: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "mult: Unknown exception");
  }
  return dub::error(L);
}

/** btVector3 btTransform::operator()(const btVector3 &x) const
 * src/vendor/bullet/src/LinearMath/btTransform.h:94
 */
static int btTransform_operator_call(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    btVector3 *x = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    dub::pushudata(L, new btVector3(self->operator()(*x)), "bt.Vector3", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__call: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__call: Unknown exception");
  }
  return dub::error(L);
}

/** btVector3 btTransform::operator*(const btVector3 &x) const
 * src/vendor/bullet/src/LinearMath/btTransform.h:100
 */
static int btTransform_operator_mul(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    int type__ = lua_type(L, 2);
    void **ptr2__;
    if ( (ptr2__ = dub::issdata(L, 2, "bt.Vector3", type__)) ) {
      btVector3 *x = *((btVector3 **)ptr2__);
      dub::pushudata(L, new btVector3(self->operator*(*x)), "bt.Vector3", true);
      return 1;
    } else if ( (ptr2__ = dub::issdata(L, 2, "bt.Quaternion", type__)) ) {
      btQuaternion *q = *((btQuaternion **)ptr2__);
      dub::pushudata(L, new btQuaternion(self->operator*(*q)), "bt.Quaternion", true);
      return 1;
    } else {
      btTransform *t = *((btTransform **)dub::checksdata(L, 2, "bt.Transform"));
      dub::pushudata(L, new btTransform(self->operator*(*t)), "bt.Transform", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "__mul: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__mul: Unknown exception");
  }
  return dub::error(L);
}

/** btMatrix3x3& btTransform::getBasis()
 * src/vendor/bullet/src/LinearMath/btTransform.h:112
 */
static int btTransform_getBasis(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    dub::pushudata(L, &self->getBasis(), "bt.Matrix3x3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getBasis: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getBasis: Unknown exception");
  }
  return dub::error(L);
}

/** btVector3& btTransform::getOrigin()
 * src/vendor/bullet/src/LinearMath/btTransform.h:117
 */
static int btTransform_getOrigin(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    dub::pushudata(L, &self->getOrigin(), "bt.Vector3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getOrigin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getOrigin: Unknown exception");
  }
  return dub::error(L);
}

/** btQuaternion btTransform::getRotation() const
 * src/vendor/bullet/src/LinearMath/btTransform.h:122
 */
static int btTransform_getRotation(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    dub::pushudata(L, new btQuaternion(self->getRotation()), "bt.Quaternion", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRotation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRotation: Unknown exception");
  }
  return dub::error(L);
}

/** void btTransform::setFromOpenGLMatrix(const btScalar *m)
 * src/vendor/bullet/src/LinearMath/btTransform.h:131
 */
static int btTransform_setFromOpenGLMatrix(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    btScalar *m = *((btScalar **)dub::checksdata(L, 2, "Scalar"));
    self->setFromOpenGLMatrix(m);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFromOpenGLMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFromOpenGLMatrix: Unknown exception");
  }
  return dub::error(L);
}

/** void btTransform::getOpenGLMatrix(btScalar *m) const
 * src/vendor/bullet/src/LinearMath/btTransform.h:139
 */
static int btTransform_getOpenGLMatrix(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    btScalar *m = *((btScalar **)dub::checksdata(L, 2, "Scalar"));
    self->getOpenGLMatrix(m);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getOpenGLMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getOpenGLMatrix: Unknown exception");
  }
  return dub::error(L);
}

/** void btTransform::setOrigin(const btVector3 &origin)
 * src/vendor/bullet/src/LinearMath/btTransform.h:150
 */
static int btTransform_setOrigin(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    btVector3 *origin = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->setOrigin(*origin);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setOrigin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setOrigin: Unknown exception");
  }
  return dub::error(L);
}

/** btVector3 btTransform::invXform(const btVector3 &inVec) const
 * src/vendor/bullet/src/LinearMath/btTransform.h:155
 */
static int btTransform_invXform(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    btVector3 *inVec = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    dub::pushudata(L, new btVector3(self->invXform(*inVec)), "bt.Vector3", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "invXform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "invXform: Unknown exception");
  }
  return dub::error(L);
}

/** void btTransform::setBasis(const btMatrix3x3 &basis)
 * src/vendor/bullet/src/LinearMath/btTransform.h:159
 */
static int btTransform_setBasis(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    btMatrix3x3 *basis = *((btMatrix3x3 **)dub::checksdata(L, 2, "bt.Matrix3x3"));
    self->setBasis(*basis);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setBasis: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setBasis: Unknown exception");
  }
  return dub::error(L);
}

/** void btTransform::setRotation(const btQuaternion &q)
 * src/vendor/bullet/src/LinearMath/btTransform.h:165
 */
static int btTransform_setRotation(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    btQuaternion *q = *((btQuaternion **)dub::checksdata(L, 2, "bt.Quaternion"));
    self->setRotation(*q);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setRotation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setRotation: Unknown exception");
  }
  return dub::error(L);
}

/** void btTransform::setIdentity()
 * src/vendor/bullet/src/LinearMath/btTransform.h:172
 */
static int btTransform_setIdentity(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    self->setIdentity();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setIdentity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setIdentity: Unknown exception");
  }
  return dub::error(L);
}

/** btTransform& btTransform::operator*=(const btTransform &t)
 * src/vendor/bullet/src/LinearMath/btTransform.h:180
 */
static int btTransform_operator_mule(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    btTransform *t = *((btTransform **)dub::checksdata(L, 2, "bt.Transform"));
    dub::pushudata(L, &self->operator*=(*t), "bt.Transform", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "mul: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "mul: Unknown exception");
  }
  return dub::error(L);
}

/** btTransform btTransform::inverse() const
 * src/vendor/bullet/src/LinearMath/btTransform.h:188
 */
static int btTransform_inverse(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    dub::pushudata(L, new btTransform(self->inverse()), "bt.Transform", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "inverse: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "inverse: Unknown exception");
  }
  return dub::error(L);
}

/** btTransform btTransform::inverseTimes(const btTransform &t) const
 * src/vendor/bullet/src/LinearMath/btTransform.h:197
 */
static int btTransform_inverseTimes(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    btTransform *t = *((btTransform **)dub::checksdata(L, 2, "bt.Transform"));
    dub::pushudata(L, new btTransform(self->inverseTimes(*t)), "bt.Transform", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "inverseTimes: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "inverseTimes: Unknown exception");
  }
  return dub::error(L);
}

/** void btTransform::serialize(struct btTransformData &dataOut) const
 * src/vendor/bullet/src/LinearMath/btTransform.h:209
 */
static int btTransform_serialize(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    btTransformData *dataOut = *((btTransformData **)dub::checksdata(L, 2, "TransformData"));
    self->serialize(*dataOut);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "serialize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "serialize: Unknown exception");
  }
  return dub::error(L);
}

/** void btTransform::serializeFloat(struct btTransformFloatData &dataOut) const
 * src/vendor/bullet/src/LinearMath/btTransform.h:211
 */
static int btTransform_serializeFloat(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    btTransformFloatData *dataOut = *((btTransformFloatData **)dub::checksdata(L, 2, "bt.TransformFloatData"));
    self->serializeFloat(*dataOut);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "serializeFloat: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "serializeFloat: Unknown exception");
  }
  return dub::error(L);
}

/** void btTransform::deSerialize(const struct btTransformData &dataIn)
 * src/vendor/bullet/src/LinearMath/btTransform.h:213
 */
static int btTransform_deSerialize(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    btTransformData *dataIn = *((btTransformData **)dub::checksdata(L, 2, "TransformData"));
    self->deSerialize(*dataIn);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "deSerialize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "deSerialize: Unknown exception");
  }
  return dub::error(L);
}

/** void btTransform::deSerializeDouble(const struct btTransformDoubleData &dataIn)
 * src/vendor/bullet/src/LinearMath/btTransform.h:215
 */
static int btTransform_deSerializeDouble(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    btTransformDoubleData *dataIn = *((btTransformDoubleData **)dub::checksdata(L, 2, "bt.TransformDoubleData"));
    self->deSerializeDouble(*dataIn);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "deSerializeDouble: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "deSerializeDouble: Unknown exception");
  }
  return dub::error(L);
}

/** void btTransform::deSerializeFloat(const struct btTransformFloatData &dataIn)
 * src/vendor/bullet/src/LinearMath/btTransform.h:217
 */
static int btTransform_deSerializeFloat(lua_State *L) {
  try {
    btTransform *self = *((btTransform **)dub::checksdata(L, 1, "bt.Transform"));
    btTransformFloatData *dataIn = *((btTransformFloatData **)dub::checksdata(L, 2, "bt.TransformFloatData"));
    self->deSerializeFloat(*dataIn);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "deSerializeFloat: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "deSerializeFloat: Unknown exception");
  }
  return dub::error(L);
}

/** static const btTransform& btTransform::getIdentity()
 * src/vendor/bullet/src/LinearMath/btTransform.h:203
 */
static int btTransform_getIdentity(lua_State *L) {
  try {
    dub::pushudata(L, const_cast<btTransform*>(&btTransform::getIdentity()), "bt.Transform", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getIdentity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getIdentity: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int btTransform___tostring(lua_State *L) {
  btTransform *self = *((btTransform **)dub::checksdata_n(L, 1, "bt.Transform"));
  lua_pushfstring(L, "bt.Transform: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg btTransform_member_methods[] = {
  { "__gc"         , btTransform__btTransform },
  { "toM4"         , btTransform_toM4     },
  { "new"          , btTransform_btTransform },
  { "set"          , btTransform_operator_sete },
  { "mult"         , btTransform_mult     },
  { "__call"       , btTransform_operator_call },
  { "__mul"        , btTransform_operator_mul },
  { "getBasis"     , btTransform_getBasis },
  { "getOrigin"    , btTransform_getOrigin },
  { "getRotation"  , btTransform_getRotation },
  { "setFromOpenGLMatrix", btTransform_setFromOpenGLMatrix },
  { "getOpenGLMatrix", btTransform_getOpenGLMatrix },
  { "setOrigin"    , btTransform_setOrigin },
  { "invXform"     , btTransform_invXform },
  { "setBasis"     , btTransform_setBasis },
  { "setRotation"  , btTransform_setRotation },
  { "setIdentity"  , btTransform_setIdentity },
  { "mul"          , btTransform_operator_mule },
  { "inverse"      , btTransform_inverse  },
  { "inverseTimes" , btTransform_inverseTimes },
  { "serialize"    , btTransform_serialize },
  { "serializeFloat", btTransform_serializeFloat },
  { "deSerialize"  , btTransform_deSerialize },
  { "deSerializeDouble", btTransform_deSerializeDouble },
  { "deSerializeFloat", btTransform_deSerializeFloat },
  { "getIdentity"  , btTransform_getIdentity },
  { "__tostring"   , btTransform___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_bt_Transform(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.Transform");
  // <mt>

  // register member methods
  dub::fregister(L, btTransform_member_methods);
  // setup meta-table
  dub::setup(L, "bt.Transform");
  // <mt>
  return 1;
}
