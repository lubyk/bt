/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class btTypedConstraint
 *
 * This file has been generated by dub 2.2.1.
 */
#include "dub/dub.h"
#include "BulletDynamics/ConstraintSolver/btTypedConstraint.h"


/** ~btTypedConstraint()
 * 
 */
static int btTypedConstraint__btTypedConstraint(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "bt.TypedConstraint"));
    if (userdata->gc) {
      btTypedConstraint *self = (btTypedConstraint *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int btTypedConstraint___tostring(lua_State *L) {
  btTypedConstraint *self = *((btTypedConstraint **)dub::checksdata_n(L, 1, "bt.TypedConstraint"));
  lua_pushfstring(L, "bt.TypedConstraint: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg btTypedConstraint_member_methods[] = {
  { "__gc"         , btTypedConstraint__btTypedConstraint },
  { "__tostring"   , btTypedConstraint___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_bt_TypedConstraint(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.TypedConstraint");
  // <mt>

  // register member methods
  dub::fregister(L, btTypedConstraint_member_methods);
  // setup meta-table
  dub::setup(L, "bt.TypedConstraint");
  // <mt>
  return 1;
}
