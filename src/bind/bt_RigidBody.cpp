/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class btRigidBody
 *
 * This file has been generated by dub 2.2.1.
 */
#include "dub/dub.h"
#include "BulletDynamics/Dynamics/btRigidBody.h"


/** Set attributes (key, value)
 * 
 */
static int btRigidBody__set_(lua_State *L) {

  btRigidBody *self = *((btRigidBody **)dub::checksdata_n(L, 1, "bt.RigidBody"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub::hash(key, 3);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "m_contactSolverType")) break;
      self->m_contactSolverType = luaL_checkint(L, 3);
      return 0;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "m_frictionSolverType")) break;
      self->m_frictionSolverType = luaL_checkint(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int btRigidBody__get_(lua_State *L) {

  btRigidBody *self = *((btRigidBody **)dub::checksdata_n(L, 1, "bt.RigidBody", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub::hash(key, 3);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "m_contactSolverType")) break;
      lua_pushnumber(L, self->m_contactSolverType);
      return 1;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "m_frictionSolverType")) break;
      lua_pushnumber(L, self->m_frictionSolverType);
      return 1;
    }
  }
  return 0;
}

/** Cast (class_name)
 * 
 */
static int btRigidBody__cast_(lua_State *L) {

  btRigidBody *self = *((btRigidBody **)dub::checksdata_n(L, 1, "bt.RigidBody"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "bt.CollisionObject")) break;
      *retval__ = static_cast<btCollisionObject *>(self);
      return 1;
    }
  }
  return 0;
}

/** btRigidBody::btRigidBody(const btRigidBodyConstructionInfo &constructionInfo)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:172
 */
static int btRigidBody_btRigidBody(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      btScalar mass = dub::checknumber(L, 1);
      btMotionState *motionState = *((btMotionState **)dub::checksdata(L, 2, "bt.MotionState"));
      btCollisionShape *collisionShape = *((btCollisionShape **)dub::checksdata(L, 3, "bt.CollisionShape"));
      btVector3 *localInertia = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      btRigidBody *retval__ = new btRigidBody(mass, motionState, collisionShape, *localInertia);
      dub::pushudata(L, retval__, "bt.RigidBody", true);
      return 1;
    } else if (top__ >= 3) {
      btScalar mass = dub::checknumber(L, 1);
      btMotionState *motionState = *((btMotionState **)dub::checksdata(L, 2, "bt.MotionState"));
      btCollisionShape *collisionShape = *((btCollisionShape **)dub::checksdata(L, 3, "bt.CollisionShape"));
      btRigidBody *retval__ = new btRigidBody(mass, motionState, collisionShape);
      dub::pushudata(L, retval__, "bt.RigidBody", true);
      return 1;
    } else {
      btRigidBody::btRigidBodyConstructionInfo *constructionInfo = *((btRigidBody::btRigidBodyConstructionInfo **)dub::checksdata(L, 1, "bt.RigidBody.RigidBodyConstructionInfo"));
      btRigidBody *retval__ = new btRigidBody(*constructionInfo);
      dub::pushudata(L, retval__, "bt.RigidBody", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btRigidBody::~btRigidBody()
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:179
 */
static int btRigidBody__btRigidBody(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "bt.RigidBody"));
    if (userdata->gc) {
      btRigidBody *self = (btRigidBody *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::proceedToTransform(const btTransform &newTrans)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:193
 */
static int btRigidBody_proceedToTransform(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btTransform *newTrans = *((btTransform **)dub::checksdata(L, 2, "bt.Transform"));
    self->proceedToTransform(*newTrans);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "proceedToTransform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "proceedToTransform: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::predictIntegratedTransform(btScalar step, btTransform &predictedTransform)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:211
 */
static int btRigidBody_predictIntegratedTransform(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btScalar step = dub::checknumber(L, 2);
    btTransform *predictedTransform = *((btTransform **)dub::checksdata(L, 3, "bt.Transform"));
    self->predictIntegratedTransform(step, *predictedTransform);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "predictIntegratedTransform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "predictIntegratedTransform: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::saveKinematicState(btScalar step)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:213
 */
static int btRigidBody_saveKinematicState(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btScalar step = dub::checknumber(L, 2);
    self->saveKinematicState(step);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "saveKinematicState: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "saveKinematicState: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::applyGravity()
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:215
 */
static int btRigidBody_applyGravity(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    self->applyGravity();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "applyGravity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "applyGravity: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::setGravity(const btVector3 &acceleration)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:217
 */
static int btRigidBody_setGravity(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btVector3 *acceleration = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->setGravity(*acceleration);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setGravity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setGravity: Unknown exception");
  }
  return dub::error(L);
}

/** const btVector3& btRigidBody::getGravity() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:219
 */
static int btRigidBody_getGravity(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    dub::pushudata(L, const_cast<btVector3*>(&self->getGravity()), "bt.Vector3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getGravity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getGravity: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::setDamping(btScalar lin_damping, btScalar ang_damping)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:224
 */
static int btRigidBody_setDamping(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btScalar lin_damping = dub::checknumber(L, 2);
    btScalar ang_damping = dub::checknumber(L, 3);
    self->setDamping(lin_damping, ang_damping);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setDamping: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setDamping: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btRigidBody::getLinearDamping() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:226
 */
static int btRigidBody_getLinearDamping(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getLinearDamping());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLinearDamping: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLinearDamping: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btRigidBody::getAngularDamping() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:231
 */
static int btRigidBody_getAngularDamping(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getAngularDamping());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAngularDamping: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAngularDamping: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btRigidBody::getLinearSleepingThreshold() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:236
 */
static int btRigidBody_getLinearSleepingThreshold(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getLinearSleepingThreshold());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLinearSleepingThreshold: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLinearSleepingThreshold: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btRigidBody::getAngularSleepingThreshold() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:241
 */
static int btRigidBody_getAngularSleepingThreshold(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getAngularSleepingThreshold());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAngularSleepingThreshold: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAngularSleepingThreshold: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::applyDamping(btScalar timeStep)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:246
 */
static int btRigidBody_applyDamping(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btScalar timeStep = dub::checknumber(L, 2);
    self->applyDamping(timeStep);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "applyDamping: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "applyDamping: Unknown exception");
  }
  return dub::error(L);
}

/** const btCollisionShape* btRigidBody::getCollisionShape() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:248
 */
static int btRigidBody_getCollisionShape(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    const btCollisionShape *retval__ = self->getCollisionShape();
    if (!retval__) return 0;
    dub::pushudata(L, const_cast<btCollisionShape*>(retval__), "bt.CollisionShape", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCollisionShape: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCollisionShape: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::setMassProps(btScalar mass, const btVector3 &inertia)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:256
 */
static int btRigidBody_setMassProps(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btScalar mass = dub::checknumber(L, 2);
    btVector3 *inertia = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    self->setMassProps(mass, *inertia);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setMassProps: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setMassProps: Unknown exception");
  }
  return dub::error(L);
}

/** const btVector3& btRigidBody::getLinearFactor() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:258
 */
static int btRigidBody_getLinearFactor(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    dub::pushudata(L, const_cast<btVector3*>(&self->getLinearFactor()), "bt.Vector3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLinearFactor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLinearFactor: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::setLinearFactor(const btVector3 &linearFactor)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:262
 */
static int btRigidBody_setLinearFactor(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btVector3 *linearFactor = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->setLinearFactor(*linearFactor);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setLinearFactor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setLinearFactor: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btRigidBody::getInvMass() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:267
 */
static int btRigidBody_getInvMass(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getInvMass());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getInvMass: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getInvMass: Unknown exception");
  }
  return dub::error(L);
}

/** const btMatrix3x3& btRigidBody::getInvInertiaTensorWorld() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:268
 */
static int btRigidBody_getInvInertiaTensorWorld(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    dub::pushudata(L, const_cast<btMatrix3x3*>(&self->getInvInertiaTensorWorld()), "bt.Matrix3x3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getInvInertiaTensorWorld: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getInvInertiaTensorWorld: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::integrateVelocities(btScalar step)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:272
 */
static int btRigidBody_integrateVelocities(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btScalar step = dub::checknumber(L, 2);
    self->integrateVelocities(step);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "integrateVelocities: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "integrateVelocities: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::setCenterOfMassTransform(const btTransform &xform)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:274
 */
static int btRigidBody_setCenterOfMassTransform(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btTransform *xform = *((btTransform **)dub::checksdata(L, 2, "bt.Transform"));
    self->setCenterOfMassTransform(*xform);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCenterOfMassTransform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCenterOfMassTransform: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::applyCentralForce(const btVector3 &force)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:276
 */
static int btRigidBody_applyCentralForce(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btVector3 *force = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->applyCentralForce(*force);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "applyCentralForce: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "applyCentralForce: Unknown exception");
  }
  return dub::error(L);
}

/** const btVector3& btRigidBody::getTotalForce() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:281
 */
static int btRigidBody_getTotalForce(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    dub::pushudata(L, const_cast<btVector3*>(&self->getTotalForce()), "bt.Vector3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getTotalForce: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getTotalForce: Unknown exception");
  }
  return dub::error(L);
}

/** const btVector3& btRigidBody::getTotalTorque() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:286
 */
static int btRigidBody_getTotalTorque(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    dub::pushudata(L, const_cast<btVector3*>(&self->getTotalTorque()), "bt.Vector3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getTotalTorque: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getTotalTorque: Unknown exception");
  }
  return dub::error(L);
}

/** const btVector3& btRigidBody::getInvInertiaDiagLocal() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:291
 */
static int btRigidBody_getInvInertiaDiagLocal(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    dub::pushudata(L, const_cast<btVector3*>(&self->getInvInertiaDiagLocal()), "bt.Vector3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getInvInertiaDiagLocal: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getInvInertiaDiagLocal: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::setInvInertiaDiagLocal(const btVector3 &diagInvInertia)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:296
 */
static int btRigidBody_setInvInertiaDiagLocal(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btVector3 *diagInvInertia = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->setInvInertiaDiagLocal(*diagInvInertia);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setInvInertiaDiagLocal: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setInvInertiaDiagLocal: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::setSleepingThresholds(btScalar linear, btScalar angular)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:301
 */
static int btRigidBody_setSleepingThresholds(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btScalar linear = dub::checknumber(L, 2);
    btScalar angular = dub::checknumber(L, 3);
    self->setSleepingThresholds(linear, angular);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setSleepingThresholds: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setSleepingThresholds: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::applyTorque(const btVector3 &torque)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:307
 */
static int btRigidBody_applyTorque(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btVector3 *torque = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->applyTorque(*torque);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "applyTorque: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "applyTorque: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::applyForce(const btVector3 &force, const btVector3 &rel_pos)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:312
 */
static int btRigidBody_applyForce(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btVector3 *force = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    btVector3 *rel_pos = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    self->applyForce(*force, *rel_pos);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "applyForce: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "applyForce: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::applyCentralImpulse(const btVector3 &impulse)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:318
 */
static int btRigidBody_applyCentralImpulse(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btVector3 *impulse = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->applyCentralImpulse(*impulse);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "applyCentralImpulse: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "applyCentralImpulse: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::applyTorqueImpulse(const btVector3 &torque)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:323
 */
static int btRigidBody_applyTorqueImpulse(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btVector3 *torque = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->applyTorqueImpulse(*torque);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "applyTorqueImpulse: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "applyTorqueImpulse: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::applyImpulse(const btVector3 &impulse, const btVector3 &rel_pos)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:328
 */
static int btRigidBody_applyImpulse(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btVector3 *impulse = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    btVector3 *rel_pos = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    self->applyImpulse(*impulse, *rel_pos);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "applyImpulse: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "applyImpulse: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::clearForces()
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:340
 */
static int btRigidBody_clearForces(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    self->clearForces();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clearForces: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clearForces: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::updateInertiaTensor()
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:346
 */
static int btRigidBody_updateInertiaTensor(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    self->updateInertiaTensor();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "updateInertiaTensor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "updateInertiaTensor: Unknown exception");
  }
  return dub::error(L);
}

/** const btVector3& btRigidBody::getCenterOfMassPosition() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:348
 */
static int btRigidBody_getCenterOfMassPosition(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    dub::pushudata(L, const_cast<btVector3*>(&self->getCenterOfMassPosition()), "bt.Vector3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCenterOfMassPosition: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCenterOfMassPosition: Unknown exception");
  }
  return dub::error(L);
}

/** btQuaternion btRigidBody::getOrientation() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:351
 */
static int btRigidBody_getOrientation(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    dub::pushudata(L, new btQuaternion(self->getOrientation()), "bt.Quaternion", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getOrientation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getOrientation: Unknown exception");
  }
  return dub::error(L);
}

/** const btTransform& btRigidBody::getCenterOfMassTransform() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:353
 */
static int btRigidBody_getCenterOfMassTransform(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    dub::pushudata(L, const_cast<btTransform*>(&self->getCenterOfMassTransform()), "bt.Transform", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCenterOfMassTransform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCenterOfMassTransform: Unknown exception");
  }
  return dub::error(L);
}

/** const btVector3& btRigidBody::getLinearVelocity() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:356
 */
static int btRigidBody_getLinearVelocity(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    dub::pushudata(L, const_cast<btVector3*>(&self->getLinearVelocity()), "bt.Vector3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLinearVelocity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLinearVelocity: Unknown exception");
  }
  return dub::error(L);
}

/** const btVector3& btRigidBody::getAngularVelocity() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:359
 */
static int btRigidBody_getAngularVelocity(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    dub::pushudata(L, const_cast<btVector3*>(&self->getAngularVelocity()), "bt.Vector3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAngularVelocity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAngularVelocity: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::setLinearVelocity(const btVector3 &lin_vel)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:364
 */
static int btRigidBody_setLinearVelocity(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btVector3 *lin_vel = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->setLinearVelocity(*lin_vel);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setLinearVelocity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setLinearVelocity: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::setAngularVelocity(const btVector3 &ang_vel)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:370
 */
static int btRigidBody_setAngularVelocity(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btVector3 *ang_vel = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->setAngularVelocity(*ang_vel);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAngularVelocity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAngularVelocity: Unknown exception");
  }
  return dub::error(L);
}

/** btVector3 btRigidBody::getVelocityInLocalPoint(const btVector3 &rel_pos) const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:376
 */
static int btRigidBody_getVelocityInLocalPoint(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btVector3 *rel_pos = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    dub::pushudata(L, new btVector3(self->getVelocityInLocalPoint(*rel_pos)), "bt.Vector3", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getVelocityInLocalPoint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getVelocityInLocalPoint: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::translate(const btVector3 &v)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:385
 */
static int btRigidBody_translate(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btVector3 *v = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->translate(*v);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "translate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "translate: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::getAabb(btVector3 &aabbMin, btVector3 &aabbMax) const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:391
 */
static int btRigidBody_getAabb(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btVector3 *aabbMin = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    btVector3 *aabbMax = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    self->getAabb(*aabbMin, *aabbMax);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAabb: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAabb: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btRigidBody::computeImpulseDenominator(const btVector3 &pos, const btVector3 &normal) const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:397
 */
static int btRigidBody_computeImpulseDenominator(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btVector3 *pos = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    btVector3 *normal = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    lua_pushnumber(L, self->computeImpulseDenominator(*pos, *normal));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "computeImpulseDenominator: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "computeImpulseDenominator: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btRigidBody::computeAngularImpulseDenominator(const btVector3 &axis) const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:409
 */
static int btRigidBody_computeAngularImpulseDenominator(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btVector3 *axis = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    lua_pushnumber(L, self->computeAngularImpulseDenominator(*axis));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "computeAngularImpulseDenominator: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "computeAngularImpulseDenominator: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::updateDeactivation(btScalar timeStep)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:415
 */
static int btRigidBody_updateDeactivation(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btScalar timeStep = dub::checknumber(L, 2);
    self->updateDeactivation(timeStep);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "updateDeactivation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "updateDeactivation: Unknown exception");
  }
  return dub::error(L);
}

/** bool btRigidBody::wantsSleeping()
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:432
 */
static int btRigidBody_wantsSleeping(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushboolean(L, self->wantsSleeping());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "wantsSleeping: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "wantsSleeping: Unknown exception");
  }
  return dub::error(L);
}

/** const btBroadphaseProxy* btRigidBody::getBroadphaseProxy() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:454
 */
static int btRigidBody_getBroadphaseProxy(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    const btBroadphaseProxy *retval__ = self->getBroadphaseProxy();
    if (!retval__) return 0;
    dub::pushudata(L, const_cast<btBroadphaseProxy*>(retval__), "BroadphaseProxy", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getBroadphaseProxy: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getBroadphaseProxy: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::setNewBroadphaseProxy(btBroadphaseProxy *broadphaseProxy)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:462
 */
static int btRigidBody_setNewBroadphaseProxy(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btBroadphaseProxy *broadphaseProxy = *((btBroadphaseProxy **)dub::checksdata(L, 2, "BroadphaseProxy"));
    self->setNewBroadphaseProxy(broadphaseProxy);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setNewBroadphaseProxy: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setNewBroadphaseProxy: Unknown exception");
  }
  return dub::error(L);
}

/** btMotionState* btRigidBody::getMotionState()
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:468
 */
static int btRigidBody_getMotionState(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btMotionState *retval__ = self->getMotionState();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "bt.MotionState", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getMotionState: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getMotionState: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::setMotionState(btMotionState *motionState)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:476
 */
static int btRigidBody_setMotionState(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btMotionState *motionState = *((btMotionState **)dub::checksdata(L, 2, "bt.MotionState"));
    self->setMotionState(motionState);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setMotionState: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setMotionState: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::setAngularFactor(const btVector3 &angFac)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:487
 */
static int btRigidBody_setAngularFactor(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    int type__ = lua_type(L, 2);
    if (type__ == LUA_TNUMBER) {
      btScalar angFac = dub::checknumber(L, 2);
      self->setAngularFactor(angFac);
      return 0;
    } else {
      btVector3 *angFac = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      self->setAngularFactor(*angFac);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAngularFactor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAngularFactor: Unknown exception");
  }
  return dub::error(L);
}

/** const btVector3& btRigidBody::getAngularFactor() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:498
 */
static int btRigidBody_getAngularFactor(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    dub::pushudata(L, const_cast<btVector3*>(&self->getAngularFactor()), "bt.Vector3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAngularFactor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAngularFactor: Unknown exception");
  }
  return dub::error(L);
}

/** bool btRigidBody::isInWorld() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:504
 */
static int btRigidBody_isInWorld(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushboolean(L, self->isInWorld());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isInWorld: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isInWorld: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::addConstraintRef(btTypedConstraint *c)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:509
 */
static int btRigidBody_addConstraintRef(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btTypedConstraint *c = *((btTypedConstraint **)dub::checksdata(L, 2, "bt.TypedConstraint"));
    self->addConstraintRef(c);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addConstraintRef: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addConstraintRef: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::removeConstraintRef(btTypedConstraint *c)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:510
 */
static int btRigidBody_removeConstraintRef(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btTypedConstraint *c = *((btTypedConstraint **)dub::checksdata(L, 2, "bt.TypedConstraint"));
    self->removeConstraintRef(c);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeConstraintRef: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeConstraintRef: Unknown exception");
  }
  return dub::error(L);
}

/** btTypedConstraint* btRigidBody::getConstraintRef(int index)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:512
 */
static int btRigidBody_getConstraintRef(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    int index = dub::checkint(L, 2);
    btTypedConstraint *retval__ = self->getConstraintRef(index);
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "bt.TypedConstraint", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getConstraintRef: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getConstraintRef: Unknown exception");
  }
  return dub::error(L);
}

/** int btRigidBody::getNumConstraintRefs() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:517
 */
static int btRigidBody_getNumConstraintRefs(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getNumConstraintRefs());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNumConstraintRefs: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNumConstraintRefs: Unknown exception");
  }
  return dub::error(L);
}

/** void btRigidBody::setFlags(int flags)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:522
 */
static int btRigidBody_setFlags(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    int flags = dub::checkint(L, 2);
    self->setFlags(flags);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFlags: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFlags: Unknown exception");
  }
  return dub::error(L);
}

/** int btRigidBody::getFlags() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:527
 */
static int btRigidBody_getFlags(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getFlags());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getFlags: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getFlags: Unknown exception");
  }
  return dub::error(L);
}

/** btVector3 btRigidBody::computeGyroscopicForce(btScalar maxGyroscopicForce) const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:532
 */
static int btRigidBody_computeGyroscopicForce(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btScalar maxGyroscopicForce = dub::checknumber(L, 2);
    dub::pushudata(L, new btVector3(self->computeGyroscopicForce(maxGyroscopicForce)), "bt.Vector3", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "computeGyroscopicForce: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "computeGyroscopicForce: Unknown exception");
  }
  return dub::error(L);
}

/** virtual int btRigidBody::calculateSerializeBufferSize() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:536
 */
static int btRigidBody_calculateSerializeBufferSize(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->calculateSerializeBufferSize());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "calculateSerializeBufferSize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "calculateSerializeBufferSize: Unknown exception");
  }
  return dub::error(L);
}

/** virtual const char* btRigidBody::serialize(void *dataBuffer, class btSerializer *serializer) const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:539
 */
static int btRigidBody_serialize(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    void *dataBuffer = *((void **)dub::checksdata(L, 2, "void"));
    class btSerializer *serializer = *((class btSerializer **)dub::checksdata(L, 3, "class btSerializer"));
    lua_pushstring(L, self->serialize(dataBuffer, serializer));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "serialize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "serialize: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btRigidBody::serializeSingleObject(class btSerializer *serializer) const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:541
 */
static int btRigidBody_serializeSingleObject(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    class btSerializer *serializer = *((class btSerializer **)dub::checksdata(L, 2, "class btSerializer"));
    self->serializeSingleObject(serializer);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "serializeSingleObject: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "serializeSingleObject: Unknown exception");
  }
  return dub::error(L);
}

/** static const btRigidBody* btRigidBody::upcast(const btCollisionObject *colObj)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:197
 */
static int btRigidBody_upcast(lua_State *L) {
  try {
    btCollisionObject *colObj = *((btCollisionObject **)dub::checksdata(L, 1, "bt.CollisionObject"));
    const btRigidBody *retval__ = btRigidBody::upcast(colObj);
    if (!retval__) return 0;
    dub::pushudata(L, const_cast<btRigidBody*>(retval__), "bt.RigidBody", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "upcast: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "upcast: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionObject::mergesSimulationIslands() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:153
 */
static int btRigidBody_mergesSimulationIslands(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushboolean(L, self->mergesSimulationIslands());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "mergesSimulationIslands: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "mergesSimulationIslands: Unknown exception");
  }
  return dub::error(L);
}

/** const btVector3& btCollisionObject::getAnisotropicFriction() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:159
 */
static int btRigidBody_getAnisotropicFriction(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    dub::pushudata(L, const_cast<btVector3*>(&self->getAnisotropicFriction()), "bt.Vector3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAnisotropicFriction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAnisotropicFriction: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setAnisotropicFriction(const btVector3 &anisotropicFriction, int frictionMode=CF_ANISOTROPIC_FRICTION)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:163
 */
static int btRigidBody_setAnisotropicFriction(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      btVector3 *anisotropicFriction = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      int frictionMode = dub::checkint(L, 3);
      self->setAnisotropicFriction(*anisotropicFriction, frictionMode);
      return 0;
    } else {
      btVector3 *anisotropicFriction = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      self->setAnisotropicFriction(*anisotropicFriction);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAnisotropicFriction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAnisotropicFriction: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionObject::hasAnisotropicFriction(int frictionMode=CF_ANISOTROPIC_FRICTION) const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:169
 */
static int btRigidBody_hasAnisotropicFriction(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      int frictionMode = dub::checkint(L, 2);
      lua_pushboolean(L, self->hasAnisotropicFriction(frictionMode));
      return 1;
    } else {
      lua_pushboolean(L, self->hasAnisotropicFriction());
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "hasAnisotropicFriction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "hasAnisotropicFriction: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setContactProcessingThreshold(btScalar contactProcessingThreshold)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:176
 */
static int btRigidBody_setContactProcessingThreshold(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btScalar contactProcessingThreshold = dub::checknumber(L, 2);
    self->setContactProcessingThreshold(contactProcessingThreshold);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setContactProcessingThreshold: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setContactProcessingThreshold: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btCollisionObject::getContactProcessingThreshold() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:180
 */
static int btRigidBody_getContactProcessingThreshold(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getContactProcessingThreshold());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getContactProcessingThreshold: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getContactProcessingThreshold: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionObject::isStaticObject() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:185
 */
static int btRigidBody_isStaticObject(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushboolean(L, self->isStaticObject());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isStaticObject: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isStaticObject: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionObject::isKinematicObject() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:189
 */
static int btRigidBody_isKinematicObject(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushboolean(L, self->isKinematicObject());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isKinematicObject: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isKinematicObject: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionObject::isStaticOrKinematicObject() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:194
 */
static int btRigidBody_isStaticOrKinematicObject(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushboolean(L, self->isStaticOrKinematicObject());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isStaticOrKinematicObject: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isStaticOrKinematicObject: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionObject::hasContactResponse() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:199
 */
static int btRigidBody_hasContactResponse(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushboolean(L, self->hasContactResponse());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "hasContactResponse: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "hasContactResponse: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionObject::setCollisionShape(btCollisionShape *collisionShape)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:208
 */
static int btRigidBody_setCollisionShape(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btCollisionShape *collisionShape = *((btCollisionShape **)dub::checksdata(L, 2, "bt.CollisionShape"));
    self->setCollisionShape(collisionShape);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCollisionShape: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCollisionShape: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setIgnoreCollisionCheck(const btCollisionObject *co, bool ignoreCollisionCheck)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:225
 */
static int btRigidBody_setIgnoreCollisionCheck(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btCollisionObject *co = *((btCollisionObject **)dub::checksdata(L, 2, "bt.CollisionObject"));
    bool ignoreCollisionCheck = dub::checkboolean(L, 3);
    self->setIgnoreCollisionCheck(co, ignoreCollisionCheck);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setIgnoreCollisionCheck: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setIgnoreCollisionCheck: Unknown exception");
  }
  return dub::error(L);
}

/** virtual bool btCollisionObject::checkCollideWithOverride(const btCollisionObject *co) const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:243
 */
static int btRigidBody_checkCollideWithOverride(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btCollisionObject *co = *((btCollisionObject **)dub::checksdata(L, 2, "bt.CollisionObject"));
    lua_pushboolean(L, self->checkCollideWithOverride(co));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "checkCollideWithOverride: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "checkCollideWithOverride: Unknown exception");
  }
  return dub::error(L);
}

/** void* btCollisionObject::internalGetExtensionPointer() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:258
 */
static int btRigidBody_internalGetExtensionPointer(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    self->internalGetExtensionPointer();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "internalGetExtensionPointer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "internalGetExtensionPointer: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::internalSetExtensionPointer(void *pointer)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:264
 */
static int btRigidBody_internalSetExtensionPointer(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    void *pointer = *((void **)dub::checksdata(L, 2, "void"));
    self->internalSetExtensionPointer(pointer);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "internalSetExtensionPointer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "internalSetExtensionPointer: Unknown exception");
  }
  return dub::error(L);
}

/** int btCollisionObject::getActivationState() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:269
 */
static int btRigidBody_getActivationState(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getActivationState());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getActivationState: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getActivationState: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setActivationState(int newState) const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:271
 */
static int btRigidBody_setActivationState(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    int newState = dub::checkint(L, 2);
    self->setActivationState(newState);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setActivationState: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setActivationState: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setDeactivationTime(btScalar time)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:273
 */
static int btRigidBody_setDeactivationTime(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btScalar time = dub::checknumber(L, 2);
    self->setDeactivationTime(time);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setDeactivationTime: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setDeactivationTime: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btCollisionObject::getDeactivationTime() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:277
 */
static int btRigidBody_getDeactivationTime(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getDeactivationTime());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getDeactivationTime: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getDeactivationTime: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::forceActivationState(int newState) const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:282
 */
static int btRigidBody_forceActivationState(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    int newState = dub::checkint(L, 2);
    self->forceActivationState(newState);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "forceActivationState: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "forceActivationState: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::activate(bool forceActivation=false) const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:284
 */
static int btRigidBody_activate(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    int top__ = lua_gettop(L);
    if (top__ >= 2) {
      bool forceActivation = dub::checkboolean(L, 2);
      self->activate(forceActivation);
      return 0;
    } else {
      self->activate();
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "activate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "activate: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionObject::isActive() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:286
 */
static int btRigidBody_isActive(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushboolean(L, self->isActive());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isActive: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isActive: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setRestitution(btScalar rest)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:291
 */
static int btRigidBody_setRestitution(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btScalar rest = dub::checknumber(L, 2);
    self->setRestitution(rest);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setRestitution: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setRestitution: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btCollisionObject::getRestitution() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:296
 */
static int btRigidBody_getRestitution(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getRestitution());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRestitution: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRestitution: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setFriction(btScalar frict)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:300
 */
static int btRigidBody_setFriction(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btScalar frict = dub::checknumber(L, 2);
    self->setFriction(frict);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFriction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFriction: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btCollisionObject::getFriction() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:305
 */
static int btRigidBody_getFriction(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getFriction());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getFriction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getFriction: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setRollingFriction(btScalar frict)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:310
 */
static int btRigidBody_setRollingFriction(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btScalar frict = dub::checknumber(L, 2);
    self->setRollingFriction(frict);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setRollingFriction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setRollingFriction: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btCollisionObject::getRollingFriction() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:315
 */
static int btRigidBody_getRollingFriction(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getRollingFriction());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRollingFriction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRollingFriction: Unknown exception");
  }
  return dub::error(L);
}

/** int btCollisionObject::getInternalType() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:322
 */
static int btRigidBody_getInternalType(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getInternalType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getInternalType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getInternalType: Unknown exception");
  }
  return dub::error(L);
}

/** btTransform& btCollisionObject::getWorldTransform()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:327
 */
static int btRigidBody_getWorldTransform(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    dub::pushudata(L, &self->getWorldTransform(), "bt.Transform", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getWorldTransform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getWorldTransform: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setWorldTransform(const btTransform &worldTrans)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:337
 */
static int btRigidBody_setWorldTransform(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btTransform *worldTrans = *((btTransform **)dub::checksdata(L, 2, "bt.Transform"));
    self->setWorldTransform(*worldTrans);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setWorldTransform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setWorldTransform: Unknown exception");
  }
  return dub::error(L);
}

/** btBroadphaseProxy* btCollisionObject::getBroadphaseHandle()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:344
 */
static int btRigidBody_getBroadphaseHandle(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btBroadphaseProxy *retval__ = self->getBroadphaseHandle();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "BroadphaseProxy", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getBroadphaseHandle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getBroadphaseHandle: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setBroadphaseHandle(btBroadphaseProxy *handle)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:354
 */
static int btRigidBody_setBroadphaseHandle(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btBroadphaseProxy *handle = *((btBroadphaseProxy **)dub::checksdata(L, 2, "BroadphaseProxy"));
    self->setBroadphaseHandle(handle);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setBroadphaseHandle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setBroadphaseHandle: Unknown exception");
  }
  return dub::error(L);
}

/** const btTransform& btCollisionObject::getInterpolationWorldTransform() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:360
 */
static int btRigidBody_getInterpolationWorldTransform(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    dub::pushudata(L, const_cast<btTransform*>(&self->getInterpolationWorldTransform()), "bt.Transform", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getInterpolationWorldTransform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getInterpolationWorldTransform: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setInterpolationWorldTransform(const btTransform &trans)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:370
 */
static int btRigidBody_setInterpolationWorldTransform(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btTransform *trans = *((btTransform **)dub::checksdata(L, 2, "bt.Transform"));
    self->setInterpolationWorldTransform(*trans);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setInterpolationWorldTransform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setInterpolationWorldTransform: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setInterpolationLinearVelocity(const btVector3 &linvel)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:376
 */
static int btRigidBody_setInterpolationLinearVelocity(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btVector3 *linvel = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->setInterpolationLinearVelocity(*linvel);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setInterpolationLinearVelocity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setInterpolationLinearVelocity: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setInterpolationAngularVelocity(const btVector3 &angvel)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:382
 */
static int btRigidBody_setInterpolationAngularVelocity(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btVector3 *angvel = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->setInterpolationAngularVelocity(*angvel);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setInterpolationAngularVelocity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setInterpolationAngularVelocity: Unknown exception");
  }
  return dub::error(L);
}

/** const btVector3& btCollisionObject::getInterpolationLinearVelocity() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:388
 */
static int btRigidBody_getInterpolationLinearVelocity(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    dub::pushudata(L, const_cast<btVector3*>(&self->getInterpolationLinearVelocity()), "bt.Vector3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getInterpolationLinearVelocity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getInterpolationLinearVelocity: Unknown exception");
  }
  return dub::error(L);
}

/** const btVector3& btCollisionObject::getInterpolationAngularVelocity() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:393
 */
static int btRigidBody_getInterpolationAngularVelocity(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    dub::pushudata(L, const_cast<btVector3*>(&self->getInterpolationAngularVelocity()), "bt.Vector3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getInterpolationAngularVelocity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getInterpolationAngularVelocity: Unknown exception");
  }
  return dub::error(L);
}

/** int btCollisionObject::getIslandTag() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:398
 */
static int btRigidBody_getIslandTag(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getIslandTag());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getIslandTag: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getIslandTag: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setIslandTag(int tag)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:403
 */
static int btRigidBody_setIslandTag(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    int tag = dub::checkint(L, 2);
    self->setIslandTag(tag);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setIslandTag: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setIslandTag: Unknown exception");
  }
  return dub::error(L);
}

/** int btCollisionObject::getCompanionId() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:408
 */
static int btRigidBody_getCompanionId(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getCompanionId());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCompanionId: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCompanionId: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setCompanionId(int id)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:413
 */
static int btRigidBody_setCompanionId(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    int id = dub::checkint(L, 2);
    self->setCompanionId(id);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCompanionId: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCompanionId: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btCollisionObject::getHitFraction() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:418
 */
static int btRigidBody_getHitFraction(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getHitFraction());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getHitFraction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getHitFraction: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setHitFraction(btScalar hitFraction)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:423
 */
static int btRigidBody_setHitFraction(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btScalar hitFraction = dub::checknumber(L, 2);
    self->setHitFraction(hitFraction);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setHitFraction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setHitFraction: Unknown exception");
  }
  return dub::error(L);
}

/** int btCollisionObject::getCollisionFlags() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:429
 */
static int btRigidBody_getCollisionFlags(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getCollisionFlags());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCollisionFlags: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCollisionFlags: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setCollisionFlags(int flags)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:434
 */
static int btRigidBody_setCollisionFlags(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    int flags = dub::checkint(L, 2);
    self->setCollisionFlags(flags);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCollisionFlags: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCollisionFlags: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btCollisionObject::getCcdSweptSphereRadius() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:440
 */
static int btRigidBody_getCcdSweptSphereRadius(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getCcdSweptSphereRadius());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCcdSweptSphereRadius: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCcdSweptSphereRadius: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setCcdSweptSphereRadius(btScalar radius)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:446
 */
static int btRigidBody_setCcdSweptSphereRadius(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btScalar radius = dub::checknumber(L, 2);
    self->setCcdSweptSphereRadius(radius);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCcdSweptSphereRadius: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCcdSweptSphereRadius: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btCollisionObject::getCcdMotionThreshold() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:451
 */
static int btRigidBody_getCcdMotionThreshold(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getCcdMotionThreshold());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCcdMotionThreshold: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCcdMotionThreshold: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btCollisionObject::getCcdSquareMotionThreshold() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:456
 */
static int btRigidBody_getCcdSquareMotionThreshold(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getCcdSquareMotionThreshold());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCcdSquareMotionThreshold: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCcdSquareMotionThreshold: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setCcdMotionThreshold(btScalar ccdMotionThreshold)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:464
 */
static int btRigidBody_setCcdMotionThreshold(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btScalar ccdMotionThreshold = dub::checknumber(L, 2);
    self->setCcdMotionThreshold(ccdMotionThreshold);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setCcdMotionThreshold: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setCcdMotionThreshold: Unknown exception");
  }
  return dub::error(L);
}

/** void* btCollisionObject::getUserPointer() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:470
 */
static int btRigidBody_getUserPointer(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    self->getUserPointer();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getUserPointer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getUserPointer: Unknown exception");
  }
  return dub::error(L);
}

/** int btCollisionObject::getUserIndex() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:475
 */
static int btRigidBody_getUserIndex(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getUserIndex());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getUserIndex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getUserIndex: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setUserPointer(void *userPointer)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:480
 */
static int btRigidBody_setUserPointer(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    void *userPointer = *((void **)dub::checksdata(L, 2, "void"));
    self->setUserPointer(userPointer);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUserPointer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUserPointer: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionObject::setUserIndex(int index)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:486
 */
static int btRigidBody_setUserIndex(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    int index = dub::checkint(L, 2);
    self->setUserIndex(index);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUserIndex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUserIndex: Unknown exception");
  }
  return dub::error(L);
}

/** int btCollisionObject::getUpdateRevisionInternal() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:491
 */
static int btRigidBody_getUpdateRevisionInternal(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    lua_pushnumber(L, self->getUpdateRevisionInternal());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getUpdateRevisionInternal: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getUpdateRevisionInternal: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionObject::checkCollideWith(const btCollisionObject *co) const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionObject.h:497
 */
static int btRigidBody_checkCollideWith(lua_State *L) {
  try {
    btRigidBody *self = *((btRigidBody **)dub::checksdata(L, 1, "bt.RigidBody"));
    btCollisionObject *co = *((btCollisionObject **)dub::checksdata(L, 2, "bt.CollisionObject"));
    lua_pushboolean(L, self->checkCollideWith(co));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "checkCollideWith: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "checkCollideWith: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int btRigidBody___tostring(lua_State *L) {
  btRigidBody *self = *((btRigidBody **)dub::checksdata_n(L, 1, "bt.RigidBody"));
  lua_pushfstring(L, "bt.RigidBody: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg btRigidBody_member_methods[] = {
  { "__newindex"   , btRigidBody__set_    },
  { "__index"      , btRigidBody__get_    },
  { "_cast_"       , btRigidBody__cast_   },
  { "new"          , btRigidBody_btRigidBody },
  { "__gc"         , btRigidBody__btRigidBody },
  { "proceedToTransform", btRigidBody_proceedToTransform },
  { "predictIntegratedTransform", btRigidBody_predictIntegratedTransform },
  { "saveKinematicState", btRigidBody_saveKinematicState },
  { "applyGravity" , btRigidBody_applyGravity },
  { "setGravity"   , btRigidBody_setGravity },
  { "getGravity"   , btRigidBody_getGravity },
  { "setDamping"   , btRigidBody_setDamping },
  { "getLinearDamping", btRigidBody_getLinearDamping },
  { "getAngularDamping", btRigidBody_getAngularDamping },
  { "getLinearSleepingThreshold", btRigidBody_getLinearSleepingThreshold },
  { "getAngularSleepingThreshold", btRigidBody_getAngularSleepingThreshold },
  { "applyDamping" , btRigidBody_applyDamping },
  { "getCollisionShape", btRigidBody_getCollisionShape },
  { "setMassProps" , btRigidBody_setMassProps },
  { "getLinearFactor", btRigidBody_getLinearFactor },
  { "setLinearFactor", btRigidBody_setLinearFactor },
  { "getInvMass"   , btRigidBody_getInvMass },
  { "getInvInertiaTensorWorld", btRigidBody_getInvInertiaTensorWorld },
  { "integrateVelocities", btRigidBody_integrateVelocities },
  { "setCenterOfMassTransform", btRigidBody_setCenterOfMassTransform },
  { "applyCentralForce", btRigidBody_applyCentralForce },
  { "getTotalForce", btRigidBody_getTotalForce },
  { "getTotalTorque", btRigidBody_getTotalTorque },
  { "getInvInertiaDiagLocal", btRigidBody_getInvInertiaDiagLocal },
  { "setInvInertiaDiagLocal", btRigidBody_setInvInertiaDiagLocal },
  { "setSleepingThresholds", btRigidBody_setSleepingThresholds },
  { "applyTorque"  , btRigidBody_applyTorque },
  { "applyForce"   , btRigidBody_applyForce },
  { "applyCentralImpulse", btRigidBody_applyCentralImpulse },
  { "applyTorqueImpulse", btRigidBody_applyTorqueImpulse },
  { "applyImpulse" , btRigidBody_applyImpulse },
  { "clearForces"  , btRigidBody_clearForces },
  { "updateInertiaTensor", btRigidBody_updateInertiaTensor },
  { "getCenterOfMassPosition", btRigidBody_getCenterOfMassPosition },
  { "getOrientation", btRigidBody_getOrientation },
  { "getCenterOfMassTransform", btRigidBody_getCenterOfMassTransform },
  { "getLinearVelocity", btRigidBody_getLinearVelocity },
  { "getAngularVelocity", btRigidBody_getAngularVelocity },
  { "setLinearVelocity", btRigidBody_setLinearVelocity },
  { "setAngularVelocity", btRigidBody_setAngularVelocity },
  { "getVelocityInLocalPoint", btRigidBody_getVelocityInLocalPoint },
  { "translate"    , btRigidBody_translate },
  { "getAabb"      , btRigidBody_getAabb  },
  { "computeImpulseDenominator", btRigidBody_computeImpulseDenominator },
  { "computeAngularImpulseDenominator", btRigidBody_computeAngularImpulseDenominator },
  { "updateDeactivation", btRigidBody_updateDeactivation },
  { "wantsSleeping", btRigidBody_wantsSleeping },
  { "getBroadphaseProxy", btRigidBody_getBroadphaseProxy },
  { "setNewBroadphaseProxy", btRigidBody_setNewBroadphaseProxy },
  { "getMotionState", btRigidBody_getMotionState },
  { "setMotionState", btRigidBody_setMotionState },
  { "setAngularFactor", btRigidBody_setAngularFactor },
  { "getAngularFactor", btRigidBody_getAngularFactor },
  { "isInWorld"    , btRigidBody_isInWorld },
  { "addConstraintRef", btRigidBody_addConstraintRef },
  { "removeConstraintRef", btRigidBody_removeConstraintRef },
  { "getConstraintRef", btRigidBody_getConstraintRef },
  { "getNumConstraintRefs", btRigidBody_getNumConstraintRefs },
  { "setFlags"     , btRigidBody_setFlags },
  { "getFlags"     , btRigidBody_getFlags },
  { "computeGyroscopicForce", btRigidBody_computeGyroscopicForce },
  { "calculateSerializeBufferSize", btRigidBody_calculateSerializeBufferSize },
  { "serialize"    , btRigidBody_serialize },
  { "serializeSingleObject", btRigidBody_serializeSingleObject },
  { "upcast"       , btRigidBody_upcast   },
  { "mergesSimulationIslands", btRigidBody_mergesSimulationIslands },
  { "getAnisotropicFriction", btRigidBody_getAnisotropicFriction },
  { "setAnisotropicFriction", btRigidBody_setAnisotropicFriction },
  { "hasAnisotropicFriction", btRigidBody_hasAnisotropicFriction },
  { "setContactProcessingThreshold", btRigidBody_setContactProcessingThreshold },
  { "getContactProcessingThreshold", btRigidBody_getContactProcessingThreshold },
  { "isStaticObject", btRigidBody_isStaticObject },
  { "isKinematicObject", btRigidBody_isKinematicObject },
  { "isStaticOrKinematicObject", btRigidBody_isStaticOrKinematicObject },
  { "hasContactResponse", btRigidBody_hasContactResponse },
  { "setCollisionShape", btRigidBody_setCollisionShape },
  { "setIgnoreCollisionCheck", btRigidBody_setIgnoreCollisionCheck },
  { "checkCollideWithOverride", btRigidBody_checkCollideWithOverride },
  { "internalGetExtensionPointer", btRigidBody_internalGetExtensionPointer },
  { "internalSetExtensionPointer", btRigidBody_internalSetExtensionPointer },
  { "getActivationState", btRigidBody_getActivationState },
  { "setActivationState", btRigidBody_setActivationState },
  { "setDeactivationTime", btRigidBody_setDeactivationTime },
  { "getDeactivationTime", btRigidBody_getDeactivationTime },
  { "forceActivationState", btRigidBody_forceActivationState },
  { "activate"     , btRigidBody_activate },
  { "isActive"     , btRigidBody_isActive },
  { "setRestitution", btRigidBody_setRestitution },
  { "getRestitution", btRigidBody_getRestitution },
  { "setFriction"  , btRigidBody_setFriction },
  { "getFriction"  , btRigidBody_getFriction },
  { "setRollingFriction", btRigidBody_setRollingFriction },
  { "getRollingFriction", btRigidBody_getRollingFriction },
  { "getInternalType", btRigidBody_getInternalType },
  { "getWorldTransform", btRigidBody_getWorldTransform },
  { "setWorldTransform", btRigidBody_setWorldTransform },
  { "getBroadphaseHandle", btRigidBody_getBroadphaseHandle },
  { "setBroadphaseHandle", btRigidBody_setBroadphaseHandle },
  { "getInterpolationWorldTransform", btRigidBody_getInterpolationWorldTransform },
  { "setInterpolationWorldTransform", btRigidBody_setInterpolationWorldTransform },
  { "setInterpolationLinearVelocity", btRigidBody_setInterpolationLinearVelocity },
  { "setInterpolationAngularVelocity", btRigidBody_setInterpolationAngularVelocity },
  { "getInterpolationLinearVelocity", btRigidBody_getInterpolationLinearVelocity },
  { "getInterpolationAngularVelocity", btRigidBody_getInterpolationAngularVelocity },
  { "getIslandTag" , btRigidBody_getIslandTag },
  { "setIslandTag" , btRigidBody_setIslandTag },
  { "getCompanionId", btRigidBody_getCompanionId },
  { "setCompanionId", btRigidBody_setCompanionId },
  { "getHitFraction", btRigidBody_getHitFraction },
  { "setHitFraction", btRigidBody_setHitFraction },
  { "getCollisionFlags", btRigidBody_getCollisionFlags },
  { "setCollisionFlags", btRigidBody_setCollisionFlags },
  { "getCcdSweptSphereRadius", btRigidBody_getCcdSweptSphereRadius },
  { "setCcdSweptSphereRadius", btRigidBody_setCcdSweptSphereRadius },
  { "getCcdMotionThreshold", btRigidBody_getCcdMotionThreshold },
  { "getCcdSquareMotionThreshold", btRigidBody_getCcdSquareMotionThreshold },
  { "setCcdMotionThreshold", btRigidBody_setCcdMotionThreshold },
  { "getUserPointer", btRigidBody_getUserPointer },
  { "getUserIndex" , btRigidBody_getUserIndex },
  { "setUserPointer", btRigidBody_setUserPointer },
  { "setUserIndex" , btRigidBody_setUserIndex },
  { "getUpdateRevisionInternal", btRigidBody_getUpdateRevisionInternal },
  { "checkCollideWith", btRigidBody_checkCollideWith },
  { "__tostring"   , btRigidBody___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_bt_RigidBody(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.RigidBody");
  // <mt>

  // register member methods
  dub::fregister(L, btRigidBody_member_methods);
  // setup meta-table
  dub::setup(L, "bt.RigidBody");
  // <mt>
  return 1;
}
