/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class btDynamicsWorld
 *
 * This file has been generated by dub 2.2.1.
 */
#include "dub/dub.h"
#include "BulletDynamics/Dynamics/btDynamicsWorld.h"


/** Cast (class_name)
 * 
 */
static int btDynamicsWorld__cast_(lua_State *L) {

  btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata_n(L, 1, "bt.DynamicsWorld"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "bt.CollisionWorld")) break;
      *retval__ = static_cast<btCollisionWorld *>(self);
      return 1;
    }
  }
  return 0;
}

/** virtual btDynamicsWorld::~btDynamicsWorld()
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:59
 */
static int btDynamicsWorld__btDynamicsWorld(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "bt.DynamicsWorld"));
    if (userdata->gc) {
      btDynamicsWorld *self = (btDynamicsWorld *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** virtual int btDynamicsWorld::stepSimulation(btScalar timeStep, int maxSubSteps=1, btScalar fixedTimeStep=btScalar(1.)/btScalar(60.))=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:67
 */
static int btDynamicsWorld_stepSimulation(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      btScalar timeStep = dub::checknumber(L, 2);
      int maxSubSteps = dub::checkint(L, 3);
      btScalar fixedTimeStep = dub::checknumber(L, 4);
      lua_pushnumber(L, self->stepSimulation(timeStep, maxSubSteps, fixedTimeStep));
      return 1;
    } else if (top__ >= 3) {
      btScalar timeStep = dub::checknumber(L, 2);
      int maxSubSteps = dub::checkint(L, 3);
      lua_pushnumber(L, self->stepSimulation(timeStep, maxSubSteps));
      return 1;
    } else {
      btScalar timeStep = dub::checknumber(L, 2);
      lua_pushnumber(L, self->stepSimulation(timeStep));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "stepSimulation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "stepSimulation: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDynamicsWorld::debugDrawWorld()=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:69
 */
static int btDynamicsWorld_debugDrawWorld(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    self->debugDrawWorld();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "debugDrawWorld: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "debugDrawWorld: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDynamicsWorld::addConstraint(btTypedConstraint *constraint, bool disableCollisionsBetweenLinkedBodies=false)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:71
 */
static int btDynamicsWorld_addConstraint(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      btTypedConstraint *constraint = *((btTypedConstraint **)dub::checksdata(L, 2, "bt.TypedConstraint"));
      bool disableCollisionsBetweenLinkedBodies = dub::checkboolean(L, 3);
      self->addConstraint(constraint, disableCollisionsBetweenLinkedBodies);
      return 0;
    } else {
      btTypedConstraint *constraint = *((btTypedConstraint **)dub::checksdata(L, 2, "bt.TypedConstraint"));
      self->addConstraint(constraint);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addConstraint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addConstraint: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDynamicsWorld::removeConstraint(btTypedConstraint *constraint)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:76
 */
static int btDynamicsWorld_removeConstraint(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btTypedConstraint *constraint = *((btTypedConstraint **)dub::checksdata(L, 2, "bt.TypedConstraint"));
    self->removeConstraint(constraint);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeConstraint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeConstraint: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDynamicsWorld::addAction(btActionInterface *action)=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:78
 */
static int btDynamicsWorld_addAction(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btActionInterface *action = *((btActionInterface **)dub::checksdata(L, 2, "ActionInterface"));
    self->addAction(action);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addAction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addAction: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDynamicsWorld::removeAction(btActionInterface *action)=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:80
 */
static int btDynamicsWorld_removeAction(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btActionInterface *action = *((btActionInterface **)dub::checksdata(L, 2, "ActionInterface"));
    self->removeAction(action);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeAction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeAction: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDynamicsWorld::setGravity(const btVector3 &gravity)=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:84
 */
static int btDynamicsWorld_setGravity(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btVector3 *gravity = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->setGravity(*gravity);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setGravity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setGravity: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btVector3 btDynamicsWorld::getGravity() const =0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:85
 */
static int btDynamicsWorld_getGravity(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    dub::pushudata(L, new btVector3(self->getGravity()), "bt.Vector3", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getGravity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getGravity: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDynamicsWorld::synchronizeMotionStates()=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:87
 */
static int btDynamicsWorld_synchronizeMotionStates(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    self->synchronizeMotionStates();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "synchronizeMotionStates: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "synchronizeMotionStates: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDynamicsWorld::addRigidBody(btRigidBody *body)=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:89
 */
static int btDynamicsWorld_addRigidBody(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      btRigidBody *body = *((btRigidBody **)dub::checksdata(L, 2, "bt.RigidBody"));
      short group = dub::checkint(L, 3);
      short mask = dub::checkint(L, 4);
      self->addRigidBody(body, group, mask);
      return 0;
    } else {
      btRigidBody *body = *((btRigidBody **)dub::checksdata(L, 2, "bt.RigidBody"));
      self->addRigidBody(body);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addRigidBody: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addRigidBody: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDynamicsWorld::removeRigidBody(btRigidBody *body)=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:93
 */
static int btDynamicsWorld_removeRigidBody(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btRigidBody *body = *((btRigidBody **)dub::checksdata(L, 2, "bt.RigidBody"));
    self->removeRigidBody(body);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeRigidBody: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeRigidBody: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDynamicsWorld::setConstraintSolver(btConstraintSolver *solver)=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:95
 */
static int btDynamicsWorld_setConstraintSolver(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btConstraintSolver *solver = *((btConstraintSolver **)dub::checksdata(L, 2, "bt.ConstraintSolver"));
    self->setConstraintSolver(solver);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setConstraintSolver: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setConstraintSolver: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btConstraintSolver* btDynamicsWorld::getConstraintSolver()=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:97
 */
static int btDynamicsWorld_getConstraintSolver(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btConstraintSolver *retval__ = self->getConstraintSolver();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "bt.ConstraintSolver", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getConstraintSolver: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getConstraintSolver: Unknown exception");
  }
  return dub::error(L);
}

/** virtual int btDynamicsWorld::getNumConstraints() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:99
 */
static int btDynamicsWorld_getNumConstraints(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    lua_pushnumber(L, self->getNumConstraints());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNumConstraints: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNumConstraints: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btTypedConstraint* btDynamicsWorld::getConstraint(int index)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:101
 */
static int btDynamicsWorld_getConstraint(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    int index = dub::checkint(L, 2);
    btTypedConstraint *retval__ = self->getConstraint(index);
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "bt.TypedConstraint", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getConstraint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getConstraint: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btDynamicsWorldType btDynamicsWorld::getWorldType() const =0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:105
 */
static int btDynamicsWorld_getWorldType(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    lua_pushnumber(L, self->getWorldType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getWorldType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getWorldType: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDynamicsWorld::clearForces()=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:107
 */
static int btDynamicsWorld_clearForces(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    self->clearForces();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clearForces: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clearForces: Unknown exception");
  }
  return dub::error(L);
}

/** void btDynamicsWorld::setInternalTickCallback(btInternalTickCallback cb, void *worldUserInfo=0, bool isPreTick=false)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:110
 */
static int btDynamicsWorld_setInternalTickCallback(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      btInternalTickCallback *cb = *((btInternalTickCallback **)dub::checksdata(L, 2, "InternalTickCallback"));
      void *worldUserInfo = *((void **)dub::checksdata(L, 3, "void"));
      bool isPreTick = dub::checkboolean(L, 4);
      self->setInternalTickCallback(*cb, worldUserInfo, isPreTick);
      return 0;
    } else if (top__ >= 3) {
      btInternalTickCallback *cb = *((btInternalTickCallback **)dub::checksdata(L, 2, "InternalTickCallback"));
      void *worldUserInfo = *((void **)dub::checksdata(L, 3, "void"));
      self->setInternalTickCallback(*cb, worldUserInfo);
      return 0;
    } else {
      btInternalTickCallback *cb = *((btInternalTickCallback **)dub::checksdata(L, 2, "InternalTickCallback"));
      self->setInternalTickCallback(*cb);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setInternalTickCallback: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setInternalTickCallback: Unknown exception");
  }
  return dub::error(L);
}

/** void btDynamicsWorld::setWorldUserInfo(void *worldUserInfo)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:122
 */
static int btDynamicsWorld_setWorldUserInfo(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    void *worldUserInfo = *((void **)dub::checksdata(L, 2, "void"));
    self->setWorldUserInfo(worldUserInfo);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setWorldUserInfo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setWorldUserInfo: Unknown exception");
  }
  return dub::error(L);
}

/** void* btDynamicsWorld::getWorldUserInfo() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:127
 */
static int btDynamicsWorld_getWorldUserInfo(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    self->getWorldUserInfo();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getWorldUserInfo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getWorldUserInfo: Unknown exception");
  }
  return dub::error(L);
}

/** btContactSolverInfo& btDynamicsWorld::getSolverInfo()
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:132
 */
static int btDynamicsWorld_getSolverInfo(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    dub::pushudata(L, &self->getSolverInfo(), "ContactSolverInfo", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSolverInfo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSolverInfo: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDynamicsWorld::addVehicle(btActionInterface *vehicle)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:139
 */
static int btDynamicsWorld_addVehicle(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btActionInterface *vehicle = *((btActionInterface **)dub::checksdata(L, 2, "ActionInterface"));
    self->addVehicle(vehicle);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addVehicle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addVehicle: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDynamicsWorld::removeVehicle(btActionInterface *vehicle)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:141
 */
static int btDynamicsWorld_removeVehicle(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btActionInterface *vehicle = *((btActionInterface **)dub::checksdata(L, 2, "ActionInterface"));
    self->removeVehicle(vehicle);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeVehicle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeVehicle: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDynamicsWorld::addCharacter(btActionInterface *character)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:143
 */
static int btDynamicsWorld_addCharacter(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btActionInterface *character = *((btActionInterface **)dub::checksdata(L, 2, "ActionInterface"));
    self->addCharacter(character);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addCharacter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addCharacter: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDynamicsWorld::removeCharacter(btActionInterface *character)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:145
 */
static int btDynamicsWorld_removeCharacter(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btActionInterface *character = *((btActionInterface **)dub::checksdata(L, 2, "ActionInterface"));
    self->removeCharacter(character);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeCharacter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeCharacter: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionWorld::setBroadphase(btBroadphaseInterface *pairCache)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:117
 */
static int btDynamicsWorld_setBroadphase(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btBroadphaseInterface *pairCache = *((btBroadphaseInterface **)dub::checksdata(L, 2, "bt.BroadphaseInterface"));
    self->setBroadphase(pairCache);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setBroadphase: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setBroadphase: Unknown exception");
  }
  return dub::error(L);
}

/** const btBroadphaseInterface* btCollisionWorld::getBroadphase() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:122
 */
static int btDynamicsWorld_getBroadphase(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    const btBroadphaseInterface *retval__ = self->getBroadphase();
    if (!retval__) return 0;
    dub::pushudata(L, const_cast<btBroadphaseInterface*>(retval__), "bt.BroadphaseInterface", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getBroadphase: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getBroadphase: Unknown exception");
  }
  return dub::error(L);
}

/** btOverlappingPairCache* btCollisionWorld::getPairCache()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:132
 */
static int btDynamicsWorld_getPairCache(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btOverlappingPairCache *retval__ = self->getPairCache();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "OverlappingPairCache", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPairCache: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPairCache: Unknown exception");
  }
  return dub::error(L);
}

/** btDispatcher* btCollisionWorld::getDispatcher()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:138
 */
static int btDynamicsWorld_getDispatcher(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btDispatcher *retval__ = self->getDispatcher();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "bt.Dispatcher", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getDispatcher: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getDispatcher: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionWorld::updateSingleAabb(btCollisionObject *colObj)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:148
 */
static int btDynamicsWorld_updateSingleAabb(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btCollisionObject *colObj = *((btCollisionObject **)dub::checksdata(L, 2, "bt.CollisionObject"));
    self->updateSingleAabb(colObj);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "updateSingleAabb: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "updateSingleAabb: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionWorld::updateAabbs()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:150
 */
static int btDynamicsWorld_updateAabbs(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    self->updateAabbs();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "updateAabbs: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "updateAabbs: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionWorld::computeOverlappingPairs()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:154
 */
static int btDynamicsWorld_computeOverlappingPairs(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    self->computeOverlappingPairs();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "computeOverlappingPairs: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "computeOverlappingPairs: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionWorld::setDebugDrawer(btIDebugDraw *debugDrawer)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:157
 */
static int btDynamicsWorld_setDebugDrawer(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btIDebugDraw *debugDrawer = *((btIDebugDraw **)dub::checksdata(L, 2, "bt.IDebugDraw"));
    self->setDebugDrawer(debugDrawer);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setDebugDrawer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setDebugDrawer: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btIDebugDraw* btCollisionWorld::getDebugDrawer()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:162
 */
static int btDynamicsWorld_getDebugDrawer(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btIDebugDraw *retval__ = self->getDebugDrawer();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "bt.IDebugDraw", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getDebugDrawer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getDebugDrawer: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionWorld::debugDrawObject(const btTransform &worldTransform, const btCollisionShape *shape, const btVector3 &color)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:169
 */
static int btDynamicsWorld_debugDrawObject(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btTransform *worldTransform = *((btTransform **)dub::checksdata(L, 2, "bt.Transform"));
    btCollisionShape *shape = *((btCollisionShape **)dub::checksdata(L, 3, "bt.CollisionShape"));
    btVector3 *color = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
    self->debugDrawObject(*worldTransform, shape, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "debugDrawObject: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "debugDrawObject: Unknown exception");
  }
  return dub::error(L);
}

/** int btCollisionWorld::getNumCollisionObjects() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:438
 */
static int btDynamicsWorld_getNumCollisionObjects(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    lua_pushnumber(L, self->getNumCollisionObjects());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNumCollisionObjects: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNumCollisionObjects: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionWorld::rayTest(const btVector3 &rayFromWorld, const btVector3 &rayToWorld, RayResultCallback &resultCallback) const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:445
 */
static int btDynamicsWorld_rayTest(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btVector3 *rayFromWorld = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    btVector3 *rayToWorld = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    btCollisionWorld::RayResultCallback *resultCallback = *((btCollisionWorld::RayResultCallback **)dub::checksdata(L, 4, "bt.CollisionWorld.RayResultCallback"));
    self->rayTest(*rayFromWorld, *rayToWorld, *resultCallback);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "rayTest: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rayTest: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionWorld::convexSweepTest(const btConvexShape *castShape, const btTransform &from, const btTransform &to, ConvexResultCallback &resultCallback, btScalar allowedCcdPenetration=btScalar(0.)) const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:449
 */
static int btDynamicsWorld_convexSweepTest(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      btConvexShape *castShape = *((btConvexShape **)dub::checksdata(L, 2, "bt.ConvexShape"));
      btTransform *from = *((btTransform **)dub::checksdata(L, 3, "bt.Transform"));
      btTransform *to = *((btTransform **)dub::checksdata(L, 4, "bt.Transform"));
      btCollisionWorld::ConvexResultCallback *resultCallback = *((btCollisionWorld::ConvexResultCallback **)dub::checksdata(L, 5, "bt.CollisionWorld.ConvexResultCallback"));
      btScalar allowedCcdPenetration = dub::checknumber(L, 6);
      self->convexSweepTest(castShape, *from, *to, *resultCallback, allowedCcdPenetration);
      return 0;
    } else {
      btConvexShape *castShape = *((btConvexShape **)dub::checksdata(L, 2, "bt.ConvexShape"));
      btTransform *from = *((btTransform **)dub::checksdata(L, 3, "bt.Transform"));
      btTransform *to = *((btTransform **)dub::checksdata(L, 4, "bt.Transform"));
      btCollisionWorld::ConvexResultCallback *resultCallback = *((btCollisionWorld::ConvexResultCallback **)dub::checksdata(L, 5, "bt.CollisionWorld.ConvexResultCallback"));
      self->convexSweepTest(castShape, *from, *to, *resultCallback);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "convexSweepTest: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "convexSweepTest: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionWorld::contactTest(btCollisionObject *colObj, ContactResultCallback &resultCallback)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:453
 */
static int btDynamicsWorld_contactTest(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btCollisionObject *colObj = *((btCollisionObject **)dub::checksdata(L, 2, "bt.CollisionObject"));
    btCollisionWorld::ContactResultCallback *resultCallback = *((btCollisionWorld::ContactResultCallback **)dub::checksdata(L, 3, "bt.CollisionWorld.ContactResultCallback"));
    self->contactTest(colObj, *resultCallback);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "contactTest: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "contactTest: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionWorld::contactPairTest(btCollisionObject *colObjA, btCollisionObject *colObjB, ContactResultCallback &resultCallback)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:457
 */
static int btDynamicsWorld_contactPairTest(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btCollisionObject *colObjA = *((btCollisionObject **)dub::checksdata(L, 2, "bt.CollisionObject"));
    btCollisionObject *colObjB = *((btCollisionObject **)dub::checksdata(L, 3, "bt.CollisionObject"));
    btCollisionWorld::ContactResultCallback *resultCallback = *((btCollisionWorld::ContactResultCallback **)dub::checksdata(L, 4, "bt.CollisionWorld.ContactResultCallback"));
    self->contactPairTest(colObjA, colObjB, *resultCallback);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "contactPairTest: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "contactPairTest: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionWorld::addCollisionObject(btCollisionObject *collisionObject, short int collisionFilterGroup=btBroadphaseProxy::DefaultFilter, short int collisionFilterMask=btBroadphaseProxy::AllFilter)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:484
 */
static int btDynamicsWorld_addCollisionObject(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      btCollisionObject *collisionObject = *((btCollisionObject **)dub::checksdata(L, 2, "bt.CollisionObject"));
      short int *collisionFilterGroup = *((short int **)dub::checksdata(L, 3, "short int"));
      short int *collisionFilterMask = *((short int **)dub::checksdata(L, 4, "short int"));
      self->addCollisionObject(collisionObject, *collisionFilterGroup, *collisionFilterMask);
      return 0;
    } else if (top__ >= 3) {
      btCollisionObject *collisionObject = *((btCollisionObject **)dub::checksdata(L, 2, "bt.CollisionObject"));
      short int *collisionFilterGroup = *((short int **)dub::checksdata(L, 3, "short int"));
      self->addCollisionObject(collisionObject, *collisionFilterGroup);
      return 0;
    } else {
      btCollisionObject *collisionObject = *((btCollisionObject **)dub::checksdata(L, 2, "bt.CollisionObject"));
      self->addCollisionObject(collisionObject);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addCollisionObject: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addCollisionObject: Unknown exception");
  }
  return dub::error(L);
}

/** btCollisionObjectArray& btCollisionWorld::getCollisionObjectArray()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:486
 */
static int btDynamicsWorld_getCollisionObjectArray(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    dub::pushudata(L, &self->getCollisionObjectArray(), "CollisionObjectArray", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCollisionObjectArray: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCollisionObjectArray: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionWorld::removeCollisionObject(btCollisionObject *collisionObject)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:497
 */
static int btDynamicsWorld_removeCollisionObject(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btCollisionObject *collisionObject = *((btCollisionObject **)dub::checksdata(L, 2, "bt.CollisionObject"));
    self->removeCollisionObject(collisionObject);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeCollisionObject: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeCollisionObject: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionWorld::performDiscreteCollisionDetection()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:499
 */
static int btDynamicsWorld_performDiscreteCollisionDetection(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    self->performDiscreteCollisionDetection();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "performDiscreteCollisionDetection: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "performDiscreteCollisionDetection: Unknown exception");
  }
  return dub::error(L);
}

/** btDispatcherInfo& btCollisionWorld::getDispatchInfo()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:501
 */
static int btDynamicsWorld_getDispatchInfo(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    dub::pushudata(L, &self->getDispatchInfo(), "bt.DispatcherInfo", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getDispatchInfo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getDispatchInfo: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionWorld::getForceUpdateAllAabbs() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:511
 */
static int btDynamicsWorld_getForceUpdateAllAabbs(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    lua_pushboolean(L, self->getForceUpdateAllAabbs());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getForceUpdateAllAabbs: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getForceUpdateAllAabbs: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionWorld::setForceUpdateAllAabbs(bool forceUpdateAllAabbs)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:515
 */
static int btDynamicsWorld_setForceUpdateAllAabbs(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    bool forceUpdateAllAabbs = dub::checkboolean(L, 2);
    self->setForceUpdateAllAabbs(forceUpdateAllAabbs);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setForceUpdateAllAabbs: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setForceUpdateAllAabbs: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionWorld::serialize(btSerializer *serializer)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:521
 */
static int btDynamicsWorld_serialize(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata(L, 1, "bt.DynamicsWorld"));
    btSerializer *serializer = *((btSerializer **)dub::checksdata(L, 2, "Serializer"));
    self->serialize(serializer);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "serialize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "serialize: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int btDynamicsWorld___tostring(lua_State *L) {
  btDynamicsWorld *self = *((btDynamicsWorld **)dub::checksdata_n(L, 1, "bt.DynamicsWorld"));
  lua_pushfstring(L, "bt.DynamicsWorld: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg btDynamicsWorld_member_methods[] = {
  { "_cast_"       , btDynamicsWorld__cast_ },
  { "__gc"         , btDynamicsWorld__btDynamicsWorld },
  { "stepSimulation", btDynamicsWorld_stepSimulation },
  { "debugDrawWorld", btDynamicsWorld_debugDrawWorld },
  { "addConstraint", btDynamicsWorld_addConstraint },
  { "removeConstraint", btDynamicsWorld_removeConstraint },
  { "addAction"    , btDynamicsWorld_addAction },
  { "removeAction" , btDynamicsWorld_removeAction },
  { "setGravity"   , btDynamicsWorld_setGravity },
  { "getGravity"   , btDynamicsWorld_getGravity },
  { "synchronizeMotionStates", btDynamicsWorld_synchronizeMotionStates },
  { "addRigidBody" , btDynamicsWorld_addRigidBody },
  { "removeRigidBody", btDynamicsWorld_removeRigidBody },
  { "setConstraintSolver", btDynamicsWorld_setConstraintSolver },
  { "getConstraintSolver", btDynamicsWorld_getConstraintSolver },
  { "getNumConstraints", btDynamicsWorld_getNumConstraints },
  { "getConstraint", btDynamicsWorld_getConstraint },
  { "getWorldType" , btDynamicsWorld_getWorldType },
  { "clearForces"  , btDynamicsWorld_clearForces },
  { "setInternalTickCallback", btDynamicsWorld_setInternalTickCallback },
  { "setWorldUserInfo", btDynamicsWorld_setWorldUserInfo },
  { "getWorldUserInfo", btDynamicsWorld_getWorldUserInfo },
  { "getSolverInfo", btDynamicsWorld_getSolverInfo },
  { "addVehicle"   , btDynamicsWorld_addVehicle },
  { "removeVehicle", btDynamicsWorld_removeVehicle },
  { "addCharacter" , btDynamicsWorld_addCharacter },
  { "removeCharacter", btDynamicsWorld_removeCharacter },
  { "setBroadphase", btDynamicsWorld_setBroadphase },
  { "getBroadphase", btDynamicsWorld_getBroadphase },
  { "getPairCache" , btDynamicsWorld_getPairCache },
  { "getDispatcher", btDynamicsWorld_getDispatcher },
  { "updateSingleAabb", btDynamicsWorld_updateSingleAabb },
  { "updateAabbs"  , btDynamicsWorld_updateAabbs },
  { "computeOverlappingPairs", btDynamicsWorld_computeOverlappingPairs },
  { "setDebugDrawer", btDynamicsWorld_setDebugDrawer },
  { "getDebugDrawer", btDynamicsWorld_getDebugDrawer },
  { "debugDrawObject", btDynamicsWorld_debugDrawObject },
  { "getNumCollisionObjects", btDynamicsWorld_getNumCollisionObjects },
  { "rayTest"      , btDynamicsWorld_rayTest },
  { "convexSweepTest", btDynamicsWorld_convexSweepTest },
  { "contactTest"  , btDynamicsWorld_contactTest },
  { "contactPairTest", btDynamicsWorld_contactPairTest },
  { "addCollisionObject", btDynamicsWorld_addCollisionObject },
  { "getCollisionObjectArray", btDynamicsWorld_getCollisionObjectArray },
  { "removeCollisionObject", btDynamicsWorld_removeCollisionObject },
  { "performDiscreteCollisionDetection", btDynamicsWorld_performDiscreteCollisionDetection },
  { "getDispatchInfo", btDynamicsWorld_getDispatchInfo },
  { "getForceUpdateAllAabbs", btDynamicsWorld_getForceUpdateAllAabbs },
  { "setForceUpdateAllAabbs", btDynamicsWorld_setForceUpdateAllAabbs },
  { "serialize"    , btDynamicsWorld_serialize },
  { "__tostring"   , btDynamicsWorld___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_bt_DynamicsWorld(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.DynamicsWorld");
  // <mt>

  // register member methods
  dub::fregister(L, btDynamicsWorld_member_methods);
  // setup meta-table
  dub::setup(L, "bt.DynamicsWorld");
  // <mt>
  return 1;
}
