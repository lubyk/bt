/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class btCollisionConfiguration
 *
 * This file has been generated by dub 2.2.1.
 */
#include "dub/dub.h"
#include "BulletCollision/CollisionDispatch/btCollisionConfiguration.h"


/** virtual btCollisionConfiguration::~btCollisionConfiguration()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionConfiguration.h:31
 */
static int btCollisionConfiguration__btCollisionConfiguration(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "bt.CollisionConfiguration"));
    if (userdata->gc) {
      btCollisionConfiguration *self = (btCollisionConfiguration *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btPoolAllocator* btCollisionConfiguration::getPersistentManifoldPool()=0
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionConfiguration.h:36
 */
static int btCollisionConfiguration_getPersistentManifoldPool(lua_State *L) {
  try {
    btCollisionConfiguration *self = *((btCollisionConfiguration **)dub::checksdata(L, 1, "bt.CollisionConfiguration"));
    btPoolAllocator *retval__ = self->getPersistentManifoldPool();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "PoolAllocator", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPersistentManifoldPool: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPersistentManifoldPool: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btPoolAllocator* btCollisionConfiguration::getCollisionAlgorithmPool()=0
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionConfiguration.h:38
 */
static int btCollisionConfiguration_getCollisionAlgorithmPool(lua_State *L) {
  try {
    btCollisionConfiguration *self = *((btCollisionConfiguration **)dub::checksdata(L, 1, "bt.CollisionConfiguration"));
    btPoolAllocator *retval__ = self->getCollisionAlgorithmPool();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "PoolAllocator", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCollisionAlgorithmPool: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCollisionAlgorithmPool: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btCollisionAlgorithmCreateFunc* btCollisionConfiguration::getCollisionAlgorithmCreateFunc(int proxyType0, int proxyType1)=0
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionConfiguration.h:41
 */
static int btCollisionConfiguration_getCollisionAlgorithmCreateFunc(lua_State *L) {
  try {
    btCollisionConfiguration *self = *((btCollisionConfiguration **)dub::checksdata(L, 1, "bt.CollisionConfiguration"));
    int proxyType0 = dub::checkint(L, 2);
    int proxyType1 = dub::checkint(L, 3);
    btCollisionAlgorithmCreateFunc *retval__ = self->getCollisionAlgorithmCreateFunc(proxyType0, proxyType1);
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "CollisionAlgorithmCreateFunc", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCollisionAlgorithmCreateFunc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCollisionAlgorithmCreateFunc: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int btCollisionConfiguration___tostring(lua_State *L) {
  btCollisionConfiguration *self = *((btCollisionConfiguration **)dub::checksdata_n(L, 1, "bt.CollisionConfiguration"));
  lua_pushfstring(L, "bt.CollisionConfiguration: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg btCollisionConfiguration_member_methods[] = {
  { "__gc"         , btCollisionConfiguration__btCollisionConfiguration },
  { "getPersistentManifoldPool", btCollisionConfiguration_getPersistentManifoldPool },
  { "getCollisionAlgorithmPool", btCollisionConfiguration_getCollisionAlgorithmPool },
  { "getCollisionAlgorithmCreateFunc", btCollisionConfiguration_getCollisionAlgorithmCreateFunc },
  { "__tostring"   , btCollisionConfiguration___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_bt_CollisionConfiguration(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.CollisionConfiguration");
  // <mt>

  // register member methods
  dub::fregister(L, btCollisionConfiguration_member_methods);
  // setup meta-table
  dub::setup(L, "bt.CollisionConfiguration");
  // <mt>
  return 1;
}
