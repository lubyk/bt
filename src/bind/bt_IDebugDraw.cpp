/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class btIDebugDraw
 *
 * This file has been generated by dub 2.2.1.
 */
#include "dub/dub.h"
#include "LinearMath/btIDebugDraw.h"


/** virtual btIDebugDraw::~btIDebugDraw()
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:53
 */
static int btIDebugDraw__btIDebugDraw(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "bt.IDebugDraw"));
    if (userdata->gc) {
      btIDebugDraw *self = (btIDebugDraw *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawLine(const btVector3 &from, const btVector3 &to, const btVector3 &color)=0
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:55
 */
static int btIDebugDraw_drawLine(lua_State *L) {
  try {
    btIDebugDraw *self = *((btIDebugDraw **)dub::checksdata(L, 1, "bt.IDebugDraw"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      btVector3 *from = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *to = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btVector3 *fromColor = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      btVector3 *toColor = *((btVector3 **)dub::checksdata(L, 5, "bt.Vector3"));
      self->drawLine(*from, *to, *fromColor, *toColor);
      return 0;
    } else {
      btVector3 *from = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *to = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btVector3 *color = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      self->drawLine(*from, *to, *color);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawLine: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawLine: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawSphere(btScalar radius, const btTransform &transform, const btVector3 &color)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:63
 */
static int btIDebugDraw_drawSphere(lua_State *L) {
  try {
    btIDebugDraw *self = *((btIDebugDraw **)dub::checksdata(L, 1, "bt.IDebugDraw"));
    int type__ = lua_type(L, 2);
    if (type__ == LUA_TNUMBER) {
      btScalar radius = dub::checknumber(L, 2);
      btTransform *transform = *((btTransform **)dub::checksdata(L, 3, "bt.Transform"));
      btVector3 *color = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      self->drawSphere(radius, *transform, *color);
      return 0;
    } else {
      btVector3 *p = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btScalar radius = dub::checknumber(L, 3);
      btVector3 *color = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      self->drawSphere(*p, radius, *color);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawSphere: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawSphere: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawTriangle(const btVector3 &v0, const btVector3 &v1, const btVector3 &v2, const btVector3 &, const btVector3 &, const btVector3 &, const btVector3 &color, btScalar alpha)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:86
 */
static int btIDebugDraw_drawTriangle(lua_State *L) {
  try {
    btIDebugDraw *self = *((btIDebugDraw **)dub::checksdata(L, 1, "bt.IDebugDraw"));
    int top__ = lua_gettop(L);
    if (top__ >= 9) {
      btVector3 *v0 = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *v1 = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btVector3 *v2 = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      btVector3 *p4 = *((btVector3 **)dub::checksdata(L, 5, "bt.Vector3"));
      btVector3 *p5 = *((btVector3 **)dub::checksdata(L, 6, "bt.Vector3"));
      btVector3 *p6 = *((btVector3 **)dub::checksdata(L, 7, "bt.Vector3"));
      btVector3 *color = *((btVector3 **)dub::checksdata(L, 8, "bt.Vector3"));
      btScalar alpha = dub::checknumber(L, 9);
      self->drawTriangle(*v0, *v1, *v2, *p4, *p5, *p6, *color, alpha);
      return 0;
    } else {
      btVector3 *v0 = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *v1 = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btVector3 *v2 = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      btVector3 *color = *((btVector3 **)dub::checksdata(L, 5, "bt.Vector3"));
      btScalar p5 = dub::checknumber(L, 6);
      self->drawTriangle(*v0, *v1, *v2, *color, p5);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawTriangle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawTriangle: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawContactPoint(const btVector3 &PointOnB, const btVector3 &normalOnB, btScalar distance, int lifeTime, const btVector3 &color)=0
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:97
 */
static int btIDebugDraw_drawContactPoint(lua_State *L) {
  try {
    btIDebugDraw *self = *((btIDebugDraw **)dub::checksdata(L, 1, "bt.IDebugDraw"));
    btVector3 *PointOnB = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    btVector3 *normalOnB = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    btScalar distance = dub::checknumber(L, 4);
    int lifeTime = dub::checkint(L, 5);
    btVector3 *color = *((btVector3 **)dub::checksdata(L, 6, "bt.Vector3"));
    self->drawContactPoint(*PointOnB, *normalOnB, distance, lifeTime, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawContactPoint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawContactPoint: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::reportErrorWarning(const char *warningString)=0
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:99
 */
static int btIDebugDraw_reportErrorWarning(lua_State *L) {
  try {
    btIDebugDraw *self = *((btIDebugDraw **)dub::checksdata(L, 1, "bt.IDebugDraw"));
    const char *warningString = dub::checkstring(L, 2);
    self->reportErrorWarning(warningString);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "reportErrorWarning: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "reportErrorWarning: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::draw3dText(const btVector3 &location, const char *textString)=0
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:101
 */
static int btIDebugDraw_draw3dText(lua_State *L) {
  try {
    btIDebugDraw *self = *((btIDebugDraw **)dub::checksdata(L, 1, "bt.IDebugDraw"));
    btVector3 *location = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    const char *textString = dub::checkstring(L, 3);
    self->draw3dText(*location, textString);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "draw3dText: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "draw3dText: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::setDebugMode(int debugMode)=0
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:103
 */
static int btIDebugDraw_setDebugMode(lua_State *L) {
  try {
    btIDebugDraw *self = *((btIDebugDraw **)dub::checksdata(L, 1, "bt.IDebugDraw"));
    int debugMode = dub::checkint(L, 2);
    self->setDebugMode(debugMode);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setDebugMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setDebugMode: Unknown exception");
  }
  return dub::error(L);
}

/** virtual int btIDebugDraw::getDebugMode() const =0
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:105
 */
static int btIDebugDraw_getDebugMode(lua_State *L) {
  try {
    btIDebugDraw *self = *((btIDebugDraw **)dub::checksdata(L, 1, "bt.IDebugDraw"));
    lua_pushnumber(L, self->getDebugMode());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getDebugMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getDebugMode: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawAabb(const btVector3 &from, const btVector3 &to, const btVector3 &color)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:107
 */
static int btIDebugDraw_drawAabb(lua_State *L) {
  try {
    btIDebugDraw *self = *((btIDebugDraw **)dub::checksdata(L, 1, "bt.IDebugDraw"));
    btVector3 *from = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    btVector3 *to = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    btVector3 *color = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
    self->drawAabb(*from, *to, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawAabb: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawAabb: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawTransform(const btTransform &transform, btScalar orthoLen)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:136
 */
static int btIDebugDraw_drawTransform(lua_State *L) {
  try {
    btIDebugDraw *self = *((btIDebugDraw **)dub::checksdata(L, 1, "bt.IDebugDraw"));
    btTransform *transform = *((btTransform **)dub::checksdata(L, 2, "bt.Transform"));
    btScalar orthoLen = dub::checknumber(L, 3);
    self->drawTransform(*transform, orthoLen);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawTransform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawTransform: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawArc(const btVector3 &center, const btVector3 &normal, const btVector3 &axis, btScalar radiusA, btScalar radiusB, btScalar minAngle, btScalar maxAngle, const btVector3 &color, bool drawSect, btScalar stepDegrees=btScalar(10.f))
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:144
 */
static int btIDebugDraw_drawArc(lua_State *L) {
  try {
    btIDebugDraw *self = *((btIDebugDraw **)dub::checksdata(L, 1, "bt.IDebugDraw"));
    int top__ = lua_gettop(L);
    if (top__ >= 11) {
      btVector3 *center = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *normal = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btVector3 *axis = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      btScalar radiusA = dub::checknumber(L, 5);
      btScalar radiusB = dub::checknumber(L, 6);
      btScalar minAngle = dub::checknumber(L, 7);
      btScalar maxAngle = dub::checknumber(L, 8);
      btVector3 *color = *((btVector3 **)dub::checksdata(L, 9, "bt.Vector3"));
      bool drawSect = dub::checkboolean(L, 10);
      btScalar stepDegrees = dub::checknumber(L, 11);
      self->drawArc(*center, *normal, *axis, radiusA, radiusB, minAngle, maxAngle, *color, drawSect, stepDegrees);
      return 0;
    } else {
      btVector3 *center = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *normal = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btVector3 *axis = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      btScalar radiusA = dub::checknumber(L, 5);
      btScalar radiusB = dub::checknumber(L, 6);
      btScalar minAngle = dub::checknumber(L, 7);
      btScalar maxAngle = dub::checknumber(L, 8);
      btVector3 *color = *((btVector3 **)dub::checksdata(L, 9, "bt.Vector3"));
      bool drawSect = dub::checkboolean(L, 10);
      self->drawArc(*center, *normal, *axis, radiusA, radiusB, minAngle, maxAngle, *color, drawSect);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawArc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawArc: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawSpherePatch(const btVector3 &center, const btVector3 &up, const btVector3 &axis, btScalar radius, btScalar minTh, btScalar maxTh, btScalar minPs, btScalar maxPs, const btVector3 &color, btScalar stepDegrees=btScalar(10.f), bool drawCenter=true)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:169
 */
static int btIDebugDraw_drawSpherePatch(lua_State *L) {
  try {
    btIDebugDraw *self = *((btIDebugDraw **)dub::checksdata(L, 1, "bt.IDebugDraw"));
    int top__ = lua_gettop(L);
    if (top__ >= 12) {
      btVector3 *center = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *up = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btVector3 *axis = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      btScalar radius = dub::checknumber(L, 5);
      btScalar minTh = dub::checknumber(L, 6);
      btScalar maxTh = dub::checknumber(L, 7);
      btScalar minPs = dub::checknumber(L, 8);
      btScalar maxPs = dub::checknumber(L, 9);
      btVector3 *color = *((btVector3 **)dub::checksdata(L, 10, "bt.Vector3"));
      btScalar stepDegrees = dub::checknumber(L, 11);
      bool drawCenter = dub::checkboolean(L, 12);
      self->drawSpherePatch(*center, *up, *axis, radius, minTh, maxTh, minPs, maxPs, *color, stepDegrees, drawCenter);
      return 0;
    } else if (top__ >= 11) {
      btVector3 *center = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *up = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btVector3 *axis = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      btScalar radius = dub::checknumber(L, 5);
      btScalar minTh = dub::checknumber(L, 6);
      btScalar maxTh = dub::checknumber(L, 7);
      btScalar minPs = dub::checknumber(L, 8);
      btScalar maxPs = dub::checknumber(L, 9);
      btVector3 *color = *((btVector3 **)dub::checksdata(L, 10, "bt.Vector3"));
      btScalar stepDegrees = dub::checknumber(L, 11);
      self->drawSpherePatch(*center, *up, *axis, radius, minTh, maxTh, minPs, maxPs, *color, stepDegrees);
      return 0;
    } else {
      btVector3 *center = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *up = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btVector3 *axis = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      btScalar radius = dub::checknumber(L, 5);
      btScalar minTh = dub::checknumber(L, 6);
      btScalar maxTh = dub::checknumber(L, 7);
      btScalar minPs = dub::checknumber(L, 8);
      btScalar maxPs = dub::checknumber(L, 9);
      btVector3 *color = *((btVector3 **)dub::checksdata(L, 10, "bt.Vector3"));
      self->drawSpherePatch(*center, *up, *axis, radius, minTh, maxTh, minPs, maxPs, *color);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawSpherePatch: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawSpherePatch: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawBox(const btVector3 &bbMin, const btVector3 &bbMax, const btVector3 &color)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:276
 */
static int btIDebugDraw_drawBox(lua_State *L) {
  try {
    btIDebugDraw *self = *((btIDebugDraw **)dub::checksdata(L, 1, "bt.IDebugDraw"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      btVector3 *bbMin = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *bbMax = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btTransform *trans = *((btTransform **)dub::checksdata(L, 4, "bt.Transform"));
      btVector3 *color = *((btVector3 **)dub::checksdata(L, 5, "bt.Vector3"));
      self->drawBox(*bbMin, *bbMax, *trans, *color);
      return 0;
    } else {
      btVector3 *bbMin = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *bbMax = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btVector3 *color = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      self->drawBox(*bbMin, *bbMax, *color);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawBox: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawBox: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawCapsule(btScalar radius, btScalar halfHeight, int upAxis, const btTransform &transform, const btVector3 &color)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:307
 */
static int btIDebugDraw_drawCapsule(lua_State *L) {
  try {
    btIDebugDraw *self = *((btIDebugDraw **)dub::checksdata(L, 1, "bt.IDebugDraw"));
    btScalar radius = dub::checknumber(L, 2);
    btScalar halfHeight = dub::checknumber(L, 3);
    int upAxis = dub::checkint(L, 4);
    btTransform *transform = *((btTransform **)dub::checksdata(L, 5, "bt.Transform"));
    btVector3 *color = *((btVector3 **)dub::checksdata(L, 6, "bt.Vector3"));
    self->drawCapsule(radius, halfHeight, upAxis, *transform, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawCapsule: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawCapsule: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawCylinder(btScalar radius, btScalar halfHeight, int upAxis, const btTransform &transform, const btVector3 &color)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:365
 */
static int btIDebugDraw_drawCylinder(lua_State *L) {
  try {
    btIDebugDraw *self = *((btIDebugDraw **)dub::checksdata(L, 1, "bt.IDebugDraw"));
    btScalar radius = dub::checknumber(L, 2);
    btScalar halfHeight = dub::checknumber(L, 3);
    int upAxis = dub::checkint(L, 4);
    btTransform *transform = *((btTransform **)dub::checksdata(L, 5, "bt.Transform"));
    btVector3 *color = *((btVector3 **)dub::checksdata(L, 6, "bt.Vector3"));
    self->drawCylinder(radius, halfHeight, upAxis, *transform, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawCylinder: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawCylinder: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawCone(btScalar radius, btScalar height, int upAxis, const btTransform &transform, const btVector3 &color)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:391
 */
static int btIDebugDraw_drawCone(lua_State *L) {
  try {
    btIDebugDraw *self = *((btIDebugDraw **)dub::checksdata(L, 1, "bt.IDebugDraw"));
    btScalar radius = dub::checknumber(L, 2);
    btScalar height = dub::checknumber(L, 3);
    int upAxis = dub::checkint(L, 4);
    btTransform *transform = *((btTransform **)dub::checksdata(L, 5, "bt.Transform"));
    btVector3 *color = *((btVector3 **)dub::checksdata(L, 6, "bt.Vector3"));
    self->drawCone(radius, height, upAxis, *transform, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawCone: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawCone: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btIDebugDraw::drawPlane(const btVector3 &planeNormal, btScalar planeConst, const btTransform &transform, const btVector3 &color)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:428
 */
static int btIDebugDraw_drawPlane(lua_State *L) {
  try {
    btIDebugDraw *self = *((btIDebugDraw **)dub::checksdata(L, 1, "bt.IDebugDraw"));
    btVector3 *planeNormal = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    btScalar planeConst = dub::checknumber(L, 3);
    btTransform *transform = *((btTransform **)dub::checksdata(L, 4, "bt.Transform"));
    btVector3 *color = *((btVector3 **)dub::checksdata(L, 5, "bt.Vector3"));
    self->drawPlane(*planeNormal, planeConst, *transform, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawPlane: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawPlane: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int btIDebugDraw___tostring(lua_State *L) {
  btIDebugDraw *self = *((btIDebugDraw **)dub::checksdata_n(L, 1, "bt.IDebugDraw"));
  lua_pushfstring(L, "bt.IDebugDraw: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg btIDebugDraw_member_methods[] = {
  { "__gc"         , btIDebugDraw__btIDebugDraw },
  { "drawLine"     , btIDebugDraw_drawLine },
  { "drawSphere"   , btIDebugDraw_drawSphere },
  { "drawTriangle" , btIDebugDraw_drawTriangle },
  { "drawContactPoint", btIDebugDraw_drawContactPoint },
  { "reportErrorWarning", btIDebugDraw_reportErrorWarning },
  { "draw3dText"   , btIDebugDraw_draw3dText },
  { "setDebugMode" , btIDebugDraw_setDebugMode },
  { "getDebugMode" , btIDebugDraw_getDebugMode },
  { "drawAabb"     , btIDebugDraw_drawAabb },
  { "drawTransform", btIDebugDraw_drawTransform },
  { "drawArc"      , btIDebugDraw_drawArc },
  { "drawSpherePatch", btIDebugDraw_drawSpherePatch },
  { "drawBox"      , btIDebugDraw_drawBox },
  { "drawCapsule"  , btIDebugDraw_drawCapsule },
  { "drawCylinder" , btIDebugDraw_drawCylinder },
  { "drawCone"     , btIDebugDraw_drawCone },
  { "drawPlane"    , btIDebugDraw_drawPlane },
  { "__tostring"   , btIDebugDraw___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};

// --=============================================== CONSTANTS
static const struct dub::const_Reg btIDebugDraw_const[] = {
  { "DBG_NoDebug"  , btIDebugDraw::DBG_NoDebug },
  { "DBG_DrawWireframe", btIDebugDraw::DBG_DrawWireframe },
  { "DBG_DrawAabb" , btIDebugDraw::DBG_DrawAabb },
  { "DBG_DrawFeaturesText", btIDebugDraw::DBG_DrawFeaturesText },
  { "DBG_DrawContactPoints", btIDebugDraw::DBG_DrawContactPoints },
  { "DBG_NoDeactivation", btIDebugDraw::DBG_NoDeactivation },
  { "DBG_NoHelpText", btIDebugDraw::DBG_NoHelpText },
  { "DBG_DrawText" , btIDebugDraw::DBG_DrawText },
  { "DBG_ProfileTimings", btIDebugDraw::DBG_ProfileTimings },
  { "DBG_EnableSatComparison", btIDebugDraw::DBG_EnableSatComparison },
  { "DBG_DisableBulletLCP", btIDebugDraw::DBG_DisableBulletLCP },
  { "DBG_EnableCCD", btIDebugDraw::DBG_EnableCCD },
  { "DBG_DrawConstraints", btIDebugDraw::DBG_DrawConstraints },
  { "DBG_DrawConstraintLimits", btIDebugDraw::DBG_DrawConstraintLimits },
  { "DBG_FastWireframe", btIDebugDraw::DBG_FastWireframe },
  { "DBG_DrawNormals", btIDebugDraw::DBG_DrawNormals },
  { "DBG_MAX_DEBUG_DRAW_MODE", btIDebugDraw::DBG_MAX_DEBUG_DRAW_MODE },
  { NULL, 0},
};

extern "C" int luaopen_bt_IDebugDraw(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.IDebugDraw");
  // <mt>
  // register class constants
  dub::register_const(L, btIDebugDraw_const);

  // register member methods
  dub::fregister(L, btIDebugDraw_member_methods);
  // setup meta-table
  dub::setup(L, "bt.IDebugDraw");
  // <mt>
  return 1;
}
