/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class btDiscreteDynamicsWorld
 *
 * This file has been generated by dub 2.2.1.
 */
#include "dub/dub.h"
#include "BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h"


/** Cast (class_name)
 * 
 */
static int btDiscreteDynamicsWorld__cast_(lua_State *L) {

  btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata_n(L, 1, "bt.DiscreteDynamicsWorld"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub::hash(key, 3);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "bt.DynamicsWorld")) break;
      *retval__ = static_cast<btDynamicsWorld *>(self);
      return 1;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "bt.CollisionWorld")) break;
      *retval__ = static_cast<btCollisionWorld *>(self);
      return 1;
    }
  }
  return 0;
}

/** btDiscreteDynamicsWorld::btDiscreteDynamicsWorld(btDispatcher *dispatcher, btBroadphaseInterface *pairCache, btConstraintSolver *constraintSolver, btCollisionConfiguration *collisionConfiguration)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:102
 */
static int btDiscreteDynamicsWorld_btDiscreteDynamicsWorld(lua_State *L) {
  try {
    btDispatcher *dispatcher = *((btDispatcher **)dub::checksdata(L, 1, "bt.Dispatcher"));
    btBroadphaseInterface *pairCache = *((btBroadphaseInterface **)dub::checksdata(L, 2, "bt.BroadphaseInterface"));
    btConstraintSolver *constraintSolver = *((btConstraintSolver **)dub::checksdata(L, 3, "bt.ConstraintSolver"));
    btCollisionConfiguration *collisionConfiguration = *((btCollisionConfiguration **)dub::checksdata(L, 4, "bt.CollisionConfiguration"));
    btDiscreteDynamicsWorld *retval__ = new btDiscreteDynamicsWorld(dispatcher, pairCache, constraintSolver, collisionConfiguration);
    dub::pushudata(L, retval__, "bt.DiscreteDynamicsWorld", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btDiscreteDynamicsWorld::~btDiscreteDynamicsWorld()
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:104
 */
static int btDiscreteDynamicsWorld__btDiscreteDynamicsWorld(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "bt.DiscreteDynamicsWorld"));
    if (userdata->gc) {
      btDiscreteDynamicsWorld *self = (btDiscreteDynamicsWorld *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** virtual int btDiscreteDynamicsWorld::stepSimulation(btScalar timeStep, int maxSubSteps=1, btScalar fixedTimeStep=btScalar(1.)/btScalar(60.))
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:107
 */
static int btDiscreteDynamicsWorld_stepSimulation(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      btScalar timeStep = dub::checknumber(L, 2);
      int maxSubSteps = dub::checkint(L, 3);
      btScalar fixedTimeStep = dub::checknumber(L, 4);
      lua_pushnumber(L, self->stepSimulation(timeStep, maxSubSteps, fixedTimeStep));
      return 1;
    } else if (top__ >= 3) {
      btScalar timeStep = dub::checknumber(L, 2);
      int maxSubSteps = dub::checkint(L, 3);
      lua_pushnumber(L, self->stepSimulation(timeStep, maxSubSteps));
      return 1;
    } else {
      btScalar timeStep = dub::checknumber(L, 2);
      lua_pushnumber(L, self->stepSimulation(timeStep));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "stepSimulation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "stepSimulation: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::synchronizeMotionStates()
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:110
 */
static int btDiscreteDynamicsWorld_synchronizeMotionStates(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    self->synchronizeMotionStates();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "synchronizeMotionStates: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "synchronizeMotionStates: Unknown exception");
  }
  return dub::error(L);
}

/** void btDiscreteDynamicsWorld::synchronizeSingleMotionState(btRigidBody *body)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:113
 */
static int btDiscreteDynamicsWorld_synchronizeSingleMotionState(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btRigidBody *body = *((btRigidBody **)dub::checksdata(L, 2, "bt.RigidBody"));
    self->synchronizeSingleMotionState(body);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "synchronizeSingleMotionState: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "synchronizeSingleMotionState: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::addConstraint(btTypedConstraint *constraint, bool disableCollisionsBetweenLinkedBodies=false)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:115
 */
static int btDiscreteDynamicsWorld_addConstraint(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      btTypedConstraint *constraint = *((btTypedConstraint **)dub::checksdata(L, 2, "bt.TypedConstraint"));
      bool disableCollisionsBetweenLinkedBodies = dub::checkboolean(L, 3);
      self->addConstraint(constraint, disableCollisionsBetweenLinkedBodies);
      return 0;
    } else {
      btTypedConstraint *constraint = *((btTypedConstraint **)dub::checksdata(L, 2, "bt.TypedConstraint"));
      self->addConstraint(constraint);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addConstraint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addConstraint: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::removeConstraint(btTypedConstraint *constraint)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:117
 */
static int btDiscreteDynamicsWorld_removeConstraint(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btTypedConstraint *constraint = *((btTypedConstraint **)dub::checksdata(L, 2, "bt.TypedConstraint"));
    self->removeConstraint(constraint);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeConstraint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeConstraint: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::addAction(btActionInterface *)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:119
 */
static int btDiscreteDynamicsWorld_addAction(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btActionInterface *p1 = *((btActionInterface **)dub::checksdata(L, 2, "ActionInterface"));
    self->addAction(p1);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addAction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addAction: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::removeAction(btActionInterface *)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:121
 */
static int btDiscreteDynamicsWorld_removeAction(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btActionInterface *p1 = *((btActionInterface **)dub::checksdata(L, 2, "ActionInterface"));
    self->removeAction(p1);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeAction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeAction: Unknown exception");
  }
  return dub::error(L);
}

/** btSimulationIslandManager* btDiscreteDynamicsWorld::getSimulationIslandManager()
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:123
 */
static int btDiscreteDynamicsWorld_getSimulationIslandManager(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btSimulationIslandManager *retval__ = self->getSimulationIslandManager();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "SimulationIslandManager", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSimulationIslandManager: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSimulationIslandManager: Unknown exception");
  }
  return dub::error(L);
}

/** btCollisionWorld* btDiscreteDynamicsWorld::getCollisionWorld()
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:133
 */
static int btDiscreteDynamicsWorld_getCollisionWorld(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btCollisionWorld *retval__ = self->getCollisionWorld();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "bt.CollisionWorld", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCollisionWorld: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCollisionWorld: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::setGravity(const btVector3 &gravity)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:138
 */
static int btDiscreteDynamicsWorld_setGravity(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btVector3 *gravity = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->setGravity(*gravity);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setGravity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setGravity: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btVector3 btDiscreteDynamicsWorld::getGravity() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:140
 */
static int btDiscreteDynamicsWorld_getGravity(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    dub::pushudata(L, new btVector3(self->getGravity()), "bt.Vector3", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getGravity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getGravity: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::addCollisionObject(btCollisionObject *collisionObject, short int collisionFilterGroup=btBroadphaseProxy::StaticFilter, short int collisionFilterMask=btBroadphaseProxy::AllFilter^btBroadphaseProxy::StaticFilter)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:142
 */
static int btDiscreteDynamicsWorld_addCollisionObject(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      btCollisionObject *collisionObject = *((btCollisionObject **)dub::checksdata(L, 2, "bt.CollisionObject"));
      short int *collisionFilterGroup = *((short int **)dub::checksdata(L, 3, "short int"));
      short int *collisionFilterMask = *((short int **)dub::checksdata(L, 4, "short int"));
      self->addCollisionObject(collisionObject, *collisionFilterGroup, *collisionFilterMask);
      return 0;
    } else if (top__ >= 3) {
      btCollisionObject *collisionObject = *((btCollisionObject **)dub::checksdata(L, 2, "bt.CollisionObject"));
      short int *collisionFilterGroup = *((short int **)dub::checksdata(L, 3, "short int"));
      self->addCollisionObject(collisionObject, *collisionFilterGroup);
      return 0;
    } else {
      btCollisionObject *collisionObject = *((btCollisionObject **)dub::checksdata(L, 2, "bt.CollisionObject"));
      self->addCollisionObject(collisionObject);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addCollisionObject: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addCollisionObject: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::addRigidBody(btRigidBody *body)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:144
 */
static int btDiscreteDynamicsWorld_addRigidBody(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      btRigidBody *body = *((btRigidBody **)dub::checksdata(L, 2, "bt.RigidBody"));
      short group = dub::checkint(L, 3);
      short mask = dub::checkint(L, 4);
      self->addRigidBody(body, group, mask);
      return 0;
    } else {
      btRigidBody *body = *((btRigidBody **)dub::checksdata(L, 2, "bt.RigidBody"));
      self->addRigidBody(body);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addRigidBody: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addRigidBody: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::removeRigidBody(btRigidBody *body)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:148
 */
static int btDiscreteDynamicsWorld_removeRigidBody(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btRigidBody *body = *((btRigidBody **)dub::checksdata(L, 2, "bt.RigidBody"));
    self->removeRigidBody(body);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeRigidBody: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeRigidBody: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::removeCollisionObject(btCollisionObject *collisionObject)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:151
 */
static int btDiscreteDynamicsWorld_removeCollisionObject(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btCollisionObject *collisionObject = *((btCollisionObject **)dub::checksdata(L, 2, "bt.CollisionObject"));
    self->removeCollisionObject(collisionObject);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeCollisionObject: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeCollisionObject: Unknown exception");
  }
  return dub::error(L);
}

/** void btDiscreteDynamicsWorld::debugDrawConstraint(btTypedConstraint *constraint)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:154
 */
static int btDiscreteDynamicsWorld_debugDrawConstraint(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btTypedConstraint *constraint = *((btTypedConstraint **)dub::checksdata(L, 2, "bt.TypedConstraint"));
    self->debugDrawConstraint(constraint);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "debugDrawConstraint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "debugDrawConstraint: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::debugDrawWorld()
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:156
 */
static int btDiscreteDynamicsWorld_debugDrawWorld(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    self->debugDrawWorld();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "debugDrawWorld: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "debugDrawWorld: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::setConstraintSolver(btConstraintSolver *solver)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:158
 */
static int btDiscreteDynamicsWorld_setConstraintSolver(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btConstraintSolver *solver = *((btConstraintSolver **)dub::checksdata(L, 2, "bt.ConstraintSolver"));
    self->setConstraintSolver(solver);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setConstraintSolver: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setConstraintSolver: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btConstraintSolver* btDiscreteDynamicsWorld::getConstraintSolver()
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:160
 */
static int btDiscreteDynamicsWorld_getConstraintSolver(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btConstraintSolver *retval__ = self->getConstraintSolver();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "bt.ConstraintSolver", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getConstraintSolver: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getConstraintSolver: Unknown exception");
  }
  return dub::error(L);
}

/** virtual int btDiscreteDynamicsWorld::getNumConstraints() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:162
 */
static int btDiscreteDynamicsWorld_getNumConstraints(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    lua_pushnumber(L, self->getNumConstraints());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNumConstraints: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNumConstraints: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btTypedConstraint* btDiscreteDynamicsWorld::getConstraint(int index)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:164
 */
static int btDiscreteDynamicsWorld_getConstraint(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    int index = dub::checkint(L, 2);
    btTypedConstraint *retval__ = self->getConstraint(index);
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "bt.TypedConstraint", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getConstraint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getConstraint: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btDynamicsWorldType btDiscreteDynamicsWorld::getWorldType() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:169
 */
static int btDiscreteDynamicsWorld_getWorldType(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    lua_pushnumber(L, self->getWorldType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getWorldType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getWorldType: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::clearForces()
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:175
 */
static int btDiscreteDynamicsWorld_clearForces(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    self->clearForces();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clearForces: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clearForces: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::applyGravity()
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:178
 */
static int btDiscreteDynamicsWorld_applyGravity(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    self->applyGravity();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "applyGravity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "applyGravity: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::setNumTasks(int numTasks)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:180
 */
static int btDiscreteDynamicsWorld_setNumTasks(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    int numTasks = dub::checkint(L, 2);
    self->setNumTasks(numTasks);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setNumTasks: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setNumTasks: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::updateVehicles(btScalar timeStep)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:186
 */
static int btDiscreteDynamicsWorld_updateVehicles(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btScalar timeStep = dub::checknumber(L, 2);
    self->updateVehicles(timeStep);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "updateVehicles: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "updateVehicles: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::addVehicle(btActionInterface *vehicle)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:192
 */
static int btDiscreteDynamicsWorld_addVehicle(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btActionInterface *vehicle = *((btActionInterface **)dub::checksdata(L, 2, "ActionInterface"));
    self->addVehicle(vehicle);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addVehicle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addVehicle: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::removeVehicle(btActionInterface *vehicle)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:194
 */
static int btDiscreteDynamicsWorld_removeVehicle(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btActionInterface *vehicle = *((btActionInterface **)dub::checksdata(L, 2, "ActionInterface"));
    self->removeVehicle(vehicle);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeVehicle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeVehicle: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::addCharacter(btActionInterface *character)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:196
 */
static int btDiscreteDynamicsWorld_addCharacter(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btActionInterface *character = *((btActionInterface **)dub::checksdata(L, 2, "ActionInterface"));
    self->addCharacter(character);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addCharacter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addCharacter: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::removeCharacter(btActionInterface *character)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:198
 */
static int btDiscreteDynamicsWorld_removeCharacter(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btActionInterface *character = *((btActionInterface **)dub::checksdata(L, 2, "ActionInterface"));
    self->removeCharacter(character);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeCharacter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeCharacter: Unknown exception");
  }
  return dub::error(L);
}

/** void btDiscreteDynamicsWorld::setSynchronizeAllMotionStates(bool synchronizeAll)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:200
 */
static int btDiscreteDynamicsWorld_setSynchronizeAllMotionStates(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    bool synchronizeAll = dub::checkboolean(L, 2);
    self->setSynchronizeAllMotionStates(synchronizeAll);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setSynchronizeAllMotionStates: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setSynchronizeAllMotionStates: Unknown exception");
  }
  return dub::error(L);
}

/** bool btDiscreteDynamicsWorld::getSynchronizeAllMotionStates() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:204
 */
static int btDiscreteDynamicsWorld_getSynchronizeAllMotionStates(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    lua_pushboolean(L, self->getSynchronizeAllMotionStates());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSynchronizeAllMotionStates: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSynchronizeAllMotionStates: Unknown exception");
  }
  return dub::error(L);
}

/** void btDiscreteDynamicsWorld::setApplySpeculativeContactRestitution(bool enable)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:209
 */
static int btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    bool enable = dub::checkboolean(L, 2);
    self->setApplySpeculativeContactRestitution(enable);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setApplySpeculativeContactRestitution: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setApplySpeculativeContactRestitution: Unknown exception");
  }
  return dub::error(L);
}

/** bool btDiscreteDynamicsWorld::getApplySpeculativeContactRestitution() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:214
 */
static int btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    lua_pushboolean(L, self->getApplySpeculativeContactRestitution());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getApplySpeculativeContactRestitution: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getApplySpeculativeContactRestitution: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDiscreteDynamicsWorld::serialize(btSerializer *serializer)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:220
 */
static int btDiscreteDynamicsWorld_serialize(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btSerializer *serializer = *((btSerializer **)dub::checksdata(L, 2, "Serializer"));
    self->serialize(serializer);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "serialize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "serialize: Unknown exception");
  }
  return dub::error(L);
}

/** void btDiscreteDynamicsWorld::setLatencyMotionStateInterpolation(bool latencyInterpolation)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:224
 */
static int btDiscreteDynamicsWorld_setLatencyMotionStateInterpolation(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    bool latencyInterpolation = dub::checkboolean(L, 2);
    self->setLatencyMotionStateInterpolation(latencyInterpolation);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setLatencyMotionStateInterpolation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setLatencyMotionStateInterpolation: Unknown exception");
  }
  return dub::error(L);
}

/** bool btDiscreteDynamicsWorld::getLatencyMotionStateInterpolation() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h:228
 */
static int btDiscreteDynamicsWorld_getLatencyMotionStateInterpolation(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    lua_pushboolean(L, self->getLatencyMotionStateInterpolation());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLatencyMotionStateInterpolation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLatencyMotionStateInterpolation: Unknown exception");
  }
  return dub::error(L);
}

/** void btDynamicsWorld::setInternalTickCallback(btInternalTickCallback cb, void *worldUserInfo=0, bool isPreTick=false)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:110
 */
static int btDiscreteDynamicsWorld_setInternalTickCallback(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      btInternalTickCallback *cb = *((btInternalTickCallback **)dub::checksdata(L, 2, "InternalTickCallback"));
      void *worldUserInfo = *((void **)dub::checksdata(L, 3, "void"));
      bool isPreTick = dub::checkboolean(L, 4);
      self->setInternalTickCallback(*cb, worldUserInfo, isPreTick);
      return 0;
    } else if (top__ >= 3) {
      btInternalTickCallback *cb = *((btInternalTickCallback **)dub::checksdata(L, 2, "InternalTickCallback"));
      void *worldUserInfo = *((void **)dub::checksdata(L, 3, "void"));
      self->setInternalTickCallback(*cb, worldUserInfo);
      return 0;
    } else {
      btInternalTickCallback *cb = *((btInternalTickCallback **)dub::checksdata(L, 2, "InternalTickCallback"));
      self->setInternalTickCallback(*cb);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setInternalTickCallback: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setInternalTickCallback: Unknown exception");
  }
  return dub::error(L);
}

/** void btDynamicsWorld::setWorldUserInfo(void *worldUserInfo)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:122
 */
static int btDiscreteDynamicsWorld_setWorldUserInfo(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    void *worldUserInfo = *((void **)dub::checksdata(L, 2, "void"));
    self->setWorldUserInfo(worldUserInfo);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setWorldUserInfo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setWorldUserInfo: Unknown exception");
  }
  return dub::error(L);
}

/** void* btDynamicsWorld::getWorldUserInfo() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:127
 */
static int btDiscreteDynamicsWorld_getWorldUserInfo(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    self->getWorldUserInfo();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getWorldUserInfo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getWorldUserInfo: Unknown exception");
  }
  return dub::error(L);
}

/** btContactSolverInfo& btDynamicsWorld::getSolverInfo()
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:132
 */
static int btDiscreteDynamicsWorld_getSolverInfo(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    dub::pushudata(L, &self->getSolverInfo(), "ContactSolverInfo", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSolverInfo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSolverInfo: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionWorld::setBroadphase(btBroadphaseInterface *pairCache)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:117
 */
static int btDiscreteDynamicsWorld_setBroadphase(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btBroadphaseInterface *pairCache = *((btBroadphaseInterface **)dub::checksdata(L, 2, "bt.BroadphaseInterface"));
    self->setBroadphase(pairCache);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setBroadphase: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setBroadphase: Unknown exception");
  }
  return dub::error(L);
}

/** const btBroadphaseInterface* btCollisionWorld::getBroadphase() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:122
 */
static int btDiscreteDynamicsWorld_getBroadphase(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    const btBroadphaseInterface *retval__ = self->getBroadphase();
    if (!retval__) return 0;
    dub::pushudata(L, const_cast<btBroadphaseInterface*>(retval__), "bt.BroadphaseInterface", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getBroadphase: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getBroadphase: Unknown exception");
  }
  return dub::error(L);
}

/** btOverlappingPairCache* btCollisionWorld::getPairCache()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:132
 */
static int btDiscreteDynamicsWorld_getPairCache(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btOverlappingPairCache *retval__ = self->getPairCache();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "OverlappingPairCache", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPairCache: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPairCache: Unknown exception");
  }
  return dub::error(L);
}

/** btDispatcher* btCollisionWorld::getDispatcher()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:138
 */
static int btDiscreteDynamicsWorld_getDispatcher(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btDispatcher *retval__ = self->getDispatcher();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "bt.Dispatcher", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getDispatcher: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getDispatcher: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionWorld::updateSingleAabb(btCollisionObject *colObj)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:148
 */
static int btDiscreteDynamicsWorld_updateSingleAabb(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btCollisionObject *colObj = *((btCollisionObject **)dub::checksdata(L, 2, "bt.CollisionObject"));
    self->updateSingleAabb(colObj);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "updateSingleAabb: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "updateSingleAabb: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionWorld::updateAabbs()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:150
 */
static int btDiscreteDynamicsWorld_updateAabbs(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    self->updateAabbs();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "updateAabbs: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "updateAabbs: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionWorld::computeOverlappingPairs()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:154
 */
static int btDiscreteDynamicsWorld_computeOverlappingPairs(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    self->computeOverlappingPairs();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "computeOverlappingPairs: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "computeOverlappingPairs: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionWorld::setDebugDrawer(btIDebugDraw *debugDrawer)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:157
 */
static int btDiscreteDynamicsWorld_setDebugDrawer(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btIDebugDraw *debugDrawer = *((btIDebugDraw **)dub::checksdata(L, 2, "bt.IDebugDraw"));
    self->setDebugDrawer(debugDrawer);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setDebugDrawer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setDebugDrawer: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btIDebugDraw* btCollisionWorld::getDebugDrawer()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:162
 */
static int btDiscreteDynamicsWorld_getDebugDrawer(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btIDebugDraw *retval__ = self->getDebugDrawer();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "bt.IDebugDraw", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getDebugDrawer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getDebugDrawer: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionWorld::debugDrawObject(const btTransform &worldTransform, const btCollisionShape *shape, const btVector3 &color)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:169
 */
static int btDiscreteDynamicsWorld_debugDrawObject(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btTransform *worldTransform = *((btTransform **)dub::checksdata(L, 2, "bt.Transform"));
    btCollisionShape *shape = *((btCollisionShape **)dub::checksdata(L, 3, "bt.CollisionShape"));
    btVector3 *color = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
    self->debugDrawObject(*worldTransform, shape, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "debugDrawObject: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "debugDrawObject: Unknown exception");
  }
  return dub::error(L);
}

/** int btCollisionWorld::getNumCollisionObjects() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:438
 */
static int btDiscreteDynamicsWorld_getNumCollisionObjects(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    lua_pushnumber(L, self->getNumCollisionObjects());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNumCollisionObjects: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNumCollisionObjects: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionWorld::rayTest(const btVector3 &rayFromWorld, const btVector3 &rayToWorld, RayResultCallback &resultCallback) const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:445
 */
static int btDiscreteDynamicsWorld_rayTest(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btVector3 *rayFromWorld = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    btVector3 *rayToWorld = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    btCollisionWorld::RayResultCallback *resultCallback = *((btCollisionWorld::RayResultCallback **)dub::checksdata(L, 4, "bt.CollisionWorld.RayResultCallback"));
    self->rayTest(*rayFromWorld, *rayToWorld, *resultCallback);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "rayTest: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rayTest: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionWorld::convexSweepTest(const btConvexShape *castShape, const btTransform &from, const btTransform &to, ConvexResultCallback &resultCallback, btScalar allowedCcdPenetration=btScalar(0.)) const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:449
 */
static int btDiscreteDynamicsWorld_convexSweepTest(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      btConvexShape *castShape = *((btConvexShape **)dub::checksdata(L, 2, "bt.ConvexShape"));
      btTransform *from = *((btTransform **)dub::checksdata(L, 3, "bt.Transform"));
      btTransform *to = *((btTransform **)dub::checksdata(L, 4, "bt.Transform"));
      btCollisionWorld::ConvexResultCallback *resultCallback = *((btCollisionWorld::ConvexResultCallback **)dub::checksdata(L, 5, "bt.CollisionWorld.ConvexResultCallback"));
      btScalar allowedCcdPenetration = dub::checknumber(L, 6);
      self->convexSweepTest(castShape, *from, *to, *resultCallback, allowedCcdPenetration);
      return 0;
    } else {
      btConvexShape *castShape = *((btConvexShape **)dub::checksdata(L, 2, "bt.ConvexShape"));
      btTransform *from = *((btTransform **)dub::checksdata(L, 3, "bt.Transform"));
      btTransform *to = *((btTransform **)dub::checksdata(L, 4, "bt.Transform"));
      btCollisionWorld::ConvexResultCallback *resultCallback = *((btCollisionWorld::ConvexResultCallback **)dub::checksdata(L, 5, "bt.CollisionWorld.ConvexResultCallback"));
      self->convexSweepTest(castShape, *from, *to, *resultCallback);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "convexSweepTest: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "convexSweepTest: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionWorld::contactTest(btCollisionObject *colObj, ContactResultCallback &resultCallback)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:453
 */
static int btDiscreteDynamicsWorld_contactTest(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btCollisionObject *colObj = *((btCollisionObject **)dub::checksdata(L, 2, "bt.CollisionObject"));
    btCollisionWorld::ContactResultCallback *resultCallback = *((btCollisionWorld::ContactResultCallback **)dub::checksdata(L, 3, "bt.CollisionWorld.ContactResultCallback"));
    self->contactTest(colObj, *resultCallback);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "contactTest: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "contactTest: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionWorld::contactPairTest(btCollisionObject *colObjA, btCollisionObject *colObjB, ContactResultCallback &resultCallback)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:457
 */
static int btDiscreteDynamicsWorld_contactPairTest(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    btCollisionObject *colObjA = *((btCollisionObject **)dub::checksdata(L, 2, "bt.CollisionObject"));
    btCollisionObject *colObjB = *((btCollisionObject **)dub::checksdata(L, 3, "bt.CollisionObject"));
    btCollisionWorld::ContactResultCallback *resultCallback = *((btCollisionWorld::ContactResultCallback **)dub::checksdata(L, 4, "bt.CollisionWorld.ContactResultCallback"));
    self->contactPairTest(colObjA, colObjB, *resultCallback);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "contactPairTest: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "contactPairTest: Unknown exception");
  }
  return dub::error(L);
}

/** btCollisionObjectArray& btCollisionWorld::getCollisionObjectArray()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:486
 */
static int btDiscreteDynamicsWorld_getCollisionObjectArray(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    dub::pushudata(L, &self->getCollisionObjectArray(), "CollisionObjectArray", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getCollisionObjectArray: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getCollisionObjectArray: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionWorld::performDiscreteCollisionDetection()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:499
 */
static int btDiscreteDynamicsWorld_performDiscreteCollisionDetection(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    self->performDiscreteCollisionDetection();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "performDiscreteCollisionDetection: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "performDiscreteCollisionDetection: Unknown exception");
  }
  return dub::error(L);
}

/** btDispatcherInfo& btCollisionWorld::getDispatchInfo()
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:501
 */
static int btDiscreteDynamicsWorld_getDispatchInfo(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    dub::pushudata(L, &self->getDispatchInfo(), "bt.DispatcherInfo", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getDispatchInfo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getDispatchInfo: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionWorld::getForceUpdateAllAabbs() const
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:511
 */
static int btDiscreteDynamicsWorld_getForceUpdateAllAabbs(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    lua_pushboolean(L, self->getForceUpdateAllAabbs());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getForceUpdateAllAabbs: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getForceUpdateAllAabbs: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionWorld::setForceUpdateAllAabbs(bool forceUpdateAllAabbs)
 * src/vendor/bullet/src/BulletCollision/CollisionDispatch/btCollisionWorld.h:515
 */
static int btDiscreteDynamicsWorld_setForceUpdateAllAabbs(lua_State *L) {
  try {
    btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata(L, 1, "bt.DiscreteDynamicsWorld"));
    bool forceUpdateAllAabbs = dub::checkboolean(L, 2);
    self->setForceUpdateAllAabbs(forceUpdateAllAabbs);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setForceUpdateAllAabbs: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setForceUpdateAllAabbs: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int btDiscreteDynamicsWorld___tostring(lua_State *L) {
  btDiscreteDynamicsWorld *self = *((btDiscreteDynamicsWorld **)dub::checksdata_n(L, 1, "bt.DiscreteDynamicsWorld"));
  lua_pushfstring(L, "bt.DiscreteDynamicsWorld: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg btDiscreteDynamicsWorld_member_methods[] = {
  { "_cast_"       , btDiscreteDynamicsWorld__cast_ },
  { "new"          , btDiscreteDynamicsWorld_btDiscreteDynamicsWorld },
  { "__gc"         , btDiscreteDynamicsWorld__btDiscreteDynamicsWorld },
  { "stepSimulation", btDiscreteDynamicsWorld_stepSimulation },
  { "synchronizeMotionStates", btDiscreteDynamicsWorld_synchronizeMotionStates },
  { "synchronizeSingleMotionState", btDiscreteDynamicsWorld_synchronizeSingleMotionState },
  { "addConstraint", btDiscreteDynamicsWorld_addConstraint },
  { "removeConstraint", btDiscreteDynamicsWorld_removeConstraint },
  { "addAction"    , btDiscreteDynamicsWorld_addAction },
  { "removeAction" , btDiscreteDynamicsWorld_removeAction },
  { "getSimulationIslandManager", btDiscreteDynamicsWorld_getSimulationIslandManager },
  { "getCollisionWorld", btDiscreteDynamicsWorld_getCollisionWorld },
  { "setGravity"   , btDiscreteDynamicsWorld_setGravity },
  { "getGravity"   , btDiscreteDynamicsWorld_getGravity },
  { "addCollisionObject", btDiscreteDynamicsWorld_addCollisionObject },
  { "addRigidBody" , btDiscreteDynamicsWorld_addRigidBody },
  { "removeRigidBody", btDiscreteDynamicsWorld_removeRigidBody },
  { "removeCollisionObject", btDiscreteDynamicsWorld_removeCollisionObject },
  { "debugDrawConstraint", btDiscreteDynamicsWorld_debugDrawConstraint },
  { "debugDrawWorld", btDiscreteDynamicsWorld_debugDrawWorld },
  { "setConstraintSolver", btDiscreteDynamicsWorld_setConstraintSolver },
  { "getConstraintSolver", btDiscreteDynamicsWorld_getConstraintSolver },
  { "getNumConstraints", btDiscreteDynamicsWorld_getNumConstraints },
  { "getConstraint", btDiscreteDynamicsWorld_getConstraint },
  { "getWorldType" , btDiscreteDynamicsWorld_getWorldType },
  { "clearForces"  , btDiscreteDynamicsWorld_clearForces },
  { "applyGravity" , btDiscreteDynamicsWorld_applyGravity },
  { "setNumTasks"  , btDiscreteDynamicsWorld_setNumTasks },
  { "updateVehicles", btDiscreteDynamicsWorld_updateVehicles },
  { "addVehicle"   , btDiscreteDynamicsWorld_addVehicle },
  { "removeVehicle", btDiscreteDynamicsWorld_removeVehicle },
  { "addCharacter" , btDiscreteDynamicsWorld_addCharacter },
  { "removeCharacter", btDiscreteDynamicsWorld_removeCharacter },
  { "setSynchronizeAllMotionStates", btDiscreteDynamicsWorld_setSynchronizeAllMotionStates },
  { "getSynchronizeAllMotionStates", btDiscreteDynamicsWorld_getSynchronizeAllMotionStates },
  { "setApplySpeculativeContactRestitution", btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution },
  { "getApplySpeculativeContactRestitution", btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution },
  { "serialize"    , btDiscreteDynamicsWorld_serialize },
  { "setLatencyMotionStateInterpolation", btDiscreteDynamicsWorld_setLatencyMotionStateInterpolation },
  { "getLatencyMotionStateInterpolation", btDiscreteDynamicsWorld_getLatencyMotionStateInterpolation },
  { "setInternalTickCallback", btDiscreteDynamicsWorld_setInternalTickCallback },
  { "setWorldUserInfo", btDiscreteDynamicsWorld_setWorldUserInfo },
  { "getWorldUserInfo", btDiscreteDynamicsWorld_getWorldUserInfo },
  { "getSolverInfo", btDiscreteDynamicsWorld_getSolverInfo },
  { "setBroadphase", btDiscreteDynamicsWorld_setBroadphase },
  { "getBroadphase", btDiscreteDynamicsWorld_getBroadphase },
  { "getPairCache" , btDiscreteDynamicsWorld_getPairCache },
  { "getDispatcher", btDiscreteDynamicsWorld_getDispatcher },
  { "updateSingleAabb", btDiscreteDynamicsWorld_updateSingleAabb },
  { "updateAabbs"  , btDiscreteDynamicsWorld_updateAabbs },
  { "computeOverlappingPairs", btDiscreteDynamicsWorld_computeOverlappingPairs },
  { "setDebugDrawer", btDiscreteDynamicsWorld_setDebugDrawer },
  { "getDebugDrawer", btDiscreteDynamicsWorld_getDebugDrawer },
  { "debugDrawObject", btDiscreteDynamicsWorld_debugDrawObject },
  { "getNumCollisionObjects", btDiscreteDynamicsWorld_getNumCollisionObjects },
  { "rayTest"      , btDiscreteDynamicsWorld_rayTest },
  { "convexSweepTest", btDiscreteDynamicsWorld_convexSweepTest },
  { "contactTest"  , btDiscreteDynamicsWorld_contactTest },
  { "contactPairTest", btDiscreteDynamicsWorld_contactPairTest },
  { "getCollisionObjectArray", btDiscreteDynamicsWorld_getCollisionObjectArray },
  { "performDiscreteCollisionDetection", btDiscreteDynamicsWorld_performDiscreteCollisionDetection },
  { "getDispatchInfo", btDiscreteDynamicsWorld_getDispatchInfo },
  { "getForceUpdateAllAabbs", btDiscreteDynamicsWorld_getForceUpdateAllAabbs },
  { "setForceUpdateAllAabbs", btDiscreteDynamicsWorld_setForceUpdateAllAabbs },
  { "__tostring"   , btDiscreteDynamicsWorld___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_bt_DiscreteDynamicsWorld(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.DiscreteDynamicsWorld");
  // <mt>

  // register member methods
  dub::fregister(L, btDiscreteDynamicsWorld_member_methods);
  // setup meta-table
  dub::setup(L, "bt.DiscreteDynamicsWorld");
  // <mt>
  return 1;
}
