/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class btMatrix3x3
 *
 * This file has been generated by dub 2.2.1.
 */
#include "dub/dub.h"
#include "LinearMath/btMatrix3x3.h"


/** ~btMatrix3x3()
 * 
 */
static int btMatrix3x3__btMatrix3x3(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "bt.Matrix3x3"));
    if (userdata->gc) {
      btMatrix3x3 *self = (btMatrix3x3 *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** btMatrix3x3::btMatrix3x3()
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:55
 */
static int btMatrix3x3_btMatrix3x3(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 9) {
      btScalar xx = dub::checknumber(L, 1);
      btScalar xy = dub::checknumber(L, 2);
      btScalar xz = dub::checknumber(L, 3);
      btScalar yx = dub::checknumber(L, 4);
      btScalar yy = dub::checknumber(L, 5);
      btScalar yz = dub::checknumber(L, 6);
      btScalar zx = dub::checknumber(L, 7);
      btScalar zy = dub::checknumber(L, 8);
      btScalar zz = dub::checknumber(L, 9);
      btMatrix3x3 *retval__ = new btMatrix3x3(xx, xy, xz, yx, yy, yz, zx, zy, zz);
      dub::pushudata(L, retval__, "bt.Matrix3x3", true);
      return 1;
    } else if (top__ >= 1) {
      int type__ = lua_type(L, 1);
      void **ptr1__;
      if ( (ptr1__ = dub::issdata(L, 1, "bt.Matrix3x3", type__)) ) {
        btMatrix3x3 *other = *((btMatrix3x3 **)ptr1__);
        btMatrix3x3 *retval__ = new btMatrix3x3(*other);
        dub::pushudata(L, retval__, "bt.Matrix3x3", true);
        return 1;
      } else {
        btQuaternion *q = *((btQuaternion **)dub::checksdata(L, 1, "bt.Quaternion"));
        btMatrix3x3 *retval__ = new btMatrix3x3(*q);
        dub::pushudata(L, retval__, "bt.Matrix3x3", true);
        return 1;
      }
    } else {
      btMatrix3x3 *retval__ = new btMatrix3x3();
      dub::pushudata(L, retval__, "bt.Matrix3x3", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** btMatrix3x3& btMatrix3x3::operator=(const btMatrix3x3 &other)
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:122
 */
static int btMatrix3x3_operator_sete(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btMatrix3x3 *other = *((btMatrix3x3 **)dub::checksdata(L, 2, "bt.Matrix3x3"));
    dub::pushudata(L, &self->operator=(*other), "bt.Matrix3x3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "set: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "set: Unknown exception");
  }
  return dub::error(L);
}

/** btVector3 btMatrix3x3::getColumn(int i) const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:134
 */
static int btMatrix3x3_getColumn(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    int i = dub::checkint(L, 2);
    dub::pushudata(L, new btVector3(self->getColumn(i)), "bt.Vector3", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getColumn: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getColumn: Unknown exception");
  }
  return dub::error(L);
}

/** const btVector3& btMatrix3x3::getRow(int i) const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:142
 */
static int btMatrix3x3_getRow(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    int i = dub::checkint(L, 2);
    dub::pushudata(L, const_cast<btVector3*>(&self->getRow(i)), "bt.Vector3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRow: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRow: Unknown exception");
  }
  return dub::error(L);
}

/** btVector3& btMatrix3x3::operator[](int i)
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:150
 */
static int btMatrix3x3__get_(lua_State *L) {

  btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata_n(L, 1, "bt.Matrix3x3", true));
  if (lua_type(L, 2) != LUA_TSTRING) {
    int i = luaL_checkint(L, 2);
    dub::pushudata(L, const_cast<btVector3*>(&self->operator[](i)), "bt.Vector3", false);
    return 1;
  }
  return 0;
}

/** btMatrix3x3 & btMatrix3x3::operator*=(const btMatrix3x3 &m)
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:167
 */
static int btMatrix3x3_operator_mule(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btMatrix3x3 *m = *((btMatrix3x3 **)dub::checksdata(L, 2, "bt.Matrix3x3"));
    dub::pushudata(L, &self->operator*=(*m), "bt.Matrix3x3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "mul: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "mul: Unknown exception");
  }
  return dub::error(L);
}

/** btMatrix3x3 & btMatrix3x3::operator+=(const btMatrix3x3 &m)
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:172
 */
static int btMatrix3x3_operator_adde(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btMatrix3x3 *m = *((btMatrix3x3 **)dub::checksdata(L, 2, "bt.Matrix3x3"));
    dub::pushudata(L, &self->operator+=(*m), "bt.Matrix3x3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "add: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "add: Unknown exception");
  }
  return dub::error(L);
}

/** btMatrix3x3 & btMatrix3x3::operator-=(const btMatrix3x3 &m)
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:177
 */
static int btMatrix3x3_operator_sube(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btMatrix3x3 *m = *((btMatrix3x3 **)dub::checksdata(L, 2, "bt.Matrix3x3"));
    dub::pushudata(L, &self->operator-=(*m), "bt.Matrix3x3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "sub: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "sub: Unknown exception");
  }
  return dub::error(L);
}

/** void btMatrix3x3::setFromOpenGLSubMatrix(const btScalar *m)
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:181
 */
static int btMatrix3x3_setFromOpenGLSubMatrix(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btScalar *m = *((btScalar **)dub::checksdata(L, 2, "Scalar"));
    self->setFromOpenGLSubMatrix(m);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setFromOpenGLSubMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setFromOpenGLSubMatrix: Unknown exception");
  }
  return dub::error(L);
}

/** void btMatrix3x3::setValue(const btScalar &xx, const btScalar &xy, const btScalar &xz, const btScalar &yx, const btScalar &yy, const btScalar &yz, const btScalar &zx, const btScalar &zy, const btScalar &zz)
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:198
 */
static int btMatrix3x3_setValue(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btScalar xx = dub::checknumber(L, 2);
    btScalar xy = dub::checknumber(L, 3);
    btScalar xz = dub::checknumber(L, 4);
    btScalar yx = dub::checknumber(L, 5);
    btScalar yy = dub::checknumber(L, 6);
    btScalar yz = dub::checknumber(L, 7);
    btScalar zx = dub::checknumber(L, 8);
    btScalar zy = dub::checknumber(L, 9);
    btScalar zz = dub::checknumber(L, 10);
    self->setValue(xx, xy, xz, yx, yy, yz, zx, zy, zz);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setValue: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setValue: Unknown exception");
  }
  return dub::error(L);
}

/** void btMatrix3x3::setRotation(const btQuaternion &q)
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:209
 */
static int btMatrix3x3_setRotation(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btQuaternion *q = *((btQuaternion **)dub::checksdata(L, 2, "bt.Quaternion"));
    self->setRotation(*q);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setRotation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setRotation: Unknown exception");
  }
  return dub::error(L);
}

/** void btMatrix3x3::setEulerYPR(const btScalar &yaw, const btScalar &pitch, const btScalar &roll)
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:284
 */
static int btMatrix3x3_setEulerYPR(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btScalar yaw = dub::checknumber(L, 2);
    btScalar pitch = dub::checknumber(L, 3);
    btScalar roll = dub::checknumber(L, 4);
    self->setEulerYPR(yaw, pitch, roll);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setEulerYPR: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setEulerYPR: Unknown exception");
  }
  return dub::error(L);
}

/** void btMatrix3x3::setEulerZYX(btScalar eulerX, btScalar eulerY, btScalar eulerZ)
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:298
 */
static int btMatrix3x3_setEulerZYX(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btScalar eulerX = dub::checknumber(L, 2);
    btScalar eulerY = dub::checknumber(L, 3);
    btScalar eulerZ = dub::checknumber(L, 4);
    self->setEulerZYX(eulerX, eulerY, eulerZ);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setEulerZYX: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setEulerZYX: Unknown exception");
  }
  return dub::error(L);
}

/** void btMatrix3x3::setIdentity()
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:317
 */
static int btMatrix3x3_setIdentity(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    self->setIdentity();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setIdentity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setIdentity: Unknown exception");
  }
  return dub::error(L);
}

/** void btMatrix3x3::getOpenGLSubMatrix(btScalar *m) const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:347
 */
static int btMatrix3x3_getOpenGLSubMatrix(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btScalar *m = *((btScalar **)dub::checksdata(L, 2, "Scalar"));
    self->getOpenGLSubMatrix(m);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getOpenGLSubMatrix: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getOpenGLSubMatrix: Unknown exception");
  }
  return dub::error(L);
}

/** void btMatrix3x3::getRotation(btQuaternion &q) const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:400
 */
static int btMatrix3x3_getRotation(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btQuaternion *q = *((btQuaternion **)dub::checksdata(L, 2, "bt.Quaternion"));
    self->getRotation(*q);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRotation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRotation: Unknown exception");
  }
  return dub::error(L);
}

/** void btMatrix3x3::getEulerYPR(btScalar &yaw, btScalar &pitch, btScalar &roll) const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:492
 */
static int btMatrix3x3_getEulerYPR(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btScalar yaw = dub::checknumber(L, 2);
    btScalar pitch = dub::checknumber(L, 3);
    btScalar roll = dub::checknumber(L, 4);
    self->getEulerYPR(yaw, pitch, roll);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getEulerYPR: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getEulerYPR: Unknown exception");
  }
  return dub::error(L);
}

/** void btMatrix3x3::getEulerZYX(btScalar &yaw, btScalar &pitch, btScalar &roll, unsigned int solution_number=1) const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:521
 */
static int btMatrix3x3_getEulerZYX(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      btScalar yaw = dub::checknumber(L, 2);
      btScalar pitch = dub::checknumber(L, 3);
      btScalar roll = dub::checknumber(L, 4);
      unsigned int solution_number = dub::checkint(L, 5);
      self->getEulerZYX(yaw, pitch, roll, solution_number);
      return 0;
    } else {
      btScalar yaw = dub::checknumber(L, 2);
      btScalar pitch = dub::checknumber(L, 3);
      btScalar roll = dub::checknumber(L, 4);
      self->getEulerZYX(yaw, pitch, roll);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "getEulerZYX: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getEulerZYX: Unknown exception");
  }
  return dub::error(L);
}

/** btMatrix3x3 btMatrix3x3::scaled(const btVector3 &s) const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:590
 */
static int btMatrix3x3_scaled(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btVector3 *s = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    dub::pushudata(L, new btMatrix3x3(self->scaled(*s)), "bt.Matrix3x3", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "scaled: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "scaled: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btMatrix3x3::determinant() const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:603
 */
static int btMatrix3x3_determinant(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    lua_pushnumber(L, self->determinant());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "determinant: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "determinant: Unknown exception");
  }
  return dub::error(L);
}

/** btMatrix3x3 btMatrix3x3::adjoint() const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:605
 */
static int btMatrix3x3_adjoint(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    dub::pushudata(L, new btMatrix3x3(self->adjoint()), "bt.Matrix3x3", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "adjoint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "adjoint: Unknown exception");
  }
  return dub::error(L);
}

/** btMatrix3x3 btMatrix3x3::absolute() const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:607
 */
static int btMatrix3x3_absolute(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    dub::pushudata(L, new btMatrix3x3(self->absolute()), "bt.Matrix3x3", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "absolute: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "absolute: Unknown exception");
  }
  return dub::error(L);
}

/** btMatrix3x3 btMatrix3x3::transpose() const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:609
 */
static int btMatrix3x3_transpose(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    dub::pushudata(L, new btMatrix3x3(self->transpose()), "bt.Matrix3x3", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "transpose: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "transpose: Unknown exception");
  }
  return dub::error(L);
}

/** btMatrix3x3 btMatrix3x3::inverse() const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:611
 */
static int btMatrix3x3_inverse(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    dub::pushudata(L, new btMatrix3x3(self->inverse()), "bt.Matrix3x3", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "inverse: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "inverse: Unknown exception");
  }
  return dub::error(L);
}

/** btMatrix3x3 btMatrix3x3::transposeTimes(const btMatrix3x3 &m) const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:613
 */
static int btMatrix3x3_transposeTimes(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btMatrix3x3 *m = *((btMatrix3x3 **)dub::checksdata(L, 2, "bt.Matrix3x3"));
    dub::pushudata(L, new btMatrix3x3(self->transposeTimes(*m)), "bt.Matrix3x3", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "transposeTimes: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "transposeTimes: Unknown exception");
  }
  return dub::error(L);
}

/** btMatrix3x3 btMatrix3x3::timesTranspose(const btMatrix3x3 &m) const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:614
 */
static int btMatrix3x3_timesTranspose(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btMatrix3x3 *m = *((btMatrix3x3 **)dub::checksdata(L, 2, "bt.Matrix3x3"));
    dub::pushudata(L, new btMatrix3x3(self->timesTranspose(*m)), "bt.Matrix3x3", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "timesTranspose: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "timesTranspose: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btMatrix3x3::tdotx(const btVector3 &v) const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:616
 */
static int btMatrix3x3_tdotx(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btVector3 *v = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    lua_pushnumber(L, self->tdotx(*v));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "tdotx: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "tdotx: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btMatrix3x3::tdoty(const btVector3 &v) const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:620
 */
static int btMatrix3x3_tdoty(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btVector3 *v = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    lua_pushnumber(L, self->tdoty(*v));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "tdoty: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "tdoty: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btMatrix3x3::tdotz(const btVector3 &v) const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:624
 */
static int btMatrix3x3_tdotz(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btVector3 *v = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    lua_pushnumber(L, self->tdotz(*v));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "tdotz: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "tdotz: Unknown exception");
  }
  return dub::error(L);
}

/** void btMatrix3x3::diagonalize(btMatrix3x3 &rot, btScalar threshold, int maxSteps)
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:639
 */
static int btMatrix3x3_diagonalize(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btMatrix3x3 *rot = *((btMatrix3x3 **)dub::checksdata(L, 2, "bt.Matrix3x3"));
    btScalar threshold = dub::checknumber(L, 3);
    int maxSteps = dub::checkint(L, 4);
    self->diagonalize(*rot, threshold, maxSteps);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "diagonalize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "diagonalize: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btMatrix3x3::cofac(int r1, int c1, int r2, int c2) const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:727
 */
static int btMatrix3x3_cofac(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    int r1 = dub::checkint(L, 2);
    int c1 = dub::checkint(L, 3);
    int r2 = dub::checkint(L, 4);
    int c2 = dub::checkint(L, 5);
    lua_pushnumber(L, self->cofac(r1, c1, r2, c2));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "cofac: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "cofac: Unknown exception");
  }
  return dub::error(L);
}

/** void btMatrix3x3::serialize(struct btMatrix3x3Data &dataOut) const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:732
 */
static int btMatrix3x3_serialize(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btMatrix3x3Data *dataOut = *((btMatrix3x3Data **)dub::checksdata(L, 2, "Matrix3x3Data"));
    self->serialize(*dataOut);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "serialize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "serialize: Unknown exception");
  }
  return dub::error(L);
}

/** void btMatrix3x3::serializeFloat(struct btMatrix3x3FloatData &dataOut) const
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:734
 */
static int btMatrix3x3_serializeFloat(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btMatrix3x3FloatData *dataOut = *((btMatrix3x3FloatData **)dub::checksdata(L, 2, "bt.Matrix3x3FloatData"));
    self->serializeFloat(*dataOut);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "serializeFloat: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "serializeFloat: Unknown exception");
  }
  return dub::error(L);
}

/** void btMatrix3x3::deSerialize(const struct btMatrix3x3Data &dataIn)
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:736
 */
static int btMatrix3x3_deSerialize(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btMatrix3x3Data *dataIn = *((btMatrix3x3Data **)dub::checksdata(L, 2, "Matrix3x3Data"));
    self->deSerialize(*dataIn);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "deSerialize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "deSerialize: Unknown exception");
  }
  return dub::error(L);
}

/** void btMatrix3x3::deSerializeFloat(const struct btMatrix3x3FloatData &dataIn)
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:738
 */
static int btMatrix3x3_deSerializeFloat(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btMatrix3x3FloatData *dataIn = *((btMatrix3x3FloatData **)dub::checksdata(L, 2, "bt.Matrix3x3FloatData"));
    self->deSerializeFloat(*dataIn);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "deSerializeFloat: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "deSerializeFloat: Unknown exception");
  }
  return dub::error(L);
}

/** void btMatrix3x3::deSerializeDouble(const struct btMatrix3x3DoubleData &dataIn)
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:740
 */
static int btMatrix3x3_deSerializeDouble(lua_State *L) {
  try {
    btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata(L, 1, "bt.Matrix3x3"));
    btMatrix3x3DoubleData *dataIn = *((btMatrix3x3DoubleData **)dub::checksdata(L, 2, "bt.Matrix3x3DoubleData"));
    self->deSerializeDouble(*dataIn);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "deSerializeDouble: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "deSerializeDouble: Unknown exception");
  }
  return dub::error(L);
}

/** static const btMatrix3x3& btMatrix3x3::getIdentity()
 * src/vendor/bullet/src/LinearMath/btMatrix3x3.h:330
 */
static int btMatrix3x3_getIdentity(lua_State *L) {
  try {
    dub::pushudata(L, const_cast<btMatrix3x3*>(&btMatrix3x3::getIdentity()), "bt.Matrix3x3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getIdentity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getIdentity: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int btMatrix3x3___tostring(lua_State *L) {
  btMatrix3x3 *self = *((btMatrix3x3 **)dub::checksdata_n(L, 1, "bt.Matrix3x3"));
  lua_pushfstring(L, "bt.Matrix3x3: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg btMatrix3x3_member_methods[] = {
  { "__gc"         , btMatrix3x3__btMatrix3x3 },
  { "new"          , btMatrix3x3_btMatrix3x3 },
  { "set"          , btMatrix3x3_operator_sete },
  { "getColumn"    , btMatrix3x3_getColumn },
  { "getRow"       , btMatrix3x3_getRow   },
  { "__index"      , btMatrix3x3__get_    },
  { "mul"          , btMatrix3x3_operator_mule },
  { "add"          , btMatrix3x3_operator_adde },
  { "sub"          , btMatrix3x3_operator_sube },
  { "setFromOpenGLSubMatrix", btMatrix3x3_setFromOpenGLSubMatrix },
  { "setValue"     , btMatrix3x3_setValue },
  { "setRotation"  , btMatrix3x3_setRotation },
  { "setEulerYPR"  , btMatrix3x3_setEulerYPR },
  { "setEulerZYX"  , btMatrix3x3_setEulerZYX },
  { "setIdentity"  , btMatrix3x3_setIdentity },
  { "getOpenGLSubMatrix", btMatrix3x3_getOpenGLSubMatrix },
  { "getRotation"  , btMatrix3x3_getRotation },
  { "getEulerYPR"  , btMatrix3x3_getEulerYPR },
  { "getEulerZYX"  , btMatrix3x3_getEulerZYX },
  { "scaled"       , btMatrix3x3_scaled   },
  { "determinant"  , btMatrix3x3_determinant },
  { "adjoint"      , btMatrix3x3_adjoint  },
  { "absolute"     , btMatrix3x3_absolute },
  { "transpose"    , btMatrix3x3_transpose },
  { "inverse"      , btMatrix3x3_inverse  },
  { "transposeTimes", btMatrix3x3_transposeTimes },
  { "timesTranspose", btMatrix3x3_timesTranspose },
  { "tdotx"        , btMatrix3x3_tdotx    },
  { "tdoty"        , btMatrix3x3_tdoty    },
  { "tdotz"        , btMatrix3x3_tdotz    },
  { "diagonalize"  , btMatrix3x3_diagonalize },
  { "cofac"        , btMatrix3x3_cofac    },
  { "serialize"    , btMatrix3x3_serialize },
  { "serializeFloat", btMatrix3x3_serializeFloat },
  { "deSerialize"  , btMatrix3x3_deSerialize },
  { "deSerializeFloat", btMatrix3x3_deSerializeFloat },
  { "deSerializeDouble", btMatrix3x3_deSerializeDouble },
  { "getIdentity"  , btMatrix3x3_getIdentity },
  { "__tostring"   , btMatrix3x3___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_bt_Matrix3x3(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.Matrix3x3");
  // <mt>

  // register member methods
  dub::fregister(L, btMatrix3x3_member_methods);
  // setup meta-table
  dub::setup(L, "bt.Matrix3x3");
  // <mt>
  return 1;
}
