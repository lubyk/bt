/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class btDbvtBroadphase
 *
 * This file has been generated by dub 2.2.1.
 */
#include "dub/dub.h"
#include "BulletCollision/BroadphaseCollision/btDbvtBroadphase.h"


/** Set attributes (key, value)
 * 
 */
static int btDbvtBroadphase__set_(lua_State *L) {

  btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata_n(L, 1, "bt.DbvtBroadphase"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub::hash(key, 82);
  switch(key_h) {
    case 44: {
      if (DUB_ASSERT_KEY(key, "m_paircache")) break;
      dub::protect(L, 1, 3, "m_paircache");
      self->m_paircache = *((btOverlappingPairCache **)dub::checksdata_n(L, 3, "OverlappingPairCache"));
      return 0;
    }
    case 47: {
      if (DUB_ASSERT_KEY(key, "m_prediction")) break;
      self->m_prediction = luaL_checknumber(L, 3);
      return 0;
    }
    case 63: {
      if (DUB_ASSERT_KEY(key, "m_stageCurrent")) break;
      self->m_stageCurrent = luaL_checkint(L, 3);
      return 0;
    }
    case 28: {
      if (DUB_ASSERT_KEY(key, "m_fupdates")) break;
      self->m_fupdates = luaL_checkint(L, 3);
      return 0;
    }
    case 32: {
      if (DUB_ASSERT_KEY(key, "m_dupdates")) break;
      self->m_dupdates = luaL_checkint(L, 3);
      return 0;
    }
    case 73: {
      if (DUB_ASSERT_KEY(key, "m_cupdates")) break;
      self->m_cupdates = luaL_checkint(L, 3);
      return 0;
    }
    case 25: {
      if (DUB_ASSERT_KEY(key, "m_newpairs")) break;
      self->m_newpairs = luaL_checkint(L, 3);
      return 0;
    }
    case 35: {
      if (DUB_ASSERT_KEY(key, "m_fixedleft")) break;
      self->m_fixedleft = luaL_checkint(L, 3);
      return 0;
    }
    case 71: {
      if (DUB_ASSERT_KEY(key, "m_updates_call")) break;
      self->m_updates_call = **((unsigned **)dub::checksdata_n(L, 3, "unsigned"));
      return 0;
    }
    case 57: {
      if (DUB_ASSERT_KEY(key, "m_updates_done")) break;
      self->m_updates_done = **((unsigned **)dub::checksdata_n(L, 3, "unsigned"));
      return 0;
    }
    case 40: {
      if (DUB_ASSERT_KEY(key, "m_updates_ratio")) break;
      self->m_updates_ratio = luaL_checknumber(L, 3);
      return 0;
    }
    case 79: {
      if (DUB_ASSERT_KEY(key, "m_pid")) break;
      self->m_pid = luaL_checkint(L, 3);
      return 0;
    }
    case 14: {
      if (DUB_ASSERT_KEY(key, "m_cid")) break;
      self->m_cid = luaL_checkint(L, 3);
      return 0;
    }
    case 34: {
      if (DUB_ASSERT_KEY(key, "m_gid")) break;
      self->m_gid = luaL_checkint(L, 3);
      return 0;
    }
    case 37: {
      if (DUB_ASSERT_KEY(key, "m_releasepaircache")) break;
      self->m_releasepaircache = luaL_checkboolean(L, 3);
      return 0;
    }
    case 27: {
      if (DUB_ASSERT_KEY(key, "m_deferedcollide")) break;
      self->m_deferedcollide = luaL_checkboolean(L, 3);
      return 0;
    }
    case 70: {
      if (DUB_ASSERT_KEY(key, "m_needcleanup")) break;
      self->m_needcleanup = luaL_checkboolean(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int btDbvtBroadphase__get_(lua_State *L) {

  btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata_n(L, 1, "bt.DbvtBroadphase", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub::hash(key, 82);
  switch(key_h) {
    case 44: {
      if (DUB_ASSERT_KEY(key, "m_paircache")) break;
      btOverlappingPairCache *retval__ = self->m_paircache;
      if (!retval__) return 0;
      dub::pushudata(L, retval__, "OverlappingPairCache", false);
      return 1;
    }
    case 47: {
      if (DUB_ASSERT_KEY(key, "m_prediction")) break;
      lua_pushnumber(L, self->m_prediction);
      return 1;
    }
    case 63: {
      if (DUB_ASSERT_KEY(key, "m_stageCurrent")) break;
      lua_pushnumber(L, self->m_stageCurrent);
      return 1;
    }
    case 28: {
      if (DUB_ASSERT_KEY(key, "m_fupdates")) break;
      lua_pushnumber(L, self->m_fupdates);
      return 1;
    }
    case 32: {
      if (DUB_ASSERT_KEY(key, "m_dupdates")) break;
      lua_pushnumber(L, self->m_dupdates);
      return 1;
    }
    case 73: {
      if (DUB_ASSERT_KEY(key, "m_cupdates")) break;
      lua_pushnumber(L, self->m_cupdates);
      return 1;
    }
    case 25: {
      if (DUB_ASSERT_KEY(key, "m_newpairs")) break;
      lua_pushnumber(L, self->m_newpairs);
      return 1;
    }
    case 35: {
      if (DUB_ASSERT_KEY(key, "m_fixedleft")) break;
      lua_pushnumber(L, self->m_fixedleft);
      return 1;
    }
    case 71: {
      if (DUB_ASSERT_KEY(key, "m_updates_call")) break;
      dub::pushudata(L, &self->m_updates_call, "unsigned", false);
      return 1;
    }
    case 57: {
      if (DUB_ASSERT_KEY(key, "m_updates_done")) break;
      dub::pushudata(L, &self->m_updates_done, "unsigned", false);
      return 1;
    }
    case 40: {
      if (DUB_ASSERT_KEY(key, "m_updates_ratio")) break;
      lua_pushnumber(L, self->m_updates_ratio);
      return 1;
    }
    case 79: {
      if (DUB_ASSERT_KEY(key, "m_pid")) break;
      lua_pushnumber(L, self->m_pid);
      return 1;
    }
    case 14: {
      if (DUB_ASSERT_KEY(key, "m_cid")) break;
      lua_pushnumber(L, self->m_cid);
      return 1;
    }
    case 34: {
      if (DUB_ASSERT_KEY(key, "m_gid")) break;
      lua_pushnumber(L, self->m_gid);
      return 1;
    }
    case 37: {
      if (DUB_ASSERT_KEY(key, "m_releasepaircache")) break;
      lua_pushboolean(L, self->m_releasepaircache);
      return 1;
    }
    case 27: {
      if (DUB_ASSERT_KEY(key, "m_deferedcollide")) break;
      lua_pushboolean(L, self->m_deferedcollide);
      return 1;
    }
    case 70: {
      if (DUB_ASSERT_KEY(key, "m_needcleanup")) break;
      lua_pushboolean(L, self->m_needcleanup);
      return 1;
    }
  }
  return 0;
}

/** Cast (class_name)
 * 
 */
static int btDbvtBroadphase__cast_(lua_State *L) {

  btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata_n(L, 1, "bt.DbvtBroadphase"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "bt.BroadphaseInterface")) break;
      *retval__ = static_cast<btBroadphaseInterface *>(self);
      return 1;
    }
  }
  return 0;
}

/** btDbvtBroadphase::btDbvtBroadphase(btOverlappingPairCache *paircache=0)
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:101
 */
static int btDbvtBroadphase_btDbvtBroadphase(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 1) {
      btOverlappingPairCache *paircache = *((btOverlappingPairCache **)dub::checksdata(L, 1, "OverlappingPairCache"));
      btDbvtBroadphase *retval__ = new btDbvtBroadphase(paircache);
      dub::pushudata(L, retval__, "bt.DbvtBroadphase", true);
      return 1;
    } else {
      btDbvtBroadphase *retval__ = new btDbvtBroadphase();
      dub::pushudata(L, retval__, "bt.DbvtBroadphase", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** btDbvtBroadphase::~btDbvtBroadphase()
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:102
 */
static int btDbvtBroadphase__btDbvtBroadphase(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "bt.DbvtBroadphase"));
    if (userdata->gc) {
      btDbvtBroadphase *self = (btDbvtBroadphase *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** void btDbvtBroadphase::collide(btDispatcher *dispatcher)
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:103
 */
static int btDbvtBroadphase_collide(lua_State *L) {
  try {
    btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata(L, 1, "bt.DbvtBroadphase"));
    btDispatcher *dispatcher = *((btDispatcher **)dub::checksdata(L, 2, "bt.Dispatcher"));
    self->collide(dispatcher);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "collide: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "collide: Unknown exception");
  }
  return dub::error(L);
}

/** void btDbvtBroadphase::optimize()
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:104
 */
static int btDbvtBroadphase_optimize(lua_State *L) {
  try {
    btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata(L, 1, "bt.DbvtBroadphase"));
    self->optimize();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "optimize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "optimize: Unknown exception");
  }
  return dub::error(L);
}

/** btBroadphaseProxy* btDbvtBroadphase::createProxy(const btVector3 &aabbMin, const btVector3 &aabbMax, int shapeType, void *userPtr, short int collisionFilterGroup, short int collisionFilterMask, btDispatcher *dispatcher, void *multiSapProxy)
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:107
 */
static int btDbvtBroadphase_createProxy(lua_State *L) {
  try {
    btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata(L, 1, "bt.DbvtBroadphase"));
    btVector3 *aabbMin = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    btVector3 *aabbMax = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    int shapeType = dub::checkint(L, 4);
    void *userPtr = *((void **)dub::checksdata(L, 5, "void"));
    short int *collisionFilterGroup = *((short int **)dub::checksdata(L, 6, "short int"));
    short int *collisionFilterMask = *((short int **)dub::checksdata(L, 7, "short int"));
    btDispatcher *dispatcher = *((btDispatcher **)dub::checksdata(L, 8, "bt.Dispatcher"));
    void *multiSapProxy = *((void **)dub::checksdata(L, 9, "void"));
    btBroadphaseProxy *retval__ = self->createProxy(*aabbMin, *aabbMax, shapeType, userPtr, *collisionFilterGroup, *collisionFilterMask, dispatcher, multiSapProxy);
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "BroadphaseProxy", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "createProxy: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "createProxy: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDbvtBroadphase::destroyProxy(btBroadphaseProxy *proxy, btDispatcher *dispatcher)
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:108
 */
static int btDbvtBroadphase_destroyProxy(lua_State *L) {
  try {
    btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata(L, 1, "bt.DbvtBroadphase"));
    btBroadphaseProxy *proxy = *((btBroadphaseProxy **)dub::checksdata(L, 2, "BroadphaseProxy"));
    btDispatcher *dispatcher = *((btDispatcher **)dub::checksdata(L, 3, "bt.Dispatcher"));
    self->destroyProxy(proxy, dispatcher);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "destroyProxy: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "destroyProxy: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDbvtBroadphase::setAabb(btBroadphaseProxy *proxy, const btVector3 &aabbMin, const btVector3 &aabbMax, btDispatcher *dispatcher)
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:109
 */
static int btDbvtBroadphase_setAabb(lua_State *L) {
  try {
    btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata(L, 1, "bt.DbvtBroadphase"));
    btBroadphaseProxy *proxy = *((btBroadphaseProxy **)dub::checksdata(L, 2, "BroadphaseProxy"));
    btVector3 *aabbMin = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    btVector3 *aabbMax = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
    btDispatcher *dispatcher = *((btDispatcher **)dub::checksdata(L, 5, "bt.Dispatcher"));
    self->setAabb(proxy, *aabbMin, *aabbMax, dispatcher);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAabb: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAabb: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDbvtBroadphase::rayTest(const btVector3 &rayFrom, const btVector3 &rayTo, btBroadphaseRayCallback &rayCallback, const btVector3 &aabbMin=btVector3(0, 0, 0), const btVector3 &aabbMax=btVector3(0, 0, 0))
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:110
 */
static int btDbvtBroadphase_rayTest(lua_State *L) {
  try {
    btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata(L, 1, "bt.DbvtBroadphase"));
    int top__ = lua_gettop(L);
    if (top__ >= 6) {
      btVector3 *rayFrom = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *rayTo = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btBroadphaseRayCallback *rayCallback = *((btBroadphaseRayCallback **)dub::checksdata(L, 4, "bt.BroadphaseRayCallback"));
      btVector3 *aabbMin = *((btVector3 **)dub::checksdata(L, 5, "bt.Vector3"));
      btVector3 *aabbMax = *((btVector3 **)dub::checksdata(L, 6, "bt.Vector3"));
      self->rayTest(*rayFrom, *rayTo, *rayCallback, *aabbMin, *aabbMax);
      return 0;
    } else if (top__ >= 5) {
      btVector3 *rayFrom = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *rayTo = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btBroadphaseRayCallback *rayCallback = *((btBroadphaseRayCallback **)dub::checksdata(L, 4, "bt.BroadphaseRayCallback"));
      btVector3 *aabbMin = *((btVector3 **)dub::checksdata(L, 5, "bt.Vector3"));
      self->rayTest(*rayFrom, *rayTo, *rayCallback, *aabbMin);
      return 0;
    } else {
      btVector3 *rayFrom = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
      btVector3 *rayTo = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
      btBroadphaseRayCallback *rayCallback = *((btBroadphaseRayCallback **)dub::checksdata(L, 4, "bt.BroadphaseRayCallback"));
      self->rayTest(*rayFrom, *rayTo, *rayCallback);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "rayTest: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "rayTest: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDbvtBroadphase::aabbTest(const btVector3 &aabbMin, const btVector3 &aabbMax, btBroadphaseAabbCallback &callback)
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:111
 */
static int btDbvtBroadphase_aabbTest(lua_State *L) {
  try {
    btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata(L, 1, "bt.DbvtBroadphase"));
    btVector3 *aabbMin = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    btVector3 *aabbMax = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    btBroadphaseAabbCallback *callback = *((btBroadphaseAabbCallback **)dub::checksdata(L, 4, "bt.BroadphaseAabbCallback"));
    self->aabbTest(*aabbMin, *aabbMax, *callback);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "aabbTest: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "aabbTest: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDbvtBroadphase::getAabb(btBroadphaseProxy *proxy, btVector3 &aabbMin, btVector3 &aabbMax) const
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:113
 */
static int btDbvtBroadphase_getAabb(lua_State *L) {
  try {
    btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata(L, 1, "bt.DbvtBroadphase"));
    btBroadphaseProxy *proxy = *((btBroadphaseProxy **)dub::checksdata(L, 2, "BroadphaseProxy"));
    btVector3 *aabbMin = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    btVector3 *aabbMax = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
    self->getAabb(proxy, *aabbMin, *aabbMax);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAabb: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAabb: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDbvtBroadphase::calculateOverlappingPairs(btDispatcher *dispatcher)
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:114
 */
static int btDbvtBroadphase_calculateOverlappingPairs(lua_State *L) {
  try {
    btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata(L, 1, "bt.DbvtBroadphase"));
    btDispatcher *dispatcher = *((btDispatcher **)dub::checksdata(L, 2, "bt.Dispatcher"));
    self->calculateOverlappingPairs(dispatcher);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "calculateOverlappingPairs: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "calculateOverlappingPairs: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btOverlappingPairCache* btDbvtBroadphase::getOverlappingPairCache()
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:115
 */
static int btDbvtBroadphase_getOverlappingPairCache(lua_State *L) {
  try {
    btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata(L, 1, "bt.DbvtBroadphase"));
    btOverlappingPairCache *retval__ = self->getOverlappingPairCache();
    if (!retval__) return 0;
    dub::pushudata(L, retval__, "OverlappingPairCache", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getOverlappingPairCache: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getOverlappingPairCache: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDbvtBroadphase::getBroadphaseAabb(btVector3 &aabbMin, btVector3 &aabbMax) const
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:117
 */
static int btDbvtBroadphase_getBroadphaseAabb(lua_State *L) {
  try {
    btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata(L, 1, "bt.DbvtBroadphase"));
    btVector3 *aabbMin = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    btVector3 *aabbMax = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    self->getBroadphaseAabb(*aabbMin, *aabbMax);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getBroadphaseAabb: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getBroadphaseAabb: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDbvtBroadphase::printStats()
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:118
 */
static int btDbvtBroadphase_printStats(lua_State *L) {
  try {
    btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata(L, 1, "bt.DbvtBroadphase"));
    self->printStats();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "printStats: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "printStats: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btDbvtBroadphase::resetPool(btDispatcher *dispatcher)
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:122
 */
static int btDbvtBroadphase_resetPool(lua_State *L) {
  try {
    btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata(L, 1, "bt.DbvtBroadphase"));
    btDispatcher *dispatcher = *((btDispatcher **)dub::checksdata(L, 2, "bt.Dispatcher"));
    self->resetPool(dispatcher);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "resetPool: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "resetPool: Unknown exception");
  }
  return dub::error(L);
}

/** void btDbvtBroadphase::performDeferredRemoval(btDispatcher *dispatcher)
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:124
 */
static int btDbvtBroadphase_performDeferredRemoval(lua_State *L) {
  try {
    btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata(L, 1, "bt.DbvtBroadphase"));
    btDispatcher *dispatcher = *((btDispatcher **)dub::checksdata(L, 2, "bt.Dispatcher"));
    self->performDeferredRemoval(dispatcher);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "performDeferredRemoval: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "performDeferredRemoval: Unknown exception");
  }
  return dub::error(L);
}

/** void btDbvtBroadphase::setVelocityPrediction(btScalar prediction)
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:126
 */
static int btDbvtBroadphase_setVelocityPrediction(lua_State *L) {
  try {
    btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata(L, 1, "bt.DbvtBroadphase"));
    btScalar prediction = dub::checknumber(L, 2);
    self->setVelocityPrediction(prediction);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setVelocityPrediction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setVelocityPrediction: Unknown exception");
  }
  return dub::error(L);
}

/** btScalar btDbvtBroadphase::getVelocityPrediction() const
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:130
 */
static int btDbvtBroadphase_getVelocityPrediction(lua_State *L) {
  try {
    btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata(L, 1, "bt.DbvtBroadphase"));
    lua_pushnumber(L, self->getVelocityPrediction());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getVelocityPrediction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getVelocityPrediction: Unknown exception");
  }
  return dub::error(L);
}

/** void btDbvtBroadphase::setAabbForceUpdate(btBroadphaseProxy *absproxy, const btVector3 &aabbMin, const btVector3 &aabbMax, btDispatcher *)
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:139
 */
static int btDbvtBroadphase_setAabbForceUpdate(lua_State *L) {
  try {
    btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata(L, 1, "bt.DbvtBroadphase"));
    btBroadphaseProxy *absproxy = *((btBroadphaseProxy **)dub::checksdata(L, 2, "BroadphaseProxy"));
    btVector3 *aabbMin = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    btVector3 *aabbMax = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
    btDispatcher *p4 = *((btDispatcher **)dub::checksdata(L, 5, "bt.Dispatcher"));
    self->setAabbForceUpdate(absproxy, *aabbMin, *aabbMax, p4);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setAabbForceUpdate: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setAabbForceUpdate: Unknown exception");
  }
  return dub::error(L);
}

/** static void btDbvtBroadphase::benchmark(btBroadphaseInterface *)
 * src/vendor/bullet/src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h:141
 */
static int btDbvtBroadphase_benchmark(lua_State *L) {
  try {
    btBroadphaseInterface *p1 = *((btBroadphaseInterface **)dub::checksdata(L, 1, "bt.BroadphaseInterface"));
    btDbvtBroadphase::benchmark(p1);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "benchmark: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "benchmark: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int btDbvtBroadphase___tostring(lua_State *L) {
  btDbvtBroadphase *self = *((btDbvtBroadphase **)dub::checksdata_n(L, 1, "bt.DbvtBroadphase"));
  lua_pushfstring(L, "bt.DbvtBroadphase: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg btDbvtBroadphase_member_methods[] = {
  { "__newindex"   , btDbvtBroadphase__set_ },
  { "__index"      , btDbvtBroadphase__get_ },
  { "_cast_"       , btDbvtBroadphase__cast_ },
  { "new"          , btDbvtBroadphase_btDbvtBroadphase },
  { "__gc"         , btDbvtBroadphase__btDbvtBroadphase },
  { "collide"      , btDbvtBroadphase_collide },
  { "optimize"     , btDbvtBroadphase_optimize },
  { "createProxy"  , btDbvtBroadphase_createProxy },
  { "destroyProxy" , btDbvtBroadphase_destroyProxy },
  { "setAabb"      , btDbvtBroadphase_setAabb },
  { "rayTest"      , btDbvtBroadphase_rayTest },
  { "aabbTest"     , btDbvtBroadphase_aabbTest },
  { "getAabb"      , btDbvtBroadphase_getAabb },
  { "calculateOverlappingPairs", btDbvtBroadphase_calculateOverlappingPairs },
  { "getOverlappingPairCache", btDbvtBroadphase_getOverlappingPairCache },
  { "getBroadphaseAabb", btDbvtBroadphase_getBroadphaseAabb },
  { "printStats"   , btDbvtBroadphase_printStats },
  { "resetPool"    , btDbvtBroadphase_resetPool },
  { "performDeferredRemoval", btDbvtBroadphase_performDeferredRemoval },
  { "setVelocityPrediction", btDbvtBroadphase_setVelocityPrediction },
  { "getVelocityPrediction", btDbvtBroadphase_getVelocityPrediction },
  { "setAabbForceUpdate", btDbvtBroadphase_setAabbForceUpdate },
  { "benchmark"    , btDbvtBroadphase_benchmark },
  { "__tostring"   , btDbvtBroadphase___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};

// --=============================================== CONSTANTS
static const struct dub::const_Reg btDbvtBroadphase_const[] = {
  { "DYNAMIC_SET"  , btDbvtBroadphase::DYNAMIC_SET },
  { "FIXED_SET"    , btDbvtBroadphase::FIXED_SET },
  { "STAGECOUNT"   , btDbvtBroadphase::STAGECOUNT },
  { NULL, 0},
};

extern "C" int luaopen_bt_DbvtBroadphase(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.DbvtBroadphase");
  // <mt>
  // register class constants
  dub::register_const(L, btDbvtBroadphase_const);

  // register member methods
  dub::fregister(L, btDbvtBroadphase_member_methods);
  // setup meta-table
  dub::setup(L, "bt.DbvtBroadphase");
  // <mt>
  return 1;
}
