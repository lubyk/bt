/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class btStaticPlaneShape
 *
 * This file has been generated by dub 2.2.1.
 */
#include "dub/dub.h"
#include "BulletCollision/CollisionShapes/btStaticPlaneShape.h"


/** Cast (class_name)
 * 
 */
static int btStaticPlaneShape__cast_(lua_State *L) {

  btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata_n(L, 1, "bt.StaticPlaneShape"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub::hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "bt.ConcaveShape")) break;
      *retval__ = static_cast<btConcaveShape *>(self);
      return 1;
    }
    case 1: {
      if (DUB_ASSERT_KEY(key, "bt.CollisionShape")) break;
      *retval__ = static_cast<btCollisionShape *>(self);
      return 1;
    }
  }
  return 0;
}

/** btStaticPlaneShape::btStaticPlaneShape(const btVector3 &planeNormal, btScalar planeConstant)
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btStaticPlaneShape.h:36
 */
static int btStaticPlaneShape_btStaticPlaneShape(lua_State *L) {
  try {
    btVector3 *planeNormal = *((btVector3 **)dub::checksdata(L, 1, "bt.Vector3"));
    btScalar planeConstant = dub::checknumber(L, 2);
    btStaticPlaneShape *retval__ = new btStaticPlaneShape(*planeNormal, planeConstant);
    dub::pushudata(L, retval__, "bt.StaticPlaneShape", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btStaticPlaneShape::~btStaticPlaneShape()
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btStaticPlaneShape.h:38
 */
static int btStaticPlaneShape__btStaticPlaneShape(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "bt.StaticPlaneShape"));
    if (userdata->gc) {
      btStaticPlaneShape *self = (btStaticPlaneShape *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btStaticPlaneShape::getAabb(const btTransform &t, btVector3 &aabbMin, btVector3 &aabbMax) const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btStaticPlaneShape.h:41
 */
static int btStaticPlaneShape_getAabb(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    btTransform *t = *((btTransform **)dub::checksdata(L, 2, "bt.Transform"));
    btVector3 *aabbMin = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    btVector3 *aabbMax = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
    self->getAabb(*t, *aabbMin, *aabbMax);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAabb: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAabb: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btStaticPlaneShape::processAllTriangles(btTriangleCallback *callback, const btVector3 &aabbMin, const btVector3 &aabbMax) const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btStaticPlaneShape.h:43
 */
static int btStaticPlaneShape_processAllTriangles(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    btTriangleCallback *callback = *((btTriangleCallback **)dub::checksdata(L, 2, "TriangleCallback"));
    btVector3 *aabbMin = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    btVector3 *aabbMax = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
    self->processAllTriangles(callback, *aabbMin, *aabbMax);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "processAllTriangles: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "processAllTriangles: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btStaticPlaneShape::calculateLocalInertia(btScalar mass, btVector3 &inertia) const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btStaticPlaneShape.h:45
 */
static int btStaticPlaneShape_calculateLocalInertia(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    btScalar mass = dub::checknumber(L, 2);
    btVector3 *inertia = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    self->calculateLocalInertia(mass, *inertia);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "calculateLocalInertia: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "calculateLocalInertia: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btStaticPlaneShape::setLocalScaling(const btVector3 &scaling)
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btStaticPlaneShape.h:47
 */
static int btStaticPlaneShape_setLocalScaling(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    btVector3 *scaling = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    self->setLocalScaling(*scaling);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setLocalScaling: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setLocalScaling: Unknown exception");
  }
  return dub::error(L);
}

/** virtual const btVector3& btStaticPlaneShape::getLocalScaling() const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btStaticPlaneShape.h:48
 */
static int btStaticPlaneShape_getLocalScaling(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    dub::pushudata(L, const_cast<btVector3*>(&self->getLocalScaling()), "bt.Vector3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getLocalScaling: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getLocalScaling: Unknown exception");
  }
  return dub::error(L);
}

/** const btVector3& btStaticPlaneShape::getPlaneNormal() const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btStaticPlaneShape.h:50
 */
static int btStaticPlaneShape_getPlaneNormal(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    dub::pushudata(L, const_cast<btVector3*>(&self->getPlaneNormal()), "bt.Vector3", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPlaneNormal: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPlaneNormal: Unknown exception");
  }
  return dub::error(L);
}

/** const btScalar& btStaticPlaneShape::getPlaneConstant() const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btStaticPlaneShape.h:55
 */
static int btStaticPlaneShape_getPlaneConstant(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    lua_pushnumber(L, self->getPlaneConstant());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getPlaneConstant: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getPlaneConstant: Unknown exception");
  }
  return dub::error(L);
}

/** virtual const char* btStaticPlaneShape::getName() const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btStaticPlaneShape.h:61
 */
static int btStaticPlaneShape_getName(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    lua_pushstring(L, self->getName());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getName: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getName: Unknown exception");
  }
  return dub::error(L);
}

/** int btStaticPlaneShape::calculateSerializeBufferSize() const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btStaticPlaneShape.h:63
 */
static int btStaticPlaneShape_calculateSerializeBufferSize(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    lua_pushnumber(L, self->calculateSerializeBufferSize());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "calculateSerializeBufferSize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "calculateSerializeBufferSize: Unknown exception");
  }
  return dub::error(L);
}

/** const char * btStaticPlaneShape::serialize(void *dataBuffer, btSerializer *serializer) const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btStaticPlaneShape.h:66
 */
static int btStaticPlaneShape_serialize(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    void *dataBuffer = *((void **)dub::checksdata(L, 2, "void"));
    btSerializer *serializer = *((btSerializer **)dub::checksdata(L, 3, "Serializer"));
    lua_pushstring(L, self->serialize(dataBuffer, serializer));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "serialize: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "serialize: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btScalar btConcaveShape::getMargin() const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btConcaveShape.h:50
 */
static int btStaticPlaneShape_getMargin(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    lua_pushnumber(L, self->getMargin());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getMargin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getMargin: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btConcaveShape::setMargin(btScalar collisionMargin)
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btConcaveShape.h:53
 */
static int btStaticPlaneShape_setMargin(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    btScalar collisionMargin = dub::checknumber(L, 2);
    self->setMargin(collisionMargin);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setMargin: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setMargin: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionShape::getBoundingSphere(btVector3 &center, btScalar &radius) const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btCollisionShape.h:48
 */
static int btStaticPlaneShape_getBoundingSphere(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    btVector3 *center = *((btVector3 **)dub::checksdata(L, 2, "bt.Vector3"));
    btScalar radius = dub::checknumber(L, 3);
    self->getBoundingSphere(*center, radius);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getBoundingSphere: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getBoundingSphere: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btScalar btCollisionShape::getAngularMotionDisc() const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btCollisionShape.h:51
 */
static int btStaticPlaneShape_getAngularMotionDisc(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    lua_pushnumber(L, self->getAngularMotionDisc());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAngularMotionDisc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAngularMotionDisc: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btScalar btCollisionShape::getContactBreakingThreshold(btScalar defaultContactThresholdFactor) const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btCollisionShape.h:53
 */
static int btStaticPlaneShape_getContactBreakingThreshold(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    btScalar defaultContactThresholdFactor = dub::checknumber(L, 2);
    lua_pushnumber(L, self->getContactBreakingThreshold(defaultContactThresholdFactor));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getContactBreakingThreshold: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getContactBreakingThreshold: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionShape::calculateTemporalAabb(const btTransform &curTrans, const btVector3 &linvel, const btVector3 &angvel, btScalar timeStep, btVector3 &temporalAabbMin, btVector3 &temporalAabbMax) const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btCollisionShape.h:58
 */
static int btStaticPlaneShape_calculateTemporalAabb(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    btTransform *curTrans = *((btTransform **)dub::checksdata(L, 2, "bt.Transform"));
    btVector3 *linvel = *((btVector3 **)dub::checksdata(L, 3, "bt.Vector3"));
    btVector3 *angvel = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
    btScalar timeStep = dub::checknumber(L, 5);
    btVector3 *temporalAabbMin = *((btVector3 **)dub::checksdata(L, 6, "bt.Vector3"));
    btVector3 *temporalAabbMax = *((btVector3 **)dub::checksdata(L, 7, "bt.Vector3"));
    self->calculateTemporalAabb(*curTrans, *linvel, *angvel, timeStep, *temporalAabbMin, *temporalAabbMax);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "calculateTemporalAabb: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "calculateTemporalAabb: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionShape::isPolyhedral() const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btCollisionShape.h:62
 */
static int btStaticPlaneShape_isPolyhedral(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    lua_pushboolean(L, self->isPolyhedral());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isPolyhedral: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isPolyhedral: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionShape::isConvex2d() const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btCollisionShape.h:67
 */
static int btStaticPlaneShape_isConvex2d(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    lua_pushboolean(L, self->isConvex2d());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isConvex2d: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isConvex2d: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionShape::isConvex() const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btCollisionShape.h:72
 */
static int btStaticPlaneShape_isConvex(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    lua_pushboolean(L, self->isConvex());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isConvex: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isConvex: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionShape::isNonMoving() const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btCollisionShape.h:76
 */
static int btStaticPlaneShape_isNonMoving(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    lua_pushboolean(L, self->isNonMoving());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isNonMoving: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isNonMoving: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionShape::isConcave() const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btCollisionShape.h:80
 */
static int btStaticPlaneShape_isConcave(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    lua_pushboolean(L, self->isConcave());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isConcave: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isConcave: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionShape::isCompound() const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btCollisionShape.h:84
 */
static int btStaticPlaneShape_isCompound(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    lua_pushboolean(L, self->isCompound());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isCompound: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isCompound: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionShape::isSoftBody() const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btCollisionShape.h:89
 */
static int btStaticPlaneShape_isSoftBody(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    lua_pushboolean(L, self->isSoftBody());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isSoftBody: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isSoftBody: Unknown exception");
  }
  return dub::error(L);
}

/** bool btCollisionShape::isInfinite() const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btCollisionShape.h:95
 */
static int btStaticPlaneShape_isInfinite(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    lua_pushboolean(L, self->isInfinite());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "isInfinite: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "isInfinite: Unknown exception");
  }
  return dub::error(L);
}

/** int btCollisionShape::getShapeType() const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btCollisionShape.h:111
 */
static int btStaticPlaneShape_getShapeType(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    lua_pushnumber(L, self->getShapeType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getShapeType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getShapeType: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btVector3 btCollisionShape::getAnisotropicRollingFrictionDirection() const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btCollisionShape.h:115
 */
static int btStaticPlaneShape_getAnisotropicRollingFrictionDirection(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    dub::pushudata(L, new btVector3(self->getAnisotropicRollingFrictionDirection()), "bt.Vector3", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getAnisotropicRollingFrictionDirection: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getAnisotropicRollingFrictionDirection: Unknown exception");
  }
  return dub::error(L);
}

/** void btCollisionShape::setUserPointer(void *userPtr)
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btCollisionShape.h:124
 */
static int btStaticPlaneShape_setUserPointer(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    void *userPtr = *((void **)dub::checksdata(L, 2, "void"));
    self->setUserPointer(userPtr);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setUserPointer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setUserPointer: Unknown exception");
  }
  return dub::error(L);
}

/** void* btCollisionShape::getUserPointer() const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btCollisionShape.h:129
 */
static int btStaticPlaneShape_getUserPointer(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    self->getUserPointer();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getUserPointer: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getUserPointer: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btCollisionShape::serializeSingleShape(btSerializer *serializer) const
 * src/vendor/bullet/src/BulletCollision/CollisionShapes/btCollisionShape.h:139
 */
static int btStaticPlaneShape_serializeSingleShape(lua_State *L) {
  try {
    btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata(L, 1, "bt.StaticPlaneShape"));
    btSerializer *serializer = *((btSerializer **)dub::checksdata(L, 2, "Serializer"));
    self->serializeSingleShape(serializer);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "serializeSingleShape: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "serializeSingleShape: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int btStaticPlaneShape___tostring(lua_State *L) {
  btStaticPlaneShape *self = *((btStaticPlaneShape **)dub::checksdata_n(L, 1, "bt.StaticPlaneShape"));
  lua_pushfstring(L, "bt.StaticPlaneShape: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg btStaticPlaneShape_member_methods[] = {
  { "_cast_"       , btStaticPlaneShape__cast_ },
  { "new"          , btStaticPlaneShape_btStaticPlaneShape },
  { "__gc"         , btStaticPlaneShape__btStaticPlaneShape },
  { "getAabb"      , btStaticPlaneShape_getAabb },
  { "processAllTriangles", btStaticPlaneShape_processAllTriangles },
  { "calculateLocalInertia", btStaticPlaneShape_calculateLocalInertia },
  { "setLocalScaling", btStaticPlaneShape_setLocalScaling },
  { "getLocalScaling", btStaticPlaneShape_getLocalScaling },
  { "getPlaneNormal", btStaticPlaneShape_getPlaneNormal },
  { "getPlaneConstant", btStaticPlaneShape_getPlaneConstant },
  { "getName"      , btStaticPlaneShape_getName },
  { "calculateSerializeBufferSize", btStaticPlaneShape_calculateSerializeBufferSize },
  { "serialize"    , btStaticPlaneShape_serialize },
  { "getMargin"    , btStaticPlaneShape_getMargin },
  { "setMargin"    , btStaticPlaneShape_setMargin },
  { "getBoundingSphere", btStaticPlaneShape_getBoundingSphere },
  { "getAngularMotionDisc", btStaticPlaneShape_getAngularMotionDisc },
  { "getContactBreakingThreshold", btStaticPlaneShape_getContactBreakingThreshold },
  { "calculateTemporalAabb", btStaticPlaneShape_calculateTemporalAabb },
  { "isPolyhedral" , btStaticPlaneShape_isPolyhedral },
  { "isConvex2d"   , btStaticPlaneShape_isConvex2d },
  { "isConvex"     , btStaticPlaneShape_isConvex },
  { "isNonMoving"  , btStaticPlaneShape_isNonMoving },
  { "isConcave"    , btStaticPlaneShape_isConcave },
  { "isCompound"   , btStaticPlaneShape_isCompound },
  { "isSoftBody"   , btStaticPlaneShape_isSoftBody },
  { "isInfinite"   , btStaticPlaneShape_isInfinite },
  { "getShapeType" , btStaticPlaneShape_getShapeType },
  { "getAnisotropicRollingFrictionDirection", btStaticPlaneShape_getAnisotropicRollingFrictionDirection },
  { "setUserPointer", btStaticPlaneShape_setUserPointer },
  { "getUserPointer", btStaticPlaneShape_getUserPointer },
  { "serializeSingleShape", btStaticPlaneShape_serializeSingleShape },
  { "__tostring"   , btStaticPlaneShape___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_bt_StaticPlaneShape(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.StaticPlaneShape");
  // <mt>

  // register member methods
  dub::fregister(L, btStaticPlaneShape_member_methods);
  // setup meta-table
  dub::setup(L, "bt.StaticPlaneShape");
  // <mt>
  return 1;
}
