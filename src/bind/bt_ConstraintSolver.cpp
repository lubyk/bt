/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class btConstraintSolver
 *
 * This file has been generated by dub 2.2.1.
 */
#include "dub/dub.h"
#include "BulletDynamics/ConstraintSolver/btConstraintSolver.h"


/** virtual btConstraintSolver::~btConstraintSolver()
 * src/vendor/bullet/src/BulletDynamics/ConstraintSolver/btConstraintSolver.h:44
 */
static int btConstraintSolver__btConstraintSolver(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "bt.ConstraintSolver"));
    if (userdata->gc) {
      btConstraintSolver *self = (btConstraintSolver *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btConstraintSolver::prepareSolve(int, int)
 * src/vendor/bullet/src/BulletDynamics/ConstraintSolver/btConstraintSolver.h:46
 */
static int btConstraintSolver_prepareSolve(lua_State *L) {
  try {
    btConstraintSolver *self = *((btConstraintSolver **)dub::checksdata(L, 1, "bt.ConstraintSolver"));
    int p1 = dub::checkint(L, 2);
    int p2 = dub::checkint(L, 3);
    self->prepareSolve(p1, p2);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "prepareSolve: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "prepareSolve: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btScalar btConstraintSolver::solveGroup(btCollisionObject **bodies, int numBodies, btPersistentManifold **manifold, int numManifolds, btTypedConstraint **constraints, int numConstraints, const btContactSolverInfo &info, class btIDebugDraw *debugDrawer, btDispatcher *dispatcher)=0
 * src/vendor/bullet/src/BulletDynamics/ConstraintSolver/btConstraintSolver.h:49
 */
static int btConstraintSolver_solveGroup(lua_State *L) {
  try {
    btConstraintSolver *self = *((btConstraintSolver **)dub::checksdata(L, 1, "bt.ConstraintSolver"));
    btCollisionObject* *bodies = *((btCollisionObject* **)dub::checksdata(L, 2, "CollisionObject*"));
    int numBodies = dub::checkint(L, 3);
    btPersistentManifold* *manifold = *((btPersistentManifold* **)dub::checksdata(L, 4, "PersistentManifold*"));
    int numManifolds = dub::checkint(L, 5);
    btTypedConstraint* *constraints = *((btTypedConstraint* **)dub::checksdata(L, 6, "TypedConstraint*"));
    int numConstraints = dub::checkint(L, 7);
    btContactSolverInfo *info = *((btContactSolverInfo **)dub::checksdata(L, 8, "ContactSolverInfo"));
    class btIDebugDraw *debugDrawer = *((class btIDebugDraw **)dub::checksdata(L, 9, "class btIDebugDraw"));
    btDispatcher *dispatcher = *((btDispatcher **)dub::checksdata(L, 10, "bt.Dispatcher"));
    lua_pushnumber(L, self->solveGroup(bodies, numBodies, manifold, numManifolds, constraints, numConstraints, *info, debugDrawer, dispatcher));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "solveGroup: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "solveGroup: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btConstraintSolver::allSolved(const btContactSolverInfo &, class btIDebugDraw *)
 * src/vendor/bullet/src/BulletDynamics/ConstraintSolver/btConstraintSolver.h:51
 */
static int btConstraintSolver_allSolved(lua_State *L) {
  try {
    btConstraintSolver *self = *((btConstraintSolver **)dub::checksdata(L, 1, "bt.ConstraintSolver"));
    btContactSolverInfo *p1 = *((btContactSolverInfo **)dub::checksdata(L, 2, "ContactSolverInfo"));
    class btIDebugDraw *p2 = *((class btIDebugDraw **)dub::checksdata(L, 3, "class btIDebugDraw"));
    self->allSolved(*p1, p2);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "allSolved: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "allSolved: Unknown exception");
  }
  return dub::error(L);
}

/** virtual void btConstraintSolver::reset()=0
 * src/vendor/bullet/src/BulletDynamics/ConstraintSolver/btConstraintSolver.h:54
 */
static int btConstraintSolver_reset(lua_State *L) {
  try {
    btConstraintSolver *self = *((btConstraintSolver **)dub::checksdata(L, 1, "bt.ConstraintSolver"));
    self->reset();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "reset: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "reset: Unknown exception");
  }
  return dub::error(L);
}

/** virtual btConstraintSolverType btConstraintSolver::getSolverType() const =0
 * src/vendor/bullet/src/BulletDynamics/ConstraintSolver/btConstraintSolver.h:56
 */
static int btConstraintSolver_getSolverType(lua_State *L) {
  try {
    btConstraintSolver *self = *((btConstraintSolver **)dub::checksdata(L, 1, "bt.ConstraintSolver"));
    lua_pushnumber(L, self->getSolverType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSolverType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSolverType: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int btConstraintSolver___tostring(lua_State *L) {
  btConstraintSolver *self = *((btConstraintSolver **)dub::checksdata_n(L, 1, "bt.ConstraintSolver"));
  lua_pushfstring(L, "bt.ConstraintSolver: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg btConstraintSolver_member_methods[] = {
  { "__gc"         , btConstraintSolver__btConstraintSolver },
  { "prepareSolve" , btConstraintSolver_prepareSolve },
  { "solveGroup"   , btConstraintSolver_solveGroup },
  { "allSolved"    , btConstraintSolver_allSolved },
  { "reset"        , btConstraintSolver_reset },
  { "getSolverType", btConstraintSolver_getSolverType },
  { "__tostring"   , btConstraintSolver___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_bt_ConstraintSolver(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.ConstraintSolver");
  // <mt>

  // register member methods
  dub::fregister(L, btConstraintSolver_member_methods);
  // setup meta-table
  dub::setup(L, "bt.ConstraintSolver");
  // <mt>
  return 1;
}
