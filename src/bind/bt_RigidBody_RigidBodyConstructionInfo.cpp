/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class btRigidBodyConstructionInfo
 *
 * This file has been generated by dub 2.2.1.
 */
#include "dub/dub.h"
#include "BulletDynamics/Dynamics/btRigidBody.h"


/** ~btRigidBodyConstructionInfo()
 * 
 */
static int btRigidBodyConstructionInfo__btRigidBodyConstructionInfo(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub::checksdata_d(L, 1, "bt.RigidBody.RigidBodyConstructionInfo"));
    if (userdata->gc) {
      btRigidBody::btRigidBodyConstructionInfo *self = (btRigidBody::btRigidBodyConstructionInfo *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub::error(L);
}

/** Set attributes (key, value)
 * 
 */
static int btRigidBodyConstructionInfo__set_(lua_State *L) {

  btRigidBody::btRigidBodyConstructionInfo *self = *((btRigidBody::btRigidBodyConstructionInfo **)dub::checksdata_n(L, 1, "bt.RigidBody.RigidBodyConstructionInfo"));
  const char *key = luaL_checkstring(L, 2);
  int key_h = dub::hash(key, 81);
  switch(key_h) {
    case 42: {
      if (DUB_ASSERT_KEY(key, "m_mass")) break;
      self->m_mass = luaL_checknumber(L, 3);
      return 0;
    }
    case 15: {
      if (DUB_ASSERT_KEY(key, "m_motionState")) break;
      dub::protect(L, 1, 3, "m_motionState");
      self->m_motionState = *((btMotionState **)dub::checksdata_n(L, 3, "bt.MotionState"));
      return 0;
    }
    case 46: {
      if (DUB_ASSERT_KEY(key, "m_startWorldTransform")) break;
      self->m_startWorldTransform = **((btTransform **)dub::checksdata_n(L, 3, "bt.Transform"));
      return 0;
    }
    case 5: {
      if (DUB_ASSERT_KEY(key, "m_collisionShape")) break;
      dub::protect(L, 1, 3, "m_collisionShape");
      self->m_collisionShape = *((btCollisionShape **)dub::checksdata_n(L, 3, "bt.CollisionShape"));
      return 0;
    }
    case 60: {
      if (DUB_ASSERT_KEY(key, "m_localInertia")) break;
      self->m_localInertia = **((btVector3 **)dub::checksdata_n(L, 3, "bt.Vector3"));
      return 0;
    }
    case 74: {
      if (DUB_ASSERT_KEY(key, "m_linearDamping")) break;
      self->m_linearDamping = luaL_checknumber(L, 3);
      return 0;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "m_angularDamping")) break;
      self->m_angularDamping = luaL_checknumber(L, 3);
      return 0;
    }
    case 79: {
      if (DUB_ASSERT_KEY(key, "m_friction")) break;
      self->m_friction = luaL_checknumber(L, 3);
      return 0;
    }
    case 57: {
      if (DUB_ASSERT_KEY(key, "m_rollingFriction")) break;
      self->m_rollingFriction = luaL_checknumber(L, 3);
      return 0;
    }
    case 36: {
      if (DUB_ASSERT_KEY(key, "m_restitution")) break;
      self->m_restitution = luaL_checknumber(L, 3);
      return 0;
    }
    case 24: {
      if (DUB_ASSERT_KEY(key, "m_linearSleepingThreshold")) break;
      self->m_linearSleepingThreshold = luaL_checknumber(L, 3);
      return 0;
    }
    case 56: {
      if (DUB_ASSERT_KEY(key, "m_angularSleepingThreshold")) break;
      self->m_angularSleepingThreshold = luaL_checknumber(L, 3);
      return 0;
    }
    case 51: {
      if (DUB_ASSERT_KEY(key, "m_additionalDamping")) break;
      self->m_additionalDamping = luaL_checkboolean(L, 3);
      return 0;
    }
    case 64: {
      if (DUB_ASSERT_KEY(key, "m_additionalDampingFactor")) break;
      self->m_additionalDampingFactor = luaL_checknumber(L, 3);
      return 0;
    }
    case 22: {
      if (DUB_ASSERT_KEY(key, "m_additionalLinearDampingThresholdSqr")) break;
      self->m_additionalLinearDampingThresholdSqr = luaL_checknumber(L, 3);
      return 0;
    }
    case 41: {
      if (DUB_ASSERT_KEY(key, "m_additionalAngularDampingThresholdSqr")) break;
      self->m_additionalAngularDampingThresholdSqr = luaL_checknumber(L, 3);
      return 0;
    }
    case 19: {
      if (DUB_ASSERT_KEY(key, "m_additionalAngularDampingFactor")) break;
      self->m_additionalAngularDampingFactor = luaL_checknumber(L, 3);
      return 0;
    }
  }
  if (lua_istable(L, 1)) {
    lua_rawset(L, 1);
  } else {
    luaL_error(L, KEY_EXCEPTION_MSG, key);
  }
  return 0;
}

/** Get attributes (key)
 * 
 */
static int btRigidBodyConstructionInfo__get_(lua_State *L) {

  btRigidBody::btRigidBodyConstructionInfo *self = *((btRigidBody::btRigidBodyConstructionInfo **)dub::checksdata_n(L, 1, "bt.RigidBody.RigidBodyConstructionInfo", true));
  const char *key = luaL_checkstring(L, 2);
  // <self> "key" <mt>
  // rawget(mt, key)
  lua_pushvalue(L, 2);
  // <self> "key" <mt> "key"
  lua_rawget(L, -2);
  if (!lua_isnil(L, -1)) {
    // Found method.
    return 1;
  } else {
    // Not in mt = attribute access.
    lua_pop(L, 2);
  }
  int key_h = dub::hash(key, 81);
  switch(key_h) {
    case 42: {
      if (DUB_ASSERT_KEY(key, "m_mass")) break;
      lua_pushnumber(L, self->m_mass);
      return 1;
    }
    case 15: {
      if (DUB_ASSERT_KEY(key, "m_motionState")) break;
      btMotionState *retval__ = self->m_motionState;
      if (!retval__) return 0;
      dub::pushudata(L, retval__, "bt.MotionState", false);
      return 1;
    }
    case 46: {
      if (DUB_ASSERT_KEY(key, "m_startWorldTransform")) break;
      dub::pushudata(L, &self->m_startWorldTransform, "bt.Transform", false);
      return 1;
    }
    case 5: {
      if (DUB_ASSERT_KEY(key, "m_collisionShape")) break;
      btCollisionShape *retval__ = self->m_collisionShape;
      if (!retval__) return 0;
      dub::pushudata(L, retval__, "bt.CollisionShape", false);
      return 1;
    }
    case 60: {
      if (DUB_ASSERT_KEY(key, "m_localInertia")) break;
      dub::pushudata(L, &self->m_localInertia, "bt.Vector3", false);
      return 1;
    }
    case 74: {
      if (DUB_ASSERT_KEY(key, "m_linearDamping")) break;
      lua_pushnumber(L, self->m_linearDamping);
      return 1;
    }
    case 0: {
      if (DUB_ASSERT_KEY(key, "m_angularDamping")) break;
      lua_pushnumber(L, self->m_angularDamping);
      return 1;
    }
    case 79: {
      if (DUB_ASSERT_KEY(key, "m_friction")) break;
      lua_pushnumber(L, self->m_friction);
      return 1;
    }
    case 57: {
      if (DUB_ASSERT_KEY(key, "m_rollingFriction")) break;
      lua_pushnumber(L, self->m_rollingFriction);
      return 1;
    }
    case 36: {
      if (DUB_ASSERT_KEY(key, "m_restitution")) break;
      lua_pushnumber(L, self->m_restitution);
      return 1;
    }
    case 24: {
      if (DUB_ASSERT_KEY(key, "m_linearSleepingThreshold")) break;
      lua_pushnumber(L, self->m_linearSleepingThreshold);
      return 1;
    }
    case 56: {
      if (DUB_ASSERT_KEY(key, "m_angularSleepingThreshold")) break;
      lua_pushnumber(L, self->m_angularSleepingThreshold);
      return 1;
    }
    case 51: {
      if (DUB_ASSERT_KEY(key, "m_additionalDamping")) break;
      lua_pushboolean(L, self->m_additionalDamping);
      return 1;
    }
    case 64: {
      if (DUB_ASSERT_KEY(key, "m_additionalDampingFactor")) break;
      lua_pushnumber(L, self->m_additionalDampingFactor);
      return 1;
    }
    case 22: {
      if (DUB_ASSERT_KEY(key, "m_additionalLinearDampingThresholdSqr")) break;
      lua_pushnumber(L, self->m_additionalLinearDampingThresholdSqr);
      return 1;
    }
    case 41: {
      if (DUB_ASSERT_KEY(key, "m_additionalAngularDampingThresholdSqr")) break;
      lua_pushnumber(L, self->m_additionalAngularDampingThresholdSqr);
      return 1;
    }
    case 19: {
      if (DUB_ASSERT_KEY(key, "m_additionalAngularDampingFactor")) break;
      lua_pushnumber(L, self->m_additionalAngularDampingFactor);
      return 1;
    }
  }
  return 0;
}

/** btRigidBody::btRigidBodyConstructionInfo::btRigidBodyConstructionInfo(btScalar mass, btMotionState *motionState, btCollisionShape *collisionShape, const btVector3 &localInertia=btVector3(0, 0, 0))
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btRigidBody.h:149
 */
static int btRigidBodyConstructionInfo_btRigidBodyConstructionInfo(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      btScalar mass = dub::checknumber(L, 1);
      btMotionState *motionState = *((btMotionState **)dub::checksdata(L, 2, "bt.MotionState"));
      btCollisionShape *collisionShape = *((btCollisionShape **)dub::checksdata(L, 3, "bt.CollisionShape"));
      btVector3 *localInertia = *((btVector3 **)dub::checksdata(L, 4, "bt.Vector3"));
      btRigidBody::btRigidBodyConstructionInfo *retval__ = new btRigidBody::btRigidBodyConstructionInfo(mass, motionState, collisionShape, *localInertia);
      dub::pushudata(L, retval__, "bt.RigidBody.RigidBodyConstructionInfo", true);
      return 1;
    } else {
      btScalar mass = dub::checknumber(L, 1);
      btMotionState *motionState = *((btMotionState **)dub::checksdata(L, 2, "bt.MotionState"));
      btCollisionShape *collisionShape = *((btCollisionShape **)dub::checksdata(L, 3, "bt.CollisionShape"));
      btRigidBody::btRigidBodyConstructionInfo *retval__ = new btRigidBody::btRigidBodyConstructionInfo(mass, motionState, collisionShape);
      dub::pushudata(L, retval__, "bt.RigidBody.RigidBodyConstructionInfo", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub::error(L);
}



// --=============================================== __tostring
static int btRigidBodyConstructionInfo___tostring(lua_State *L) {
  btRigidBody::btRigidBodyConstructionInfo *self = *((btRigidBody::btRigidBodyConstructionInfo **)dub::checksdata_n(L, 1, "bt.RigidBody.RigidBodyConstructionInfo"));
  lua_pushfstring(L, "bt.RigidBody.RigidBodyConstructionInfo: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg btRigidBodyConstructionInfo_member_methods[] = {
  { "__gc"         , btRigidBodyConstructionInfo__btRigidBodyConstructionInfo },
  { "__newindex"   , btRigidBodyConstructionInfo__set_ },
  { "__index"      , btRigidBodyConstructionInfo__get_ },
  { "new"          , btRigidBodyConstructionInfo_btRigidBodyConstructionInfo },
  { "__tostring"   , btRigidBodyConstructionInfo___tostring },
  { "deleted"      , dub::isDeleted       },
  { NULL, NULL},
};


extern "C" int luaopen_bt_RigidBody_RigidBodyConstructionInfo(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.RigidBody.RigidBodyConstructionInfo");
  // <mt>

  // register member methods
  dub::fregister(L, btRigidBodyConstructionInfo_member_methods);
  // setup meta-table
  dub::setup(L, "bt.RigidBody.RigidBodyConstructionInfo");
  // <mt>
  return 1;
}
